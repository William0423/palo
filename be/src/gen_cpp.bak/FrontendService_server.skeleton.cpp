// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FrontendService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::palo;

class FrontendServiceHandler : virtual public FrontendServiceIf {
 public:
  FrontendServiceHandler() {
    // Your initialization goes here
  }

  void getDbNames(TGetDbsResult& _return, const TGetDbsParams& params) {
    // Your implementation goes here
    printf("getDbNames\n");
  }

  void getTableNames(TGetTablesResult& _return, const TGetTablesParams& params) {
    // Your implementation goes here
    printf("getTableNames\n");
  }

  void describeTable(TDescribeTableResult& _return, const TDescribeTableParams& params) {
    // Your implementation goes here
    printf("describeTable\n");
  }

  void showVariables(TShowVariableResult& _return, const TShowVariableRequest& params) {
    // Your implementation goes here
    printf("showVariables\n");
  }

  void reportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params) {
    // Your implementation goes here
    printf("reportExecStatus\n");
  }

  void finishTask( ::palo::TMasterResult& _return, const  ::palo::TFinishTaskRequest& request) {
    // Your implementation goes here
    printf("finishTask\n");
  }

  void report( ::palo::TMasterResult& _return, const  ::palo::TReportRequest& request) {
    // Your implementation goes here
    printf("report\n");
  }

  void fetchResource( ::palo::TFetchResourceResult& _return) {
    // Your implementation goes here
    printf("fetchResource\n");
  }

  void miniLoad(TFeResult& _return, const TMiniLoadRequest& request) {
    // Your implementation goes here
    printf("miniLoad\n");
  }

  void updateMiniEtlTaskStatus(TFeResult& _return, const TUpdateMiniEtlTaskStatusRequest& request) {
    // Your implementation goes here
    printf("updateMiniEtlTaskStatus\n");
  }

  void loadCheck(TFeResult& _return, const TLoadCheckRequest& request) {
    // Your implementation goes here
    printf("loadCheck\n");
  }

  void forward(TMasterOpResult& _return, const TMasterOpRequest& params) {
    // Your implementation goes here
    printf("forward\n");
  }

  void listTableStatus(TListTableStatusResult& _return, const TGetTablesParams& params) {
    // Your implementation goes here
    printf("listTableStatus\n");
  }

  void updateExportTaskStatus(TFeResult& _return, const TUpdateExportTaskStatusRequest& request) {
    // Your implementation goes here
    printf("updateExportTaskStatus\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FrontendServiceHandler> handler(new FrontendServiceHandler());
  shared_ptr<TProcessor> processor(new FrontendServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

