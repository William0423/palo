/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Partitions_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace palo {

int _kTPartitionTypeValues[] = {
  TPartitionType::UNPARTITIONED,
  TPartitionType::RANDOM,
  TPartitionType::HASH_PARTITIONED,
  TPartitionType::RANGE_PARTITIONED
};
const char* _kTPartitionTypeNames[] = {
  "UNPARTITIONED",
  "RANDOM",
  "HASH_PARTITIONED",
  "RANGE_PARTITIONED"
};
const std::map<int, const char*> _TPartitionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTPartitionTypeValues, _kTPartitionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTDistributionTypeValues[] = {
  TDistributionType::UNPARTITIONED,
  TDistributionType::RANDOM,
  TDistributionType::HASH_PARTITIONED
};
const char* _kTDistributionTypeNames[] = {
  "UNPARTITIONED",
  "RANDOM",
  "HASH_PARTITIONED"
};
const std::map<int, const char*> _TDistributionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDistributionTypeValues, _kTDistributionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TPartitionKey::~TPartitionKey() throw() {
}


void TPartitionKey::__set_sign(const int16_t val) {
  this->sign = val;
}

void TPartitionKey::__set_type(const  ::palo::TPrimitiveType::type val) {
  this->type = val;
__isset.type = true;
}

void TPartitionKey::__set_key(const std::string& val) {
  this->key = val;
__isset.key = true;
}

uint32_t TPartitionKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sign = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sign);
          isset_sign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = ( ::palo::TPrimitiveType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sign)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPartitionKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPartitionKey");

  xfer += oprot->writeFieldBegin("sign", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->sign);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key) {
    xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->key);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPartitionKey &a, TPartitionKey &b) {
  using ::std::swap;
  swap(a.sign, b.sign);
  swap(a.type, b.type);
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

TPartitionKey::TPartitionKey(const TPartitionKey& other1) {
  sign = other1.sign;
  type = other1.type;
  key = other1.key;
  __isset = other1.__isset;
}
TPartitionKey& TPartitionKey::operator=(const TPartitionKey& other2) {
  sign = other2.sign;
  type = other2.type;
  key = other2.key;
  __isset = other2.__isset;
  return *this;
}
void TPartitionKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartitionKey(";
  out << "sign=" << to_string(sign);
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "key="; (__isset.key ? (out << to_string(key)) : (out << "<null>"));
  out << ")";
}


TPartitionRange::~TPartitionRange() throw() {
}


void TPartitionRange::__set_start_key(const TPartitionKey& val) {
  this->start_key = val;
}

void TPartitionRange::__set_end_key(const TPartitionKey& val) {
  this->end_key = val;
}

void TPartitionRange::__set_include_start_key(const bool val) {
  this->include_start_key = val;
}

void TPartitionRange::__set_include_end_key(const bool val) {
  this->include_end_key = val;
}

uint32_t TPartitionRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_start_key = false;
  bool isset_end_key = false;
  bool isset_include_start_key = false;
  bool isset_include_end_key = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->start_key.read(iprot);
          isset_start_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->end_key.read(iprot);
          isset_end_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->include_start_key);
          isset_include_start_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->include_end_key);
          isset_include_end_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_start_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_end_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_include_start_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_include_end_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPartitionRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPartitionRange");

  xfer += oprot->writeFieldBegin("start_key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->start_key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_key", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->end_key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("include_start_key", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->include_start_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("include_end_key", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->include_end_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPartitionRange &a, TPartitionRange &b) {
  using ::std::swap;
  swap(a.start_key, b.start_key);
  swap(a.end_key, b.end_key);
  swap(a.include_start_key, b.include_start_key);
  swap(a.include_end_key, b.include_end_key);
}

TPartitionRange::TPartitionRange(const TPartitionRange& other3) {
  start_key = other3.start_key;
  end_key = other3.end_key;
  include_start_key = other3.include_start_key;
  include_end_key = other3.include_end_key;
}
TPartitionRange& TPartitionRange::operator=(const TPartitionRange& other4) {
  start_key = other4.start_key;
  end_key = other4.end_key;
  include_start_key = other4.include_start_key;
  include_end_key = other4.include_end_key;
  return *this;
}
void TPartitionRange::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartitionRange(";
  out << "start_key=" << to_string(start_key);
  out << ", " << "end_key=" << to_string(end_key);
  out << ", " << "include_start_key=" << to_string(include_start_key);
  out << ", " << "include_end_key=" << to_string(include_end_key);
  out << ")";
}


TRangePartition::~TRangePartition() throw() {
}


void TRangePartition::__set_partition_id(const int64_t val) {
  this->partition_id = val;
}

void TRangePartition::__set_range(const TPartitionRange& val) {
  this->range = val;
}

void TRangePartition::__set_distributed_exprs(const std::vector< ::palo::TExpr> & val) {
  this->distributed_exprs = val;
__isset.distributed_exprs = true;
}

void TRangePartition::__set_distribute_bucket(const int32_t val) {
  this->distribute_bucket = val;
__isset.distribute_bucket = true;
}

uint32_t TRangePartition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partition_id = false;
  bool isset_range = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partition_id);
          isset_partition_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->range.read(iprot);
          isset_range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->distributed_exprs.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->distributed_exprs.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->distributed_exprs[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.distributed_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->distribute_bucket);
          this->__isset.distribute_bucket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partition_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_range)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRangePartition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRangePartition");

  xfer += oprot->writeFieldBegin("partition_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->partition_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->range.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.distributed_exprs) {
    xfer += oprot->writeFieldBegin("distributed_exprs", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->distributed_exprs.size()));
      std::vector< ::palo::TExpr> ::const_iterator _iter10;
      for (_iter10 = this->distributed_exprs.begin(); _iter10 != this->distributed_exprs.end(); ++_iter10)
      {
        xfer += (*_iter10).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.distribute_bucket) {
    xfer += oprot->writeFieldBegin("distribute_bucket", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->distribute_bucket);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRangePartition &a, TRangePartition &b) {
  using ::std::swap;
  swap(a.partition_id, b.partition_id);
  swap(a.range, b.range);
  swap(a.distributed_exprs, b.distributed_exprs);
  swap(a.distribute_bucket, b.distribute_bucket);
  swap(a.__isset, b.__isset);
}

TRangePartition::TRangePartition(const TRangePartition& other11) {
  partition_id = other11.partition_id;
  range = other11.range;
  distributed_exprs = other11.distributed_exprs;
  distribute_bucket = other11.distribute_bucket;
  __isset = other11.__isset;
}
TRangePartition& TRangePartition::operator=(const TRangePartition& other12) {
  partition_id = other12.partition_id;
  range = other12.range;
  distributed_exprs = other12.distributed_exprs;
  distribute_bucket = other12.distribute_bucket;
  __isset = other12.__isset;
  return *this;
}
void TRangePartition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRangePartition(";
  out << "partition_id=" << to_string(partition_id);
  out << ", " << "range=" << to_string(range);
  out << ", " << "distributed_exprs="; (__isset.distributed_exprs ? (out << to_string(distributed_exprs)) : (out << "<null>"));
  out << ", " << "distribute_bucket="; (__isset.distribute_bucket ? (out << to_string(distribute_bucket)) : (out << "<null>"));
  out << ")";
}


TDataPartition::~TDataPartition() throw() {
}


void TDataPartition::__set_type(const TPartitionType::type val) {
  this->type = val;
}

void TDataPartition::__set_partition_exprs(const std::vector< ::palo::TExpr> & val) {
  this->partition_exprs = val;
__isset.partition_exprs = true;
}

void TDataPartition::__set_partition_infos(const std::vector<TRangePartition> & val) {
  this->partition_infos = val;
__isset.partition_infos = true;
}

uint32_t TDataPartition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->type = (TPartitionType::type)ecast13;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_exprs.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->partition_exprs.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->partition_exprs[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partition_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_infos.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->partition_infos.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->partition_infos[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partition_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataPartition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataPartition");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partition_exprs) {
    xfer += oprot->writeFieldBegin("partition_exprs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_exprs.size()));
      std::vector< ::palo::TExpr> ::const_iterator _iter24;
      for (_iter24 = this->partition_exprs.begin(); _iter24 != this->partition_exprs.end(); ++_iter24)
      {
        xfer += (*_iter24).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partition_infos) {
    xfer += oprot->writeFieldBegin("partition_infos", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_infos.size()));
      std::vector<TRangePartition> ::const_iterator _iter25;
      for (_iter25 = this->partition_infos.begin(); _iter25 != this->partition_infos.end(); ++_iter25)
      {
        xfer += (*_iter25).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataPartition &a, TDataPartition &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.partition_exprs, b.partition_exprs);
  swap(a.partition_infos, b.partition_infos);
  swap(a.__isset, b.__isset);
}

TDataPartition::TDataPartition(const TDataPartition& other26) {
  type = other26.type;
  partition_exprs = other26.partition_exprs;
  partition_infos = other26.partition_infos;
  __isset = other26.__isset;
}
TDataPartition& TDataPartition::operator=(const TDataPartition& other27) {
  type = other27.type;
  partition_exprs = other27.partition_exprs;
  partition_infos = other27.partition_infos;
  __isset = other27.__isset;
  return *this;
}
void TDataPartition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataPartition(";
  out << "type=" << to_string(type);
  out << ", " << "partition_exprs="; (__isset.partition_exprs ? (out << to_string(partition_exprs)) : (out << "<null>"));
  out << ", " << "partition_infos="; (__isset.partition_infos ? (out << to_string(partition_infos)) : (out << "<null>"));
  out << ")";
}

} // namespace
