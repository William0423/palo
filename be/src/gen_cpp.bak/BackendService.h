/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackendService_H
#define BackendService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "BackendService_types.h"

namespace palo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BackendServiceIf {
 public:
  virtual ~BackendServiceIf() {}
  virtual void exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return, const  ::palo::TExecPlanFragmentParams& params) = 0;
  virtual void cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return, const  ::palo::TCancelPlanFragmentParams& params) = 0;
  virtual void transmit_data( ::palo::TTransmitDataResult& _return, const  ::palo::TTransmitDataParams& params) = 0;
  virtual void fetch_data( ::palo::TFetchDataResult& _return, const  ::palo::TFetchDataParams& params) = 0;
  virtual void submit_tasks( ::palo::TAgentResult& _return, const std::vector< ::palo::TAgentTaskRequest> & tasks) = 0;
  virtual void make_snapshot( ::palo::TAgentResult& _return, const  ::palo::TSnapshotRequest& snapshot_request) = 0;
  virtual void release_snapshot( ::palo::TAgentResult& _return, const std::string& snapshot_path) = 0;
  virtual void publish_cluster_state( ::palo::TAgentResult& _return, const  ::palo::TAgentPublishRequest& request) = 0;
  virtual void submit_etl_task( ::palo::TAgentResult& _return, const  ::palo::TMiniLoadEtlTaskRequest& request) = 0;
  virtual void get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return, const  ::palo::TMiniLoadEtlStatusRequest& request) = 0;
  virtual void delete_etl_files( ::palo::TAgentResult& _return, const  ::palo::TDeleteEtlFilesRequest& request) = 0;
  virtual void register_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id, const int32_t num_senders) = 0;
  virtual void deregister_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id) = 0;
  virtual void report_pull_load_sub_task_info( ::palo::TStatus& _return, const TPullLoadSubTaskInfo& task_info) = 0;
  virtual void fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return, const  ::palo::TUniqueId& id) = 0;
  virtual void fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return) = 0;
  virtual void submit_export_task( ::palo::TStatus& _return, const TExportTaskRequest& request) = 0;
  virtual void get_export_status( ::palo::TExportStatusResult& _return, const  ::palo::TUniqueId& task_id) = 0;
  virtual void erase_export_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& task_id) = 0;
};

class BackendServiceIfFactory {
 public:
  typedef BackendServiceIf Handler;

  virtual ~BackendServiceIfFactory() {}

  virtual BackendServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BackendServiceIf* /* handler */) = 0;
};

class BackendServiceIfSingletonFactory : virtual public BackendServiceIfFactory {
 public:
  BackendServiceIfSingletonFactory(const boost::shared_ptr<BackendServiceIf>& iface) : iface_(iface) {}
  virtual ~BackendServiceIfSingletonFactory() {}

  virtual BackendServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BackendServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BackendServiceIf> iface_;
};

class BackendServiceNull : virtual public BackendServiceIf {
 public:
  virtual ~BackendServiceNull() {}
  void exec_plan_fragment( ::palo::TExecPlanFragmentResult& /* _return */, const  ::palo::TExecPlanFragmentParams& /* params */) {
    return;
  }
  void cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& /* _return */, const  ::palo::TCancelPlanFragmentParams& /* params */) {
    return;
  }
  void transmit_data( ::palo::TTransmitDataResult& /* _return */, const  ::palo::TTransmitDataParams& /* params */) {
    return;
  }
  void fetch_data( ::palo::TFetchDataResult& /* _return */, const  ::palo::TFetchDataParams& /* params */) {
    return;
  }
  void submit_tasks( ::palo::TAgentResult& /* _return */, const std::vector< ::palo::TAgentTaskRequest> & /* tasks */) {
    return;
  }
  void make_snapshot( ::palo::TAgentResult& /* _return */, const  ::palo::TSnapshotRequest& /* snapshot_request */) {
    return;
  }
  void release_snapshot( ::palo::TAgentResult& /* _return */, const std::string& /* snapshot_path */) {
    return;
  }
  void publish_cluster_state( ::palo::TAgentResult& /* _return */, const  ::palo::TAgentPublishRequest& /* request */) {
    return;
  }
  void submit_etl_task( ::palo::TAgentResult& /* _return */, const  ::palo::TMiniLoadEtlTaskRequest& /* request */) {
    return;
  }
  void get_etl_status( ::palo::TMiniLoadEtlStatusResult& /* _return */, const  ::palo::TMiniLoadEtlStatusRequest& /* request */) {
    return;
  }
  void delete_etl_files( ::palo::TAgentResult& /* _return */, const  ::palo::TDeleteEtlFilesRequest& /* request */) {
    return;
  }
  void register_pull_load_task( ::palo::TStatus& /* _return */, const  ::palo::TUniqueId& /* id */, const int32_t /* num_senders */) {
    return;
  }
  void deregister_pull_load_task( ::palo::TStatus& /* _return */, const  ::palo::TUniqueId& /* id */) {
    return;
  }
  void report_pull_load_sub_task_info( ::palo::TStatus& /* _return */, const TPullLoadSubTaskInfo& /* task_info */) {
    return;
  }
  void fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& /* _return */, const  ::palo::TUniqueId& /* id */) {
    return;
  }
  void fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& /* _return */) {
    return;
  }
  void submit_export_task( ::palo::TStatus& /* _return */, const TExportTaskRequest& /* request */) {
    return;
  }
  void get_export_status( ::palo::TExportStatusResult& /* _return */, const  ::palo::TUniqueId& /* task_id */) {
    return;
  }
  void erase_export_task( ::palo::TStatus& /* _return */, const  ::palo::TUniqueId& /* task_id */) {
    return;
  }
};

typedef struct _BackendService_exec_plan_fragment_args__isset {
  _BackendService_exec_plan_fragment_args__isset() : params(false) {}
  bool params :1;
} _BackendService_exec_plan_fragment_args__isset;

class BackendService_exec_plan_fragment_args {
 public:

  BackendService_exec_plan_fragment_args(const BackendService_exec_plan_fragment_args&);
  BackendService_exec_plan_fragment_args& operator=(const BackendService_exec_plan_fragment_args&);
  BackendService_exec_plan_fragment_args() {
  }

  virtual ~BackendService_exec_plan_fragment_args() throw();
   ::palo::TExecPlanFragmentParams params;

  _BackendService_exec_plan_fragment_args__isset __isset;

  void __set_params(const  ::palo::TExecPlanFragmentParams& val);

  bool operator == (const BackendService_exec_plan_fragment_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const BackendService_exec_plan_fragment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_exec_plan_fragment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_exec_plan_fragment_pargs {
 public:


  virtual ~BackendService_exec_plan_fragment_pargs() throw();
  const  ::palo::TExecPlanFragmentParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_exec_plan_fragment_result__isset {
  _BackendService_exec_plan_fragment_result__isset() : success(false) {}
  bool success :1;
} _BackendService_exec_plan_fragment_result__isset;

class BackendService_exec_plan_fragment_result {
 public:

  BackendService_exec_plan_fragment_result(const BackendService_exec_plan_fragment_result&);
  BackendService_exec_plan_fragment_result& operator=(const BackendService_exec_plan_fragment_result&);
  BackendService_exec_plan_fragment_result() {
  }

  virtual ~BackendService_exec_plan_fragment_result() throw();
   ::palo::TExecPlanFragmentResult success;

  _BackendService_exec_plan_fragment_result__isset __isset;

  void __set_success(const  ::palo::TExecPlanFragmentResult& val);

  bool operator == (const BackendService_exec_plan_fragment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_exec_plan_fragment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_exec_plan_fragment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_exec_plan_fragment_presult__isset {
  _BackendService_exec_plan_fragment_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_exec_plan_fragment_presult__isset;

class BackendService_exec_plan_fragment_presult {
 public:


  virtual ~BackendService_exec_plan_fragment_presult() throw();
   ::palo::TExecPlanFragmentResult* success;

  _BackendService_exec_plan_fragment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_cancel_plan_fragment_args__isset {
  _BackendService_cancel_plan_fragment_args__isset() : params(false) {}
  bool params :1;
} _BackendService_cancel_plan_fragment_args__isset;

class BackendService_cancel_plan_fragment_args {
 public:

  BackendService_cancel_plan_fragment_args(const BackendService_cancel_plan_fragment_args&);
  BackendService_cancel_plan_fragment_args& operator=(const BackendService_cancel_plan_fragment_args&);
  BackendService_cancel_plan_fragment_args() {
  }

  virtual ~BackendService_cancel_plan_fragment_args() throw();
   ::palo::TCancelPlanFragmentParams params;

  _BackendService_cancel_plan_fragment_args__isset __isset;

  void __set_params(const  ::palo::TCancelPlanFragmentParams& val);

  bool operator == (const BackendService_cancel_plan_fragment_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const BackendService_cancel_plan_fragment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_cancel_plan_fragment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_cancel_plan_fragment_pargs {
 public:


  virtual ~BackendService_cancel_plan_fragment_pargs() throw();
  const  ::palo::TCancelPlanFragmentParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_cancel_plan_fragment_result__isset {
  _BackendService_cancel_plan_fragment_result__isset() : success(false) {}
  bool success :1;
} _BackendService_cancel_plan_fragment_result__isset;

class BackendService_cancel_plan_fragment_result {
 public:

  BackendService_cancel_plan_fragment_result(const BackendService_cancel_plan_fragment_result&);
  BackendService_cancel_plan_fragment_result& operator=(const BackendService_cancel_plan_fragment_result&);
  BackendService_cancel_plan_fragment_result() {
  }

  virtual ~BackendService_cancel_plan_fragment_result() throw();
   ::palo::TCancelPlanFragmentResult success;

  _BackendService_cancel_plan_fragment_result__isset __isset;

  void __set_success(const  ::palo::TCancelPlanFragmentResult& val);

  bool operator == (const BackendService_cancel_plan_fragment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_cancel_plan_fragment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_cancel_plan_fragment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_cancel_plan_fragment_presult__isset {
  _BackendService_cancel_plan_fragment_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_cancel_plan_fragment_presult__isset;

class BackendService_cancel_plan_fragment_presult {
 public:


  virtual ~BackendService_cancel_plan_fragment_presult() throw();
   ::palo::TCancelPlanFragmentResult* success;

  _BackendService_cancel_plan_fragment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_transmit_data_args__isset {
  _BackendService_transmit_data_args__isset() : params(false) {}
  bool params :1;
} _BackendService_transmit_data_args__isset;

class BackendService_transmit_data_args {
 public:

  BackendService_transmit_data_args(const BackendService_transmit_data_args&);
  BackendService_transmit_data_args& operator=(const BackendService_transmit_data_args&);
  BackendService_transmit_data_args() {
  }

  virtual ~BackendService_transmit_data_args() throw();
   ::palo::TTransmitDataParams params;

  _BackendService_transmit_data_args__isset __isset;

  void __set_params(const  ::palo::TTransmitDataParams& val);

  bool operator == (const BackendService_transmit_data_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const BackendService_transmit_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_transmit_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_transmit_data_pargs {
 public:


  virtual ~BackendService_transmit_data_pargs() throw();
  const  ::palo::TTransmitDataParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_transmit_data_result__isset {
  _BackendService_transmit_data_result__isset() : success(false) {}
  bool success :1;
} _BackendService_transmit_data_result__isset;

class BackendService_transmit_data_result {
 public:

  BackendService_transmit_data_result(const BackendService_transmit_data_result&);
  BackendService_transmit_data_result& operator=(const BackendService_transmit_data_result&);
  BackendService_transmit_data_result() {
  }

  virtual ~BackendService_transmit_data_result() throw();
   ::palo::TTransmitDataResult success;

  _BackendService_transmit_data_result__isset __isset;

  void __set_success(const  ::palo::TTransmitDataResult& val);

  bool operator == (const BackendService_transmit_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_transmit_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_transmit_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_transmit_data_presult__isset {
  _BackendService_transmit_data_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_transmit_data_presult__isset;

class BackendService_transmit_data_presult {
 public:


  virtual ~BackendService_transmit_data_presult() throw();
   ::palo::TTransmitDataResult* success;

  _BackendService_transmit_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_fetch_data_args__isset {
  _BackendService_fetch_data_args__isset() : params(false) {}
  bool params :1;
} _BackendService_fetch_data_args__isset;

class BackendService_fetch_data_args {
 public:

  BackendService_fetch_data_args(const BackendService_fetch_data_args&);
  BackendService_fetch_data_args& operator=(const BackendService_fetch_data_args&);
  BackendService_fetch_data_args() {
  }

  virtual ~BackendService_fetch_data_args() throw();
   ::palo::TFetchDataParams params;

  _BackendService_fetch_data_args__isset __isset;

  void __set_params(const  ::palo::TFetchDataParams& val);

  bool operator == (const BackendService_fetch_data_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const BackendService_fetch_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_fetch_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_fetch_data_pargs {
 public:


  virtual ~BackendService_fetch_data_pargs() throw();
  const  ::palo::TFetchDataParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_fetch_data_result__isset {
  _BackendService_fetch_data_result__isset() : success(false) {}
  bool success :1;
} _BackendService_fetch_data_result__isset;

class BackendService_fetch_data_result {
 public:

  BackendService_fetch_data_result(const BackendService_fetch_data_result&);
  BackendService_fetch_data_result& operator=(const BackendService_fetch_data_result&);
  BackendService_fetch_data_result() {
  }

  virtual ~BackendService_fetch_data_result() throw();
   ::palo::TFetchDataResult success;

  _BackendService_fetch_data_result__isset __isset;

  void __set_success(const  ::palo::TFetchDataResult& val);

  bool operator == (const BackendService_fetch_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_fetch_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_fetch_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_fetch_data_presult__isset {
  _BackendService_fetch_data_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_fetch_data_presult__isset;

class BackendService_fetch_data_presult {
 public:


  virtual ~BackendService_fetch_data_presult() throw();
   ::palo::TFetchDataResult* success;

  _BackendService_fetch_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_submit_tasks_args__isset {
  _BackendService_submit_tasks_args__isset() : tasks(false) {}
  bool tasks :1;
} _BackendService_submit_tasks_args__isset;

class BackendService_submit_tasks_args {
 public:

  BackendService_submit_tasks_args(const BackendService_submit_tasks_args&);
  BackendService_submit_tasks_args& operator=(const BackendService_submit_tasks_args&);
  BackendService_submit_tasks_args() {
  }

  virtual ~BackendService_submit_tasks_args() throw();
  std::vector< ::palo::TAgentTaskRequest>  tasks;

  _BackendService_submit_tasks_args__isset __isset;

  void __set_tasks(const std::vector< ::palo::TAgentTaskRequest> & val);

  bool operator == (const BackendService_submit_tasks_args & rhs) const
  {
    if (!(tasks == rhs.tasks))
      return false;
    return true;
  }
  bool operator != (const BackendService_submit_tasks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_submit_tasks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_submit_tasks_pargs {
 public:


  virtual ~BackendService_submit_tasks_pargs() throw();
  const std::vector< ::palo::TAgentTaskRequest> * tasks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_submit_tasks_result__isset {
  _BackendService_submit_tasks_result__isset() : success(false) {}
  bool success :1;
} _BackendService_submit_tasks_result__isset;

class BackendService_submit_tasks_result {
 public:

  BackendService_submit_tasks_result(const BackendService_submit_tasks_result&);
  BackendService_submit_tasks_result& operator=(const BackendService_submit_tasks_result&);
  BackendService_submit_tasks_result() {
  }

  virtual ~BackendService_submit_tasks_result() throw();
   ::palo::TAgentResult success;

  _BackendService_submit_tasks_result__isset __isset;

  void __set_success(const  ::palo::TAgentResult& val);

  bool operator == (const BackendService_submit_tasks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_submit_tasks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_submit_tasks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_submit_tasks_presult__isset {
  _BackendService_submit_tasks_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_submit_tasks_presult__isset;

class BackendService_submit_tasks_presult {
 public:


  virtual ~BackendService_submit_tasks_presult() throw();
   ::palo::TAgentResult* success;

  _BackendService_submit_tasks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_make_snapshot_args__isset {
  _BackendService_make_snapshot_args__isset() : snapshot_request(false) {}
  bool snapshot_request :1;
} _BackendService_make_snapshot_args__isset;

class BackendService_make_snapshot_args {
 public:

  BackendService_make_snapshot_args(const BackendService_make_snapshot_args&);
  BackendService_make_snapshot_args& operator=(const BackendService_make_snapshot_args&);
  BackendService_make_snapshot_args() {
  }

  virtual ~BackendService_make_snapshot_args() throw();
   ::palo::TSnapshotRequest snapshot_request;

  _BackendService_make_snapshot_args__isset __isset;

  void __set_snapshot_request(const  ::palo::TSnapshotRequest& val);

  bool operator == (const BackendService_make_snapshot_args & rhs) const
  {
    if (!(snapshot_request == rhs.snapshot_request))
      return false;
    return true;
  }
  bool operator != (const BackendService_make_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_make_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_make_snapshot_pargs {
 public:


  virtual ~BackendService_make_snapshot_pargs() throw();
  const  ::palo::TSnapshotRequest* snapshot_request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_make_snapshot_result__isset {
  _BackendService_make_snapshot_result__isset() : success(false) {}
  bool success :1;
} _BackendService_make_snapshot_result__isset;

class BackendService_make_snapshot_result {
 public:

  BackendService_make_snapshot_result(const BackendService_make_snapshot_result&);
  BackendService_make_snapshot_result& operator=(const BackendService_make_snapshot_result&);
  BackendService_make_snapshot_result() {
  }

  virtual ~BackendService_make_snapshot_result() throw();
   ::palo::TAgentResult success;

  _BackendService_make_snapshot_result__isset __isset;

  void __set_success(const  ::palo::TAgentResult& val);

  bool operator == (const BackendService_make_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_make_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_make_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_make_snapshot_presult__isset {
  _BackendService_make_snapshot_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_make_snapshot_presult__isset;

class BackendService_make_snapshot_presult {
 public:


  virtual ~BackendService_make_snapshot_presult() throw();
   ::palo::TAgentResult* success;

  _BackendService_make_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_release_snapshot_args__isset {
  _BackendService_release_snapshot_args__isset() : snapshot_path(false) {}
  bool snapshot_path :1;
} _BackendService_release_snapshot_args__isset;

class BackendService_release_snapshot_args {
 public:

  BackendService_release_snapshot_args(const BackendService_release_snapshot_args&);
  BackendService_release_snapshot_args& operator=(const BackendService_release_snapshot_args&);
  BackendService_release_snapshot_args() : snapshot_path() {
  }

  virtual ~BackendService_release_snapshot_args() throw();
  std::string snapshot_path;

  _BackendService_release_snapshot_args__isset __isset;

  void __set_snapshot_path(const std::string& val);

  bool operator == (const BackendService_release_snapshot_args & rhs) const
  {
    if (!(snapshot_path == rhs.snapshot_path))
      return false;
    return true;
  }
  bool operator != (const BackendService_release_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_release_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_release_snapshot_pargs {
 public:


  virtual ~BackendService_release_snapshot_pargs() throw();
  const std::string* snapshot_path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_release_snapshot_result__isset {
  _BackendService_release_snapshot_result__isset() : success(false) {}
  bool success :1;
} _BackendService_release_snapshot_result__isset;

class BackendService_release_snapshot_result {
 public:

  BackendService_release_snapshot_result(const BackendService_release_snapshot_result&);
  BackendService_release_snapshot_result& operator=(const BackendService_release_snapshot_result&);
  BackendService_release_snapshot_result() {
  }

  virtual ~BackendService_release_snapshot_result() throw();
   ::palo::TAgentResult success;

  _BackendService_release_snapshot_result__isset __isset;

  void __set_success(const  ::palo::TAgentResult& val);

  bool operator == (const BackendService_release_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_release_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_release_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_release_snapshot_presult__isset {
  _BackendService_release_snapshot_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_release_snapshot_presult__isset;

class BackendService_release_snapshot_presult {
 public:


  virtual ~BackendService_release_snapshot_presult() throw();
   ::palo::TAgentResult* success;

  _BackendService_release_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_publish_cluster_state_args__isset {
  _BackendService_publish_cluster_state_args__isset() : request(false) {}
  bool request :1;
} _BackendService_publish_cluster_state_args__isset;

class BackendService_publish_cluster_state_args {
 public:

  BackendService_publish_cluster_state_args(const BackendService_publish_cluster_state_args&);
  BackendService_publish_cluster_state_args& operator=(const BackendService_publish_cluster_state_args&);
  BackendService_publish_cluster_state_args() {
  }

  virtual ~BackendService_publish_cluster_state_args() throw();
   ::palo::TAgentPublishRequest request;

  _BackendService_publish_cluster_state_args__isset __isset;

  void __set_request(const  ::palo::TAgentPublishRequest& val);

  bool operator == (const BackendService_publish_cluster_state_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BackendService_publish_cluster_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_publish_cluster_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_publish_cluster_state_pargs {
 public:


  virtual ~BackendService_publish_cluster_state_pargs() throw();
  const  ::palo::TAgentPublishRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_publish_cluster_state_result__isset {
  _BackendService_publish_cluster_state_result__isset() : success(false) {}
  bool success :1;
} _BackendService_publish_cluster_state_result__isset;

class BackendService_publish_cluster_state_result {
 public:

  BackendService_publish_cluster_state_result(const BackendService_publish_cluster_state_result&);
  BackendService_publish_cluster_state_result& operator=(const BackendService_publish_cluster_state_result&);
  BackendService_publish_cluster_state_result() {
  }

  virtual ~BackendService_publish_cluster_state_result() throw();
   ::palo::TAgentResult success;

  _BackendService_publish_cluster_state_result__isset __isset;

  void __set_success(const  ::palo::TAgentResult& val);

  bool operator == (const BackendService_publish_cluster_state_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_publish_cluster_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_publish_cluster_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_publish_cluster_state_presult__isset {
  _BackendService_publish_cluster_state_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_publish_cluster_state_presult__isset;

class BackendService_publish_cluster_state_presult {
 public:


  virtual ~BackendService_publish_cluster_state_presult() throw();
   ::palo::TAgentResult* success;

  _BackendService_publish_cluster_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_submit_etl_task_args__isset {
  _BackendService_submit_etl_task_args__isset() : request(false) {}
  bool request :1;
} _BackendService_submit_etl_task_args__isset;

class BackendService_submit_etl_task_args {
 public:

  BackendService_submit_etl_task_args(const BackendService_submit_etl_task_args&);
  BackendService_submit_etl_task_args& operator=(const BackendService_submit_etl_task_args&);
  BackendService_submit_etl_task_args() {
  }

  virtual ~BackendService_submit_etl_task_args() throw();
   ::palo::TMiniLoadEtlTaskRequest request;

  _BackendService_submit_etl_task_args__isset __isset;

  void __set_request(const  ::palo::TMiniLoadEtlTaskRequest& val);

  bool operator == (const BackendService_submit_etl_task_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BackendService_submit_etl_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_submit_etl_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_submit_etl_task_pargs {
 public:


  virtual ~BackendService_submit_etl_task_pargs() throw();
  const  ::palo::TMiniLoadEtlTaskRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_submit_etl_task_result__isset {
  _BackendService_submit_etl_task_result__isset() : success(false) {}
  bool success :1;
} _BackendService_submit_etl_task_result__isset;

class BackendService_submit_etl_task_result {
 public:

  BackendService_submit_etl_task_result(const BackendService_submit_etl_task_result&);
  BackendService_submit_etl_task_result& operator=(const BackendService_submit_etl_task_result&);
  BackendService_submit_etl_task_result() {
  }

  virtual ~BackendService_submit_etl_task_result() throw();
   ::palo::TAgentResult success;

  _BackendService_submit_etl_task_result__isset __isset;

  void __set_success(const  ::palo::TAgentResult& val);

  bool operator == (const BackendService_submit_etl_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_submit_etl_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_submit_etl_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_submit_etl_task_presult__isset {
  _BackendService_submit_etl_task_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_submit_etl_task_presult__isset;

class BackendService_submit_etl_task_presult {
 public:


  virtual ~BackendService_submit_etl_task_presult() throw();
   ::palo::TAgentResult* success;

  _BackendService_submit_etl_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_get_etl_status_args__isset {
  _BackendService_get_etl_status_args__isset() : request(false) {}
  bool request :1;
} _BackendService_get_etl_status_args__isset;

class BackendService_get_etl_status_args {
 public:

  BackendService_get_etl_status_args(const BackendService_get_etl_status_args&);
  BackendService_get_etl_status_args& operator=(const BackendService_get_etl_status_args&);
  BackendService_get_etl_status_args() {
  }

  virtual ~BackendService_get_etl_status_args() throw();
   ::palo::TMiniLoadEtlStatusRequest request;

  _BackendService_get_etl_status_args__isset __isset;

  void __set_request(const  ::palo::TMiniLoadEtlStatusRequest& val);

  bool operator == (const BackendService_get_etl_status_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BackendService_get_etl_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_get_etl_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_get_etl_status_pargs {
 public:


  virtual ~BackendService_get_etl_status_pargs() throw();
  const  ::palo::TMiniLoadEtlStatusRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_get_etl_status_result__isset {
  _BackendService_get_etl_status_result__isset() : success(false) {}
  bool success :1;
} _BackendService_get_etl_status_result__isset;

class BackendService_get_etl_status_result {
 public:

  BackendService_get_etl_status_result(const BackendService_get_etl_status_result&);
  BackendService_get_etl_status_result& operator=(const BackendService_get_etl_status_result&);
  BackendService_get_etl_status_result() {
  }

  virtual ~BackendService_get_etl_status_result() throw();
   ::palo::TMiniLoadEtlStatusResult success;

  _BackendService_get_etl_status_result__isset __isset;

  void __set_success(const  ::palo::TMiniLoadEtlStatusResult& val);

  bool operator == (const BackendService_get_etl_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_get_etl_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_get_etl_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_get_etl_status_presult__isset {
  _BackendService_get_etl_status_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_get_etl_status_presult__isset;

class BackendService_get_etl_status_presult {
 public:


  virtual ~BackendService_get_etl_status_presult() throw();
   ::palo::TMiniLoadEtlStatusResult* success;

  _BackendService_get_etl_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_delete_etl_files_args__isset {
  _BackendService_delete_etl_files_args__isset() : request(false) {}
  bool request :1;
} _BackendService_delete_etl_files_args__isset;

class BackendService_delete_etl_files_args {
 public:

  BackendService_delete_etl_files_args(const BackendService_delete_etl_files_args&);
  BackendService_delete_etl_files_args& operator=(const BackendService_delete_etl_files_args&);
  BackendService_delete_etl_files_args() {
  }

  virtual ~BackendService_delete_etl_files_args() throw();
   ::palo::TDeleteEtlFilesRequest request;

  _BackendService_delete_etl_files_args__isset __isset;

  void __set_request(const  ::palo::TDeleteEtlFilesRequest& val);

  bool operator == (const BackendService_delete_etl_files_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BackendService_delete_etl_files_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_delete_etl_files_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_delete_etl_files_pargs {
 public:


  virtual ~BackendService_delete_etl_files_pargs() throw();
  const  ::palo::TDeleteEtlFilesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_delete_etl_files_result__isset {
  _BackendService_delete_etl_files_result__isset() : success(false) {}
  bool success :1;
} _BackendService_delete_etl_files_result__isset;

class BackendService_delete_etl_files_result {
 public:

  BackendService_delete_etl_files_result(const BackendService_delete_etl_files_result&);
  BackendService_delete_etl_files_result& operator=(const BackendService_delete_etl_files_result&);
  BackendService_delete_etl_files_result() {
  }

  virtual ~BackendService_delete_etl_files_result() throw();
   ::palo::TAgentResult success;

  _BackendService_delete_etl_files_result__isset __isset;

  void __set_success(const  ::palo::TAgentResult& val);

  bool operator == (const BackendService_delete_etl_files_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_delete_etl_files_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_delete_etl_files_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_delete_etl_files_presult__isset {
  _BackendService_delete_etl_files_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_delete_etl_files_presult__isset;

class BackendService_delete_etl_files_presult {
 public:


  virtual ~BackendService_delete_etl_files_presult() throw();
   ::palo::TAgentResult* success;

  _BackendService_delete_etl_files_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_register_pull_load_task_args__isset {
  _BackendService_register_pull_load_task_args__isset() : id(false), num_senders(false) {}
  bool id :1;
  bool num_senders :1;
} _BackendService_register_pull_load_task_args__isset;

class BackendService_register_pull_load_task_args {
 public:

  BackendService_register_pull_load_task_args(const BackendService_register_pull_load_task_args&);
  BackendService_register_pull_load_task_args& operator=(const BackendService_register_pull_load_task_args&);
  BackendService_register_pull_load_task_args() : num_senders(0) {
  }

  virtual ~BackendService_register_pull_load_task_args() throw();
   ::palo::TUniqueId id;
  int32_t num_senders;

  _BackendService_register_pull_load_task_args__isset __isset;

  void __set_id(const  ::palo::TUniqueId& val);

  void __set_num_senders(const int32_t val);

  bool operator == (const BackendService_register_pull_load_task_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num_senders == rhs.num_senders))
      return false;
    return true;
  }
  bool operator != (const BackendService_register_pull_load_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_register_pull_load_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_register_pull_load_task_pargs {
 public:


  virtual ~BackendService_register_pull_load_task_pargs() throw();
  const  ::palo::TUniqueId* id;
  const int32_t* num_senders;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_register_pull_load_task_result__isset {
  _BackendService_register_pull_load_task_result__isset() : success(false) {}
  bool success :1;
} _BackendService_register_pull_load_task_result__isset;

class BackendService_register_pull_load_task_result {
 public:

  BackendService_register_pull_load_task_result(const BackendService_register_pull_load_task_result&);
  BackendService_register_pull_load_task_result& operator=(const BackendService_register_pull_load_task_result&);
  BackendService_register_pull_load_task_result() {
  }

  virtual ~BackendService_register_pull_load_task_result() throw();
   ::palo::TStatus success;

  _BackendService_register_pull_load_task_result__isset __isset;

  void __set_success(const  ::palo::TStatus& val);

  bool operator == (const BackendService_register_pull_load_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_register_pull_load_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_register_pull_load_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_register_pull_load_task_presult__isset {
  _BackendService_register_pull_load_task_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_register_pull_load_task_presult__isset;

class BackendService_register_pull_load_task_presult {
 public:


  virtual ~BackendService_register_pull_load_task_presult() throw();
   ::palo::TStatus* success;

  _BackendService_register_pull_load_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_deregister_pull_load_task_args__isset {
  _BackendService_deregister_pull_load_task_args__isset() : id(false) {}
  bool id :1;
} _BackendService_deregister_pull_load_task_args__isset;

class BackendService_deregister_pull_load_task_args {
 public:

  BackendService_deregister_pull_load_task_args(const BackendService_deregister_pull_load_task_args&);
  BackendService_deregister_pull_load_task_args& operator=(const BackendService_deregister_pull_load_task_args&);
  BackendService_deregister_pull_load_task_args() {
  }

  virtual ~BackendService_deregister_pull_load_task_args() throw();
   ::palo::TUniqueId id;

  _BackendService_deregister_pull_load_task_args__isset __isset;

  void __set_id(const  ::palo::TUniqueId& val);

  bool operator == (const BackendService_deregister_pull_load_task_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const BackendService_deregister_pull_load_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_deregister_pull_load_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_deregister_pull_load_task_pargs {
 public:


  virtual ~BackendService_deregister_pull_load_task_pargs() throw();
  const  ::palo::TUniqueId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_deregister_pull_load_task_result__isset {
  _BackendService_deregister_pull_load_task_result__isset() : success(false) {}
  bool success :1;
} _BackendService_deregister_pull_load_task_result__isset;

class BackendService_deregister_pull_load_task_result {
 public:

  BackendService_deregister_pull_load_task_result(const BackendService_deregister_pull_load_task_result&);
  BackendService_deregister_pull_load_task_result& operator=(const BackendService_deregister_pull_load_task_result&);
  BackendService_deregister_pull_load_task_result() {
  }

  virtual ~BackendService_deregister_pull_load_task_result() throw();
   ::palo::TStatus success;

  _BackendService_deregister_pull_load_task_result__isset __isset;

  void __set_success(const  ::palo::TStatus& val);

  bool operator == (const BackendService_deregister_pull_load_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_deregister_pull_load_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_deregister_pull_load_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_deregister_pull_load_task_presult__isset {
  _BackendService_deregister_pull_load_task_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_deregister_pull_load_task_presult__isset;

class BackendService_deregister_pull_load_task_presult {
 public:


  virtual ~BackendService_deregister_pull_load_task_presult() throw();
   ::palo::TStatus* success;

  _BackendService_deregister_pull_load_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_report_pull_load_sub_task_info_args__isset {
  _BackendService_report_pull_load_sub_task_info_args__isset() : task_info(false) {}
  bool task_info :1;
} _BackendService_report_pull_load_sub_task_info_args__isset;

class BackendService_report_pull_load_sub_task_info_args {
 public:

  BackendService_report_pull_load_sub_task_info_args(const BackendService_report_pull_load_sub_task_info_args&);
  BackendService_report_pull_load_sub_task_info_args& operator=(const BackendService_report_pull_load_sub_task_info_args&);
  BackendService_report_pull_load_sub_task_info_args() {
  }

  virtual ~BackendService_report_pull_load_sub_task_info_args() throw();
  TPullLoadSubTaskInfo task_info;

  _BackendService_report_pull_load_sub_task_info_args__isset __isset;

  void __set_task_info(const TPullLoadSubTaskInfo& val);

  bool operator == (const BackendService_report_pull_load_sub_task_info_args & rhs) const
  {
    if (!(task_info == rhs.task_info))
      return false;
    return true;
  }
  bool operator != (const BackendService_report_pull_load_sub_task_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_report_pull_load_sub_task_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_report_pull_load_sub_task_info_pargs {
 public:


  virtual ~BackendService_report_pull_load_sub_task_info_pargs() throw();
  const TPullLoadSubTaskInfo* task_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_report_pull_load_sub_task_info_result__isset {
  _BackendService_report_pull_load_sub_task_info_result__isset() : success(false) {}
  bool success :1;
} _BackendService_report_pull_load_sub_task_info_result__isset;

class BackendService_report_pull_load_sub_task_info_result {
 public:

  BackendService_report_pull_load_sub_task_info_result(const BackendService_report_pull_load_sub_task_info_result&);
  BackendService_report_pull_load_sub_task_info_result& operator=(const BackendService_report_pull_load_sub_task_info_result&);
  BackendService_report_pull_load_sub_task_info_result() {
  }

  virtual ~BackendService_report_pull_load_sub_task_info_result() throw();
   ::palo::TStatus success;

  _BackendService_report_pull_load_sub_task_info_result__isset __isset;

  void __set_success(const  ::palo::TStatus& val);

  bool operator == (const BackendService_report_pull_load_sub_task_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_report_pull_load_sub_task_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_report_pull_load_sub_task_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_report_pull_load_sub_task_info_presult__isset {
  _BackendService_report_pull_load_sub_task_info_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_report_pull_load_sub_task_info_presult__isset;

class BackendService_report_pull_load_sub_task_info_presult {
 public:


  virtual ~BackendService_report_pull_load_sub_task_info_presult() throw();
   ::palo::TStatus* success;

  _BackendService_report_pull_load_sub_task_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_fetch_pull_load_task_info_args__isset {
  _BackendService_fetch_pull_load_task_info_args__isset() : id(false) {}
  bool id :1;
} _BackendService_fetch_pull_load_task_info_args__isset;

class BackendService_fetch_pull_load_task_info_args {
 public:

  BackendService_fetch_pull_load_task_info_args(const BackendService_fetch_pull_load_task_info_args&);
  BackendService_fetch_pull_load_task_info_args& operator=(const BackendService_fetch_pull_load_task_info_args&);
  BackendService_fetch_pull_load_task_info_args() {
  }

  virtual ~BackendService_fetch_pull_load_task_info_args() throw();
   ::palo::TUniqueId id;

  _BackendService_fetch_pull_load_task_info_args__isset __isset;

  void __set_id(const  ::palo::TUniqueId& val);

  bool operator == (const BackendService_fetch_pull_load_task_info_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const BackendService_fetch_pull_load_task_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_fetch_pull_load_task_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_fetch_pull_load_task_info_pargs {
 public:


  virtual ~BackendService_fetch_pull_load_task_info_pargs() throw();
  const  ::palo::TUniqueId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_fetch_pull_load_task_info_result__isset {
  _BackendService_fetch_pull_load_task_info_result__isset() : success(false) {}
  bool success :1;
} _BackendService_fetch_pull_load_task_info_result__isset;

class BackendService_fetch_pull_load_task_info_result {
 public:

  BackendService_fetch_pull_load_task_info_result(const BackendService_fetch_pull_load_task_info_result&);
  BackendService_fetch_pull_load_task_info_result& operator=(const BackendService_fetch_pull_load_task_info_result&);
  BackendService_fetch_pull_load_task_info_result() {
  }

  virtual ~BackendService_fetch_pull_load_task_info_result() throw();
  TFetchPullLoadTaskInfoResult success;

  _BackendService_fetch_pull_load_task_info_result__isset __isset;

  void __set_success(const TFetchPullLoadTaskInfoResult& val);

  bool operator == (const BackendService_fetch_pull_load_task_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_fetch_pull_load_task_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_fetch_pull_load_task_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_fetch_pull_load_task_info_presult__isset {
  _BackendService_fetch_pull_load_task_info_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_fetch_pull_load_task_info_presult__isset;

class BackendService_fetch_pull_load_task_info_presult {
 public:


  virtual ~BackendService_fetch_pull_load_task_info_presult() throw();
  TFetchPullLoadTaskInfoResult* success;

  _BackendService_fetch_pull_load_task_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendService_fetch_all_pull_load_task_infos_args {
 public:

  BackendService_fetch_all_pull_load_task_infos_args(const BackendService_fetch_all_pull_load_task_infos_args&);
  BackendService_fetch_all_pull_load_task_infos_args& operator=(const BackendService_fetch_all_pull_load_task_infos_args&);
  BackendService_fetch_all_pull_load_task_infos_args() {
  }

  virtual ~BackendService_fetch_all_pull_load_task_infos_args() throw();

  bool operator == (const BackendService_fetch_all_pull_load_task_infos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendService_fetch_all_pull_load_task_infos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_fetch_all_pull_load_task_infos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_fetch_all_pull_load_task_infos_pargs {
 public:


  virtual ~BackendService_fetch_all_pull_load_task_infos_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_fetch_all_pull_load_task_infos_result__isset {
  _BackendService_fetch_all_pull_load_task_infos_result__isset() : success(false) {}
  bool success :1;
} _BackendService_fetch_all_pull_load_task_infos_result__isset;

class BackendService_fetch_all_pull_load_task_infos_result {
 public:

  BackendService_fetch_all_pull_load_task_infos_result(const BackendService_fetch_all_pull_load_task_infos_result&);
  BackendService_fetch_all_pull_load_task_infos_result& operator=(const BackendService_fetch_all_pull_load_task_infos_result&);
  BackendService_fetch_all_pull_load_task_infos_result() {
  }

  virtual ~BackendService_fetch_all_pull_load_task_infos_result() throw();
  TFetchAllPullLoadTaskInfosResult success;

  _BackendService_fetch_all_pull_load_task_infos_result__isset __isset;

  void __set_success(const TFetchAllPullLoadTaskInfosResult& val);

  bool operator == (const BackendService_fetch_all_pull_load_task_infos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_fetch_all_pull_load_task_infos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_fetch_all_pull_load_task_infos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_fetch_all_pull_load_task_infos_presult__isset {
  _BackendService_fetch_all_pull_load_task_infos_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_fetch_all_pull_load_task_infos_presult__isset;

class BackendService_fetch_all_pull_load_task_infos_presult {
 public:


  virtual ~BackendService_fetch_all_pull_load_task_infos_presult() throw();
  TFetchAllPullLoadTaskInfosResult* success;

  _BackendService_fetch_all_pull_load_task_infos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_submit_export_task_args__isset {
  _BackendService_submit_export_task_args__isset() : request(false) {}
  bool request :1;
} _BackendService_submit_export_task_args__isset;

class BackendService_submit_export_task_args {
 public:

  BackendService_submit_export_task_args(const BackendService_submit_export_task_args&);
  BackendService_submit_export_task_args& operator=(const BackendService_submit_export_task_args&);
  BackendService_submit_export_task_args() {
  }

  virtual ~BackendService_submit_export_task_args() throw();
  TExportTaskRequest request;

  _BackendService_submit_export_task_args__isset __isset;

  void __set_request(const TExportTaskRequest& val);

  bool operator == (const BackendService_submit_export_task_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BackendService_submit_export_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_submit_export_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_submit_export_task_pargs {
 public:


  virtual ~BackendService_submit_export_task_pargs() throw();
  const TExportTaskRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_submit_export_task_result__isset {
  _BackendService_submit_export_task_result__isset() : success(false) {}
  bool success :1;
} _BackendService_submit_export_task_result__isset;

class BackendService_submit_export_task_result {
 public:

  BackendService_submit_export_task_result(const BackendService_submit_export_task_result&);
  BackendService_submit_export_task_result& operator=(const BackendService_submit_export_task_result&);
  BackendService_submit_export_task_result() {
  }

  virtual ~BackendService_submit_export_task_result() throw();
   ::palo::TStatus success;

  _BackendService_submit_export_task_result__isset __isset;

  void __set_success(const  ::palo::TStatus& val);

  bool operator == (const BackendService_submit_export_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_submit_export_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_submit_export_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_submit_export_task_presult__isset {
  _BackendService_submit_export_task_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_submit_export_task_presult__isset;

class BackendService_submit_export_task_presult {
 public:


  virtual ~BackendService_submit_export_task_presult() throw();
   ::palo::TStatus* success;

  _BackendService_submit_export_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_get_export_status_args__isset {
  _BackendService_get_export_status_args__isset() : task_id(false) {}
  bool task_id :1;
} _BackendService_get_export_status_args__isset;

class BackendService_get_export_status_args {
 public:

  BackendService_get_export_status_args(const BackendService_get_export_status_args&);
  BackendService_get_export_status_args& operator=(const BackendService_get_export_status_args&);
  BackendService_get_export_status_args() {
  }

  virtual ~BackendService_get_export_status_args() throw();
   ::palo::TUniqueId task_id;

  _BackendService_get_export_status_args__isset __isset;

  void __set_task_id(const  ::palo::TUniqueId& val);

  bool operator == (const BackendService_get_export_status_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const BackendService_get_export_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_get_export_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_get_export_status_pargs {
 public:


  virtual ~BackendService_get_export_status_pargs() throw();
  const  ::palo::TUniqueId* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_get_export_status_result__isset {
  _BackendService_get_export_status_result__isset() : success(false) {}
  bool success :1;
} _BackendService_get_export_status_result__isset;

class BackendService_get_export_status_result {
 public:

  BackendService_get_export_status_result(const BackendService_get_export_status_result&);
  BackendService_get_export_status_result& operator=(const BackendService_get_export_status_result&);
  BackendService_get_export_status_result() {
  }

  virtual ~BackendService_get_export_status_result() throw();
   ::palo::TExportStatusResult success;

  _BackendService_get_export_status_result__isset __isset;

  void __set_success(const  ::palo::TExportStatusResult& val);

  bool operator == (const BackendService_get_export_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_get_export_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_get_export_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_get_export_status_presult__isset {
  _BackendService_get_export_status_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_get_export_status_presult__isset;

class BackendService_get_export_status_presult {
 public:


  virtual ~BackendService_get_export_status_presult() throw();
   ::palo::TExportStatusResult* success;

  _BackendService_get_export_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendService_erase_export_task_args__isset {
  _BackendService_erase_export_task_args__isset() : task_id(false) {}
  bool task_id :1;
} _BackendService_erase_export_task_args__isset;

class BackendService_erase_export_task_args {
 public:

  BackendService_erase_export_task_args(const BackendService_erase_export_task_args&);
  BackendService_erase_export_task_args& operator=(const BackendService_erase_export_task_args&);
  BackendService_erase_export_task_args() {
  }

  virtual ~BackendService_erase_export_task_args() throw();
   ::palo::TUniqueId task_id;

  _BackendService_erase_export_task_args__isset __isset;

  void __set_task_id(const  ::palo::TUniqueId& val);

  bool operator == (const BackendService_erase_export_task_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const BackendService_erase_export_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_erase_export_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendService_erase_export_task_pargs {
 public:


  virtual ~BackendService_erase_export_task_pargs() throw();
  const  ::palo::TUniqueId* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_erase_export_task_result__isset {
  _BackendService_erase_export_task_result__isset() : success(false) {}
  bool success :1;
} _BackendService_erase_export_task_result__isset;

class BackendService_erase_export_task_result {
 public:

  BackendService_erase_export_task_result(const BackendService_erase_export_task_result&);
  BackendService_erase_export_task_result& operator=(const BackendService_erase_export_task_result&);
  BackendService_erase_export_task_result() {
  }

  virtual ~BackendService_erase_export_task_result() throw();
   ::palo::TStatus success;

  _BackendService_erase_export_task_result__isset __isset;

  void __set_success(const  ::palo::TStatus& val);

  bool operator == (const BackendService_erase_export_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendService_erase_export_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendService_erase_export_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendService_erase_export_task_presult__isset {
  _BackendService_erase_export_task_presult__isset() : success(false) {}
  bool success :1;
} _BackendService_erase_export_task_presult__isset;

class BackendService_erase_export_task_presult {
 public:


  virtual ~BackendService_erase_export_task_presult() throw();
   ::palo::TStatus* success;

  _BackendService_erase_export_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BackendServiceClient : virtual public BackendServiceIf {
 public:
  BackendServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BackendServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return, const  ::palo::TExecPlanFragmentParams& params);
  void send_exec_plan_fragment(const  ::palo::TExecPlanFragmentParams& params);
  void recv_exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return);
  void cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return, const  ::palo::TCancelPlanFragmentParams& params);
  void send_cancel_plan_fragment(const  ::palo::TCancelPlanFragmentParams& params);
  void recv_cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return);
  void transmit_data( ::palo::TTransmitDataResult& _return, const  ::palo::TTransmitDataParams& params);
  void send_transmit_data(const  ::palo::TTransmitDataParams& params);
  void recv_transmit_data( ::palo::TTransmitDataResult& _return);
  void fetch_data( ::palo::TFetchDataResult& _return, const  ::palo::TFetchDataParams& params);
  void send_fetch_data(const  ::palo::TFetchDataParams& params);
  void recv_fetch_data( ::palo::TFetchDataResult& _return);
  void submit_tasks( ::palo::TAgentResult& _return, const std::vector< ::palo::TAgentTaskRequest> & tasks);
  void send_submit_tasks(const std::vector< ::palo::TAgentTaskRequest> & tasks);
  void recv_submit_tasks( ::palo::TAgentResult& _return);
  void make_snapshot( ::palo::TAgentResult& _return, const  ::palo::TSnapshotRequest& snapshot_request);
  void send_make_snapshot(const  ::palo::TSnapshotRequest& snapshot_request);
  void recv_make_snapshot( ::palo::TAgentResult& _return);
  void release_snapshot( ::palo::TAgentResult& _return, const std::string& snapshot_path);
  void send_release_snapshot(const std::string& snapshot_path);
  void recv_release_snapshot( ::palo::TAgentResult& _return);
  void publish_cluster_state( ::palo::TAgentResult& _return, const  ::palo::TAgentPublishRequest& request);
  void send_publish_cluster_state(const  ::palo::TAgentPublishRequest& request);
  void recv_publish_cluster_state( ::palo::TAgentResult& _return);
  void submit_etl_task( ::palo::TAgentResult& _return, const  ::palo::TMiniLoadEtlTaskRequest& request);
  void send_submit_etl_task(const  ::palo::TMiniLoadEtlTaskRequest& request);
  void recv_submit_etl_task( ::palo::TAgentResult& _return);
  void get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return, const  ::palo::TMiniLoadEtlStatusRequest& request);
  void send_get_etl_status(const  ::palo::TMiniLoadEtlStatusRequest& request);
  void recv_get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return);
  void delete_etl_files( ::palo::TAgentResult& _return, const  ::palo::TDeleteEtlFilesRequest& request);
  void send_delete_etl_files(const  ::palo::TDeleteEtlFilesRequest& request);
  void recv_delete_etl_files( ::palo::TAgentResult& _return);
  void register_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id, const int32_t num_senders);
  void send_register_pull_load_task(const  ::palo::TUniqueId& id, const int32_t num_senders);
  void recv_register_pull_load_task( ::palo::TStatus& _return);
  void deregister_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id);
  void send_deregister_pull_load_task(const  ::palo::TUniqueId& id);
  void recv_deregister_pull_load_task( ::palo::TStatus& _return);
  void report_pull_load_sub_task_info( ::palo::TStatus& _return, const TPullLoadSubTaskInfo& task_info);
  void send_report_pull_load_sub_task_info(const TPullLoadSubTaskInfo& task_info);
  void recv_report_pull_load_sub_task_info( ::palo::TStatus& _return);
  void fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return, const  ::palo::TUniqueId& id);
  void send_fetch_pull_load_task_info(const  ::palo::TUniqueId& id);
  void recv_fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return);
  void fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return);
  void send_fetch_all_pull_load_task_infos();
  void recv_fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return);
  void submit_export_task( ::palo::TStatus& _return, const TExportTaskRequest& request);
  void send_submit_export_task(const TExportTaskRequest& request);
  void recv_submit_export_task( ::palo::TStatus& _return);
  void get_export_status( ::palo::TExportStatusResult& _return, const  ::palo::TUniqueId& task_id);
  void send_get_export_status(const  ::palo::TUniqueId& task_id);
  void recv_get_export_status( ::palo::TExportStatusResult& _return);
  void erase_export_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& task_id);
  void send_erase_export_task(const  ::palo::TUniqueId& task_id);
  void recv_erase_export_task( ::palo::TStatus& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BackendServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BackendServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BackendServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exec_plan_fragment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancel_plan_fragment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transmit_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submit_tasks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_make_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_release_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_publish_cluster_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submit_etl_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_etl_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_etl_files(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_pull_load_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deregister_pull_load_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_report_pull_load_sub_task_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch_pull_load_task_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch_all_pull_load_task_infos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submit_export_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_export_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_erase_export_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BackendServiceProcessor(boost::shared_ptr<BackendServiceIf> iface) :
    iface_(iface) {
    processMap_["exec_plan_fragment"] = &BackendServiceProcessor::process_exec_plan_fragment;
    processMap_["cancel_plan_fragment"] = &BackendServiceProcessor::process_cancel_plan_fragment;
    processMap_["transmit_data"] = &BackendServiceProcessor::process_transmit_data;
    processMap_["fetch_data"] = &BackendServiceProcessor::process_fetch_data;
    processMap_["submit_tasks"] = &BackendServiceProcessor::process_submit_tasks;
    processMap_["make_snapshot"] = &BackendServiceProcessor::process_make_snapshot;
    processMap_["release_snapshot"] = &BackendServiceProcessor::process_release_snapshot;
    processMap_["publish_cluster_state"] = &BackendServiceProcessor::process_publish_cluster_state;
    processMap_["submit_etl_task"] = &BackendServiceProcessor::process_submit_etl_task;
    processMap_["get_etl_status"] = &BackendServiceProcessor::process_get_etl_status;
    processMap_["delete_etl_files"] = &BackendServiceProcessor::process_delete_etl_files;
    processMap_["register_pull_load_task"] = &BackendServiceProcessor::process_register_pull_load_task;
    processMap_["deregister_pull_load_task"] = &BackendServiceProcessor::process_deregister_pull_load_task;
    processMap_["report_pull_load_sub_task_info"] = &BackendServiceProcessor::process_report_pull_load_sub_task_info;
    processMap_["fetch_pull_load_task_info"] = &BackendServiceProcessor::process_fetch_pull_load_task_info;
    processMap_["fetch_all_pull_load_task_infos"] = &BackendServiceProcessor::process_fetch_all_pull_load_task_infos;
    processMap_["submit_export_task"] = &BackendServiceProcessor::process_submit_export_task;
    processMap_["get_export_status"] = &BackendServiceProcessor::process_get_export_status;
    processMap_["erase_export_task"] = &BackendServiceProcessor::process_erase_export_task;
  }

  virtual ~BackendServiceProcessor() {}
};

class BackendServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BackendServiceProcessorFactory(const ::boost::shared_ptr< BackendServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BackendServiceIfFactory > handlerFactory_;
};

class BackendServiceMultiface : virtual public BackendServiceIf {
 public:
  BackendServiceMultiface(std::vector<boost::shared_ptr<BackendServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BackendServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BackendServiceIf> > ifaces_;
  BackendServiceMultiface() {}
  void add(boost::shared_ptr<BackendServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return, const  ::palo::TExecPlanFragmentParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exec_plan_fragment(_return, params);
    }
    ifaces_[i]->exec_plan_fragment(_return, params);
    return;
  }

  void cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return, const  ::palo::TCancelPlanFragmentParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancel_plan_fragment(_return, params);
    }
    ifaces_[i]->cancel_plan_fragment(_return, params);
    return;
  }

  void transmit_data( ::palo::TTransmitDataResult& _return, const  ::palo::TTransmitDataParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transmit_data(_return, params);
    }
    ifaces_[i]->transmit_data(_return, params);
    return;
  }

  void fetch_data( ::palo::TFetchDataResult& _return, const  ::palo::TFetchDataParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch_data(_return, params);
    }
    ifaces_[i]->fetch_data(_return, params);
    return;
  }

  void submit_tasks( ::palo::TAgentResult& _return, const std::vector< ::palo::TAgentTaskRequest> & tasks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit_tasks(_return, tasks);
    }
    ifaces_[i]->submit_tasks(_return, tasks);
    return;
  }

  void make_snapshot( ::palo::TAgentResult& _return, const  ::palo::TSnapshotRequest& snapshot_request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->make_snapshot(_return, snapshot_request);
    }
    ifaces_[i]->make_snapshot(_return, snapshot_request);
    return;
  }

  void release_snapshot( ::palo::TAgentResult& _return, const std::string& snapshot_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->release_snapshot(_return, snapshot_path);
    }
    ifaces_[i]->release_snapshot(_return, snapshot_path);
    return;
  }

  void publish_cluster_state( ::palo::TAgentResult& _return, const  ::palo::TAgentPublishRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->publish_cluster_state(_return, request);
    }
    ifaces_[i]->publish_cluster_state(_return, request);
    return;
  }

  void submit_etl_task( ::palo::TAgentResult& _return, const  ::palo::TMiniLoadEtlTaskRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit_etl_task(_return, request);
    }
    ifaces_[i]->submit_etl_task(_return, request);
    return;
  }

  void get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return, const  ::palo::TMiniLoadEtlStatusRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_etl_status(_return, request);
    }
    ifaces_[i]->get_etl_status(_return, request);
    return;
  }

  void delete_etl_files( ::palo::TAgentResult& _return, const  ::palo::TDeleteEtlFilesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_etl_files(_return, request);
    }
    ifaces_[i]->delete_etl_files(_return, request);
    return;
  }

  void register_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id, const int32_t num_senders) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_pull_load_task(_return, id, num_senders);
    }
    ifaces_[i]->register_pull_load_task(_return, id, num_senders);
    return;
  }

  void deregister_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deregister_pull_load_task(_return, id);
    }
    ifaces_[i]->deregister_pull_load_task(_return, id);
    return;
  }

  void report_pull_load_sub_task_info( ::palo::TStatus& _return, const TPullLoadSubTaskInfo& task_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report_pull_load_sub_task_info(_return, task_info);
    }
    ifaces_[i]->report_pull_load_sub_task_info(_return, task_info);
    return;
  }

  void fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return, const  ::palo::TUniqueId& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch_pull_load_task_info(_return, id);
    }
    ifaces_[i]->fetch_pull_load_task_info(_return, id);
    return;
  }

  void fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch_all_pull_load_task_infos(_return);
    }
    ifaces_[i]->fetch_all_pull_load_task_infos(_return);
    return;
  }

  void submit_export_task( ::palo::TStatus& _return, const TExportTaskRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit_export_task(_return, request);
    }
    ifaces_[i]->submit_export_task(_return, request);
    return;
  }

  void get_export_status( ::palo::TExportStatusResult& _return, const  ::palo::TUniqueId& task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_export_status(_return, task_id);
    }
    ifaces_[i]->get_export_status(_return, task_id);
    return;
  }

  void erase_export_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->erase_export_task(_return, task_id);
    }
    ifaces_[i]->erase_export_task(_return, task_id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BackendServiceConcurrentClient : virtual public BackendServiceIf {
 public:
  BackendServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BackendServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return, const  ::palo::TExecPlanFragmentParams& params);
  int32_t send_exec_plan_fragment(const  ::palo::TExecPlanFragmentParams& params);
  void recv_exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return, const int32_t seqid);
  void cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return, const  ::palo::TCancelPlanFragmentParams& params);
  int32_t send_cancel_plan_fragment(const  ::palo::TCancelPlanFragmentParams& params);
  void recv_cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return, const int32_t seqid);
  void transmit_data( ::palo::TTransmitDataResult& _return, const  ::palo::TTransmitDataParams& params);
  int32_t send_transmit_data(const  ::palo::TTransmitDataParams& params);
  void recv_transmit_data( ::palo::TTransmitDataResult& _return, const int32_t seqid);
  void fetch_data( ::palo::TFetchDataResult& _return, const  ::palo::TFetchDataParams& params);
  int32_t send_fetch_data(const  ::palo::TFetchDataParams& params);
  void recv_fetch_data( ::palo::TFetchDataResult& _return, const int32_t seqid);
  void submit_tasks( ::palo::TAgentResult& _return, const std::vector< ::palo::TAgentTaskRequest> & tasks);
  int32_t send_submit_tasks(const std::vector< ::palo::TAgentTaskRequest> & tasks);
  void recv_submit_tasks( ::palo::TAgentResult& _return, const int32_t seqid);
  void make_snapshot( ::palo::TAgentResult& _return, const  ::palo::TSnapshotRequest& snapshot_request);
  int32_t send_make_snapshot(const  ::palo::TSnapshotRequest& snapshot_request);
  void recv_make_snapshot( ::palo::TAgentResult& _return, const int32_t seqid);
  void release_snapshot( ::palo::TAgentResult& _return, const std::string& snapshot_path);
  int32_t send_release_snapshot(const std::string& snapshot_path);
  void recv_release_snapshot( ::palo::TAgentResult& _return, const int32_t seqid);
  void publish_cluster_state( ::palo::TAgentResult& _return, const  ::palo::TAgentPublishRequest& request);
  int32_t send_publish_cluster_state(const  ::palo::TAgentPublishRequest& request);
  void recv_publish_cluster_state( ::palo::TAgentResult& _return, const int32_t seqid);
  void submit_etl_task( ::palo::TAgentResult& _return, const  ::palo::TMiniLoadEtlTaskRequest& request);
  int32_t send_submit_etl_task(const  ::palo::TMiniLoadEtlTaskRequest& request);
  void recv_submit_etl_task( ::palo::TAgentResult& _return, const int32_t seqid);
  void get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return, const  ::palo::TMiniLoadEtlStatusRequest& request);
  int32_t send_get_etl_status(const  ::palo::TMiniLoadEtlStatusRequest& request);
  void recv_get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return, const int32_t seqid);
  void delete_etl_files( ::palo::TAgentResult& _return, const  ::palo::TDeleteEtlFilesRequest& request);
  int32_t send_delete_etl_files(const  ::palo::TDeleteEtlFilesRequest& request);
  void recv_delete_etl_files( ::palo::TAgentResult& _return, const int32_t seqid);
  void register_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id, const int32_t num_senders);
  int32_t send_register_pull_load_task(const  ::palo::TUniqueId& id, const int32_t num_senders);
  void recv_register_pull_load_task( ::palo::TStatus& _return, const int32_t seqid);
  void deregister_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id);
  int32_t send_deregister_pull_load_task(const  ::palo::TUniqueId& id);
  void recv_deregister_pull_load_task( ::palo::TStatus& _return, const int32_t seqid);
  void report_pull_load_sub_task_info( ::palo::TStatus& _return, const TPullLoadSubTaskInfo& task_info);
  int32_t send_report_pull_load_sub_task_info(const TPullLoadSubTaskInfo& task_info);
  void recv_report_pull_load_sub_task_info( ::palo::TStatus& _return, const int32_t seqid);
  void fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return, const  ::palo::TUniqueId& id);
  int32_t send_fetch_pull_load_task_info(const  ::palo::TUniqueId& id);
  void recv_fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return, const int32_t seqid);
  void fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return);
  int32_t send_fetch_all_pull_load_task_infos();
  void recv_fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return, const int32_t seqid);
  void submit_export_task( ::palo::TStatus& _return, const TExportTaskRequest& request);
  int32_t send_submit_export_task(const TExportTaskRequest& request);
  void recv_submit_export_task( ::palo::TStatus& _return, const int32_t seqid);
  void get_export_status( ::palo::TExportStatusResult& _return, const  ::palo::TUniqueId& task_id);
  int32_t send_get_export_status(const  ::palo::TUniqueId& task_id);
  void recv_get_export_status( ::palo::TExportStatusResult& _return, const int32_t seqid);
  void erase_export_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& task_id);
  int32_t send_erase_export_task(const  ::palo::TUniqueId& task_id);
  void recv_erase_export_task( ::palo::TStatus& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
