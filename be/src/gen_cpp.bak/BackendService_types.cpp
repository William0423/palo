/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BackendService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace palo {


TPullLoadSubTaskInfo::~TPullLoadSubTaskInfo() throw() {
}


void TPullLoadSubTaskInfo::__set_id(const  ::palo::TUniqueId& val) {
  this->id = val;
}

void TPullLoadSubTaskInfo::__set_sub_task_id(const int32_t val) {
  this->sub_task_id = val;
}

void TPullLoadSubTaskInfo::__set_file_map(const std::map<std::string, int64_t> & val) {
  this->file_map = val;
}

void TPullLoadSubTaskInfo::__set_counters(const std::map<std::string, std::string> & val) {
  this->counters = val;
}

void TPullLoadSubTaskInfo::__set_tracking_url(const std::string& val) {
  this->tracking_url = val;
__isset.tracking_url = true;
}

uint32_t TPullLoadSubTaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_sub_task_id = false;
  bool isset_file_map = false;
  bool isset_counters = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_task_id);
          isset_sub_task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->file_map.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              int64_t& _val6 = this->file_map[_key5];
              xfer += iprot->readI64(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_file_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->counters.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              std::string _key12;
              xfer += iprot->readString(_key12);
              std::string& _val13 = this->counters[_key12];
              xfer += iprot->readString(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          isset_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tracking_url);
          this->__isset.tracking_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_task_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_file_map)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_counters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPullLoadSubTaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPullLoadSubTaskInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_task_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_task_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_map", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->file_map.size()));
    std::map<std::string, int64_t> ::const_iterator _iter14;
    for (_iter14 = this->file_map.begin(); _iter14 != this->file_map.end(); ++_iter14)
    {
      xfer += oprot->writeString(_iter14->first);
      xfer += oprot->writeI64(_iter14->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->counters.size()));
    std::map<std::string, std::string> ::const_iterator _iter15;
    for (_iter15 = this->counters.begin(); _iter15 != this->counters.end(); ++_iter15)
    {
      xfer += oprot->writeString(_iter15->first);
      xfer += oprot->writeString(_iter15->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tracking_url) {
    xfer += oprot->writeFieldBegin("tracking_url", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->tracking_url);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPullLoadSubTaskInfo &a, TPullLoadSubTaskInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.sub_task_id, b.sub_task_id);
  swap(a.file_map, b.file_map);
  swap(a.counters, b.counters);
  swap(a.tracking_url, b.tracking_url);
  swap(a.__isset, b.__isset);
}

TPullLoadSubTaskInfo::TPullLoadSubTaskInfo(const TPullLoadSubTaskInfo& other16) {
  id = other16.id;
  sub_task_id = other16.sub_task_id;
  file_map = other16.file_map;
  counters = other16.counters;
  tracking_url = other16.tracking_url;
  __isset = other16.__isset;
}
TPullLoadSubTaskInfo& TPullLoadSubTaskInfo::operator=(const TPullLoadSubTaskInfo& other17) {
  id = other17.id;
  sub_task_id = other17.sub_task_id;
  file_map = other17.file_map;
  counters = other17.counters;
  tracking_url = other17.tracking_url;
  __isset = other17.__isset;
  return *this;
}
void TPullLoadSubTaskInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPullLoadSubTaskInfo(";
  out << "id=" << to_string(id);
  out << ", " << "sub_task_id=" << to_string(sub_task_id);
  out << ", " << "file_map=" << to_string(file_map);
  out << ", " << "counters=" << to_string(counters);
  out << ", " << "tracking_url="; (__isset.tracking_url ? (out << to_string(tracking_url)) : (out << "<null>"));
  out << ")";
}


TPullLoadTaskInfo::~TPullLoadTaskInfo() throw() {
}


void TPullLoadTaskInfo::__set_id(const  ::palo::TUniqueId& val) {
  this->id = val;
}

void TPullLoadTaskInfo::__set_etl_state(const  ::palo::TEtlState::type val) {
  this->etl_state = val;
}

void TPullLoadTaskInfo::__set_file_map(const std::map<std::string, int64_t> & val) {
  this->file_map = val;
__isset.file_map = true;
}

void TPullLoadTaskInfo::__set_counters(const std::map<std::string, std::string> & val) {
  this->counters = val;
__isset.counters = true;
}

void TPullLoadTaskInfo::__set_tracking_urls(const std::vector<std::string> & val) {
  this->tracking_urls = val;
__isset.tracking_urls = true;
}

uint32_t TPullLoadTaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_etl_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->etl_state = ( ::palo::TEtlState::type)ecast18;
          isset_etl_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->file_map.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _ktype20;
            ::apache::thrift::protocol::TType _vtype21;
            xfer += iprot->readMapBegin(_ktype20, _vtype21, _size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              std::string _key24;
              xfer += iprot->readString(_key24);
              int64_t& _val25 = this->file_map[_key24];
              xfer += iprot->readI64(_val25);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.file_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->counters.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _ktype27;
            ::apache::thrift::protocol::TType _vtype28;
            xfer += iprot->readMapBegin(_ktype27, _vtype28, _size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              std::string _key31;
              xfer += iprot->readString(_key31);
              std::string& _val32 = this->counters[_key31];
              xfer += iprot->readString(_val32);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tracking_urls.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->tracking_urls.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += iprot->readString(this->tracking_urls[_i37]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tracking_urls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_etl_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPullLoadTaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPullLoadTaskInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("etl_state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->etl_state);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.file_map) {
    xfer += oprot->writeFieldBegin("file_map", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->file_map.size()));
      std::map<std::string, int64_t> ::const_iterator _iter38;
      for (_iter38 = this->file_map.begin(); _iter38 != this->file_map.end(); ++_iter38)
      {
        xfer += oprot->writeString(_iter38->first);
        xfer += oprot->writeI64(_iter38->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counters) {
    xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->counters.size()));
      std::map<std::string, std::string> ::const_iterator _iter39;
      for (_iter39 = this->counters.begin(); _iter39 != this->counters.end(); ++_iter39)
      {
        xfer += oprot->writeString(_iter39->first);
        xfer += oprot->writeString(_iter39->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tracking_urls) {
    xfer += oprot->writeFieldBegin("tracking_urls", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tracking_urls.size()));
      std::vector<std::string> ::const_iterator _iter40;
      for (_iter40 = this->tracking_urls.begin(); _iter40 != this->tracking_urls.end(); ++_iter40)
      {
        xfer += oprot->writeString((*_iter40));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPullLoadTaskInfo &a, TPullLoadTaskInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.etl_state, b.etl_state);
  swap(a.file_map, b.file_map);
  swap(a.counters, b.counters);
  swap(a.tracking_urls, b.tracking_urls);
  swap(a.__isset, b.__isset);
}

TPullLoadTaskInfo::TPullLoadTaskInfo(const TPullLoadTaskInfo& other41) {
  id = other41.id;
  etl_state = other41.etl_state;
  file_map = other41.file_map;
  counters = other41.counters;
  tracking_urls = other41.tracking_urls;
  __isset = other41.__isset;
}
TPullLoadTaskInfo& TPullLoadTaskInfo::operator=(const TPullLoadTaskInfo& other42) {
  id = other42.id;
  etl_state = other42.etl_state;
  file_map = other42.file_map;
  counters = other42.counters;
  tracking_urls = other42.tracking_urls;
  __isset = other42.__isset;
  return *this;
}
void TPullLoadTaskInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPullLoadTaskInfo(";
  out << "id=" << to_string(id);
  out << ", " << "etl_state=" << to_string(etl_state);
  out << ", " << "file_map="; (__isset.file_map ? (out << to_string(file_map)) : (out << "<null>"));
  out << ", " << "counters="; (__isset.counters ? (out << to_string(counters)) : (out << "<null>"));
  out << ", " << "tracking_urls="; (__isset.tracking_urls ? (out << to_string(tracking_urls)) : (out << "<null>"));
  out << ")";
}


TFetchPullLoadTaskInfoResult::~TFetchPullLoadTaskInfoResult() throw() {
}


void TFetchPullLoadTaskInfoResult::__set_status(const  ::palo::TStatus& val) {
  this->status = val;
}

void TFetchPullLoadTaskInfoResult::__set_task_info(const TPullLoadTaskInfo& val) {
  this->task_info = val;
}

uint32_t TFetchPullLoadTaskInfoResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;
  bool isset_task_info = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->task_info.read(iprot);
          isset_task_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TFetchPullLoadTaskInfoResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFetchPullLoadTaskInfoResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->task_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFetchPullLoadTaskInfoResult &a, TFetchPullLoadTaskInfoResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.task_info, b.task_info);
}

TFetchPullLoadTaskInfoResult::TFetchPullLoadTaskInfoResult(const TFetchPullLoadTaskInfoResult& other43) {
  status = other43.status;
  task_info = other43.task_info;
}
TFetchPullLoadTaskInfoResult& TFetchPullLoadTaskInfoResult::operator=(const TFetchPullLoadTaskInfoResult& other44) {
  status = other44.status;
  task_info = other44.task_info;
  return *this;
}
void TFetchPullLoadTaskInfoResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFetchPullLoadTaskInfoResult(";
  out << "status=" << to_string(status);
  out << ", " << "task_info=" << to_string(task_info);
  out << ")";
}


TFetchAllPullLoadTaskInfosResult::~TFetchAllPullLoadTaskInfosResult() throw() {
}


void TFetchAllPullLoadTaskInfosResult::__set_status(const  ::palo::TStatus& val) {
  this->status = val;
}

void TFetchAllPullLoadTaskInfosResult::__set_task_infos(const std::vector<TPullLoadTaskInfo> & val) {
  this->task_infos = val;
}

uint32_t TFetchAllPullLoadTaskInfosResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;
  bool isset_task_infos = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->task_infos.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->task_infos.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += this->task_infos[_i49].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_task_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_task_infos)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TFetchAllPullLoadTaskInfosResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFetchAllPullLoadTaskInfosResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("task_infos", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->task_infos.size()));
    std::vector<TPullLoadTaskInfo> ::const_iterator _iter50;
    for (_iter50 = this->task_infos.begin(); _iter50 != this->task_infos.end(); ++_iter50)
    {
      xfer += (*_iter50).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFetchAllPullLoadTaskInfosResult &a, TFetchAllPullLoadTaskInfosResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.task_infos, b.task_infos);
}

TFetchAllPullLoadTaskInfosResult::TFetchAllPullLoadTaskInfosResult(const TFetchAllPullLoadTaskInfosResult& other51) {
  status = other51.status;
  task_infos = other51.task_infos;
}
TFetchAllPullLoadTaskInfosResult& TFetchAllPullLoadTaskInfosResult::operator=(const TFetchAllPullLoadTaskInfosResult& other52) {
  status = other52.status;
  task_infos = other52.task_infos;
  return *this;
}
void TFetchAllPullLoadTaskInfosResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFetchAllPullLoadTaskInfosResult(";
  out << "status=" << to_string(status);
  out << ", " << "task_infos=" << to_string(task_infos);
  out << ")";
}


TExportTaskRequest::~TExportTaskRequest() throw() {
}


void TExportTaskRequest::__set_params(const  ::palo::TExecPlanFragmentParams& val) {
  this->params = val;
}

uint32_t TExportTaskRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_params = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->params.read(iprot);
          isset_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_params)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TExportTaskRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TExportTaskRequest");

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->params.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TExportTaskRequest &a, TExportTaskRequest &b) {
  using ::std::swap;
  swap(a.params, b.params);
}

TExportTaskRequest::TExportTaskRequest(const TExportTaskRequest& other53) {
  params = other53.params;
}
TExportTaskRequest& TExportTaskRequest::operator=(const TExportTaskRequest& other54) {
  params = other54.params;
  return *this;
}
void TExportTaskRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExportTaskRequest(";
  out << "params=" << to_string(params);
  out << ")";
}

} // namespace
