/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Data_TYPES_H
#define Data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Types_types.h"


namespace palo {

class TRowBatch;

class TColumnValue;

class TResultRow;

class TResultBatch;

typedef struct _TRowBatch__isset {
  _TRowBatch__isset() : tuple_offsets(false), tuple_data(false), is_compressed(false), be_number(false), packet_seq(false) {}
  bool tuple_offsets :1;
  bool tuple_data :1;
  bool is_compressed :1;
  bool be_number :1;
  bool packet_seq :1;
} _TRowBatch__isset;

class TRowBatch {
 public:

  TRowBatch(const TRowBatch&);
  TRowBatch& operator=(const TRowBatch&);
  TRowBatch() : num_rows(0), tuple_data(), is_compressed(0), be_number(0), packet_seq(0) {
  }

  virtual ~TRowBatch() throw();
  int32_t num_rows;
  std::vector< ::palo::TTupleId>  row_tuples;
  std::vector<int32_t>  tuple_offsets;
  std::string tuple_data;
  bool is_compressed;
  int32_t be_number;
  int64_t packet_seq;

  _TRowBatch__isset __isset;

  void __set_num_rows(const int32_t val);

  void __set_row_tuples(const std::vector< ::palo::TTupleId> & val);

  void __set_tuple_offsets(const std::vector<int32_t> & val);

  void __set_tuple_data(const std::string& val);

  void __set_is_compressed(const bool val);

  void __set_be_number(const int32_t val);

  void __set_packet_seq(const int64_t val);

  bool operator == (const TRowBatch & rhs) const
  {
    if (!(num_rows == rhs.num_rows))
      return false;
    if (!(row_tuples == rhs.row_tuples))
      return false;
    if (!(tuple_offsets == rhs.tuple_offsets))
      return false;
    if (!(tuple_data == rhs.tuple_data))
      return false;
    if (!(is_compressed == rhs.is_compressed))
      return false;
    if (!(be_number == rhs.be_number))
      return false;
    if (!(packet_seq == rhs.packet_seq))
      return false;
    return true;
  }
  bool operator != (const TRowBatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRowBatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRowBatch &a, TRowBatch &b);

inline std::ostream& operator<<(std::ostream& out, const TRowBatch& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TColumnValue__isset {
  _TColumnValue__isset() : boolVal(false), intVal(false), longVal(false), doubleVal(false), stringVal(false) {}
  bool boolVal :1;
  bool intVal :1;
  bool longVal :1;
  bool doubleVal :1;
  bool stringVal :1;
} _TColumnValue__isset;

class TColumnValue {
 public:

  TColumnValue(const TColumnValue&);
  TColumnValue& operator=(const TColumnValue&);
  TColumnValue() : boolVal(0), intVal(0), longVal(0), doubleVal(0), stringVal() {
  }

  virtual ~TColumnValue() throw();
  bool boolVal;
  int32_t intVal;
  int64_t longVal;
  double doubleVal;
  std::string stringVal;

  _TColumnValue__isset __isset;

  void __set_boolVal(const bool val);

  void __set_intVal(const int32_t val);

  void __set_longVal(const int64_t val);

  void __set_doubleVal(const double val);

  void __set_stringVal(const std::string& val);

  bool operator == (const TColumnValue & rhs) const
  {
    if (__isset.boolVal != rhs.__isset.boolVal)
      return false;
    else if (__isset.boolVal && !(boolVal == rhs.boolVal))
      return false;
    if (__isset.intVal != rhs.__isset.intVal)
      return false;
    else if (__isset.intVal && !(intVal == rhs.intVal))
      return false;
    if (__isset.longVal != rhs.__isset.longVal)
      return false;
    else if (__isset.longVal && !(longVal == rhs.longVal))
      return false;
    if (__isset.doubleVal != rhs.__isset.doubleVal)
      return false;
    else if (__isset.doubleVal && !(doubleVal == rhs.doubleVal))
      return false;
    if (__isset.stringVal != rhs.__isset.stringVal)
      return false;
    else if (__isset.stringVal && !(stringVal == rhs.stringVal))
      return false;
    return true;
  }
  bool operator != (const TColumnValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnValue &a, TColumnValue &b);

inline std::ostream& operator<<(std::ostream& out, const TColumnValue& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TResultRow__isset {
  _TResultRow__isset() : colVals(false) {}
  bool colVals :1;
} _TResultRow__isset;

class TResultRow {
 public:

  TResultRow(const TResultRow&);
  TResultRow& operator=(const TResultRow&);
  TResultRow() {
  }

  virtual ~TResultRow() throw();
  std::vector<TColumnValue>  colVals;

  _TResultRow__isset __isset;

  void __set_colVals(const std::vector<TColumnValue> & val);

  bool operator == (const TResultRow & rhs) const
  {
    if (!(colVals == rhs.colVals))
      return false;
    return true;
  }
  bool operator != (const TResultRow &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResultRow & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResultRow &a, TResultRow &b);

inline std::ostream& operator<<(std::ostream& out, const TResultRow& obj)
{
  obj.printTo(out);
  return out;
}


class TResultBatch {
 public:

  TResultBatch(const TResultBatch&);
  TResultBatch& operator=(const TResultBatch&);
  TResultBatch() : is_compressed(0), packet_seq(0) {
  }

  virtual ~TResultBatch() throw();
  std::vector<std::string>  rows;
  bool is_compressed;
  int64_t packet_seq;

  void __set_rows(const std::vector<std::string> & val);

  void __set_is_compressed(const bool val);

  void __set_packet_seq(const int64_t val);

  bool operator == (const TResultBatch & rhs) const
  {
    if (!(rows == rhs.rows))
      return false;
    if (!(is_compressed == rhs.is_compressed))
      return false;
    if (!(packet_seq == rhs.packet_seq))
      return false;
    return true;
  }
  bool operator != (const TResultBatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResultBatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResultBatch &a, TResultBatch &b);

inline std::ostream& operator<<(std::ostream& out, const TResultBatch& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
