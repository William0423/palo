/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MetricDefs_constants.h"

namespace palo {

const MetricDefsConstants g_MetricDefs_constants;

MetricDefsConstants::MetricDefsConstants() {
  TMetricDef tmp10;
  std::vector<std::string>  tmp11;
  tmp11.push_back("RESOURCE_POOL");

  tmp10.contexts = tmp11;
  tmp10.__isset.contexts = true;
  tmp10.description = "Resource Pool $0 Aggregate Mem Reserved";
  tmp10.__isset.description = true;
  tmp10.key = "admission_controller.agg_mem_reserved.$0";
  tmp10.__isset.key = true;
  tmp10.kind = ( ::palo::TMetricKind::type)0;
  tmp10.__isset.kind = true;
  tmp10.label = "Resource Pool $0 Aggregate Mem Reserved";
  tmp10.__isset.label = true;
  tmp10.units = ( ::palo::TUnit::type)7;
  tmp10.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.agg_mem_reserved.$0", tmp10));
  TMetricDef tmp12;
  std::vector<std::string>  tmp13;
  tmp13.push_back("RESOURCE_POOL");

  tmp12.contexts = tmp13;
  tmp12.__isset.contexts = true;
  tmp12.description = "Resource Pool $0 Aggregate Queue Size";
  tmp12.__isset.description = true;
  tmp12.key = "admission_controller.agg_num_queued.$0";
  tmp12.__isset.key = true;
  tmp12.kind = ( ::palo::TMetricKind::type)0;
  tmp12.__isset.kind = true;
  tmp12.label = "Resource Pool $0 Aggregate Queue Size";
  tmp12.__isset.label = true;
  tmp12.units = ( ::palo::TUnit::type)7;
  tmp12.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.agg_num_queued.$0", tmp12));
  TMetricDef tmp14;
  std::vector<std::string>  tmp15;
  tmp15.push_back("RESOURCE_POOL");

  tmp14.contexts = tmp15;
  tmp14.__isset.contexts = true;
  tmp14.description = "Resource Pool $0 Aggregate Num Running";
  tmp14.__isset.description = true;
  tmp14.key = "admission_controller.agg_num_running.$0";
  tmp14.__isset.key = true;
  tmp14.kind = ( ::palo::TMetricKind::type)0;
  tmp14.__isset.kind = true;
  tmp14.label = "Resource Pool $0 Aggregate Num Running";
  tmp14.__isset.label = true;
  tmp14.units = ( ::palo::TUnit::type)7;
  tmp14.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.agg_num_running.$0", tmp14));
  TMetricDef tmp16;
  std::vector<std::string>  tmp17;
  tmp17.push_back("RESOURCE_POOL");

  tmp16.contexts = tmp17;
  tmp16.__isset.contexts = true;
  tmp16.description = "Resource Pool $0 Mem Reserved by the backend coordinator";
  tmp16.__isset.description = true;
  tmp16.key = "admission_controller.local_backend_mem_reserved.$0";
  tmp16.__isset.key = true;
  tmp16.kind = ( ::palo::TMetricKind::type)0;
  tmp16.__isset.kind = true;
  tmp16.label = "Resource Pool $0 Coordinator Backend Mem Reserved";
  tmp16.__isset.label = true;
  tmp16.units = ( ::palo::TUnit::type)7;
  tmp16.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.local_backend_mem_reserved.$0", tmp16));
  TMetricDef tmp18;
  std::vector<std::string>  tmp19;
  tmp19.push_back("RESOURCE_POOL");

  tmp18.contexts = tmp19;
  tmp18.__isset.contexts = true;
  tmp18.description = "Resource Pool $0 Coordinator Backend Mem Usage";
  tmp18.__isset.description = true;
  tmp18.key = "admission_controller.local_backend_mem_usage.$0";
  tmp18.__isset.key = true;
  tmp18.kind = ( ::palo::TMetricKind::type)0;
  tmp18.__isset.kind = true;
  tmp18.label = "Resource Pool $0 Coordinator Backend Mem Usage";
  tmp18.__isset.label = true;
  tmp18.units = ( ::palo::TUnit::type)7;
  tmp18.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.local_backend_mem_usage.$0", tmp18));
  TMetricDef tmp20;
  std::vector<std::string>  tmp21;
  tmp21.push_back("RESOURCE_POOL");

  tmp20.contexts = tmp21;
  tmp20.__isset.contexts = true;
  tmp20.description = "Resource Pool $0 Local Mem Admitted";
  tmp20.__isset.description = true;
  tmp20.key = "admission_controller.local_mem_admitted.$0";
  tmp20.__isset.key = true;
  tmp20.kind = ( ::palo::TMetricKind::type)0;
  tmp20.__isset.kind = true;
  tmp20.label = "Resource Pool $0 Local Mem Admitted";
  tmp20.__isset.label = true;
  tmp20.units = ( ::palo::TUnit::type)7;
  tmp20.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.local_mem_admitted.$0", tmp20));
  TMetricDef tmp22;
  std::vector<std::string>  tmp23;
  tmp23.push_back("RESOURCE_POOL");

  tmp22.contexts = tmp23;
  tmp22.__isset.contexts = true;
  tmp22.description = "Resource Pool $0 Coordinator Backend Num Running";
  tmp22.__isset.description = true;
  tmp22.key = "admission_controller.local_num_admitted_running.$0";
  tmp22.__isset.key = true;
  tmp22.kind = ( ::palo::TMetricKind::type)0;
  tmp22.__isset.kind = true;
  tmp22.label = "Resource Pool $0 Coordinator Backend Num Running";
  tmp22.__isset.label = true;
  tmp22.units = ( ::palo::TUnit::type)7;
  tmp22.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.local_num_admitted_running.$0", tmp22));
  TMetricDef tmp24;
  std::vector<std::string>  tmp25;
  tmp25.push_back("RESOURCE_POOL");

  tmp24.contexts = tmp25;
  tmp24.__isset.contexts = true;
  tmp24.description = "Resource Pool $0 Queue Size on the coordinator";
  tmp24.__isset.description = true;
  tmp24.key = "admission_controller.local_num_queued.$0";
  tmp24.__isset.key = true;
  tmp24.kind = ( ::palo::TMetricKind::type)0;
  tmp24.__isset.kind = true;
  tmp24.label = "Resource Pool $0 Coordinator Backend Queue Size";
  tmp24.__isset.label = true;
  tmp24.units = ( ::palo::TUnit::type)7;
  tmp24.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.local_num_queued.$0", tmp24));
  TMetricDef tmp26;
  std::vector<std::string>  tmp27;
  tmp27.push_back("RESOURCE_POOL");

  tmp26.contexts = tmp27;
  tmp26.__isset.contexts = true;
  tmp26.description = "Resource Pool $0 Configured Max Mem Resources";
  tmp26.__isset.description = true;
  tmp26.key = "admission_controller.pool_max_mem_resources.$0";
  tmp26.__isset.key = true;
  tmp26.kind = ( ::palo::TMetricKind::type)0;
  tmp26.__isset.kind = true;
  tmp26.label = "Resource Pool $0 Configured Max Mem Resources";
  tmp26.__isset.label = true;
  tmp26.units = ( ::palo::TUnit::type)7;
  tmp26.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.pool_max_mem_resources.$0", tmp26));
  TMetricDef tmp28;
  std::vector<std::string>  tmp29;
  tmp29.push_back("RESOURCE_POOL");

  tmp28.contexts = tmp29;
  tmp28.__isset.contexts = true;
  tmp28.description = "Resource Pool $0 Configured Max Queued";
  tmp28.__isset.description = true;
  tmp28.key = "admission_controller.pool_max_queued.$0";
  tmp28.__isset.key = true;
  tmp28.kind = ( ::palo::TMetricKind::type)0;
  tmp28.__isset.kind = true;
  tmp28.label = "Resource Pool $0 Configured Max Queued";
  tmp28.__isset.label = true;
  tmp28.units = ( ::palo::TUnit::type)7;
  tmp28.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.pool_max_queued.$0", tmp28));
  TMetricDef tmp30;
  std::vector<std::string>  tmp31;
  tmp31.push_back("RESOURCE_POOL");

  tmp30.contexts = tmp31;
  tmp30.__isset.contexts = true;
  tmp30.description = "Resource Pool $0 Configured Max Requests";
  tmp30.__isset.description = true;
  tmp30.key = "admission_controller.pool_max_requests.$0";
  tmp30.__isset.key = true;
  tmp30.kind = ( ::palo::TMetricKind::type)0;
  tmp30.__isset.kind = true;
  tmp30.label = "Resource Pool $0 Configured Max Requests";
  tmp30.__isset.label = true;
  tmp30.units = ( ::palo::TUnit::type)7;
  tmp30.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.pool_max_requests.$0", tmp30));
  TMetricDef tmp32;
  std::vector<std::string>  tmp33;
  tmp33.push_back("RESOURCE_POOL");

  tmp32.contexts = tmp33;
  tmp32.__isset.contexts = true;
  tmp32.description = "Resource Pool $0 Time in Queue";
  tmp32.__isset.description = true;
  tmp32.key = "admission_controller.time_in_queue_ms.$0";
  tmp32.__isset.key = true;
  tmp32.kind = ( ::palo::TMetricKind::type)1;
  tmp32.__isset.kind = true;
  tmp32.label = "Resource Pool $0 Time in Queue";
  tmp32.__isset.label = true;
  tmp32.units = ( ::palo::TUnit::type)8;
  tmp32.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.time_in_queue_ms.$0", tmp32));
  TMetricDef tmp34;
  std::vector<std::string>  tmp35;
  tmp35.push_back("RESOURCE_POOL");

  tmp34.contexts = tmp35;
  tmp34.__isset.contexts = true;
  tmp34.description = "Total number of requests admitted to pool $0";
  tmp34.__isset.description = true;
  tmp34.key = "admission_controller.total_admitted.$0";
  tmp34.__isset.key = true;
  tmp34.kind = ( ::palo::TMetricKind::type)1;
  tmp34.__isset.kind = true;
  tmp34.label = "Resource Pool $0 Total Admitted";
  tmp34.__isset.label = true;
  tmp34.units = ( ::palo::TUnit::type)0;
  tmp34.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.total_admitted.$0", tmp34));
  TMetricDef tmp36;
  std::vector<std::string>  tmp37;
  tmp37.push_back("RESOURCE_POOL");

  tmp36.contexts = tmp37;
  tmp36.__isset.contexts = true;
  tmp36.description = "Total number of requests dequeued in pool $0";
  tmp36.__isset.description = true;
  tmp36.key = "admission_controller.total_dequeued.$0";
  tmp36.__isset.key = true;
  tmp36.kind = ( ::palo::TMetricKind::type)1;
  tmp36.__isset.kind = true;
  tmp36.label = "Resource Pool $0 Total Dequeued";
  tmp36.__isset.label = true;
  tmp36.units = ( ::palo::TUnit::type)0;
  tmp36.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.total_dequeued.$0", tmp36));
  TMetricDef tmp38;
  std::vector<std::string>  tmp39;
  tmp39.push_back("RESOURCE_POOL");

  tmp38.contexts = tmp39;
  tmp38.__isset.contexts = true;
  tmp38.description = "Total number of requests queued in pool $0";
  tmp38.__isset.description = true;
  tmp38.key = "admission_controller.total_queued.$0";
  tmp38.__isset.key = true;
  tmp38.kind = ( ::palo::TMetricKind::type)1;
  tmp38.__isset.kind = true;
  tmp38.label = "Resource Pool $0 Total Queued";
  tmp38.__isset.label = true;
  tmp38.units = ( ::palo::TUnit::type)0;
  tmp38.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.total_queued.$0", tmp38));
  TMetricDef tmp40;
  std::vector<std::string>  tmp41;
  tmp41.push_back("RESOURCE_POOL");

  tmp40.contexts = tmp41;
  tmp40.__isset.contexts = true;
  tmp40.description = "Total number of requests rejected in pool $0";
  tmp40.__isset.description = true;
  tmp40.key = "admission_controller.total_rejected.$0";
  tmp40.__isset.key = true;
  tmp40.kind = ( ::palo::TMetricKind::type)1;
  tmp40.__isset.kind = true;
  tmp40.label = "Resource Pool $0 Total Rejected";
  tmp40.__isset.label = true;
  tmp40.units = ( ::palo::TUnit::type)0;
  tmp40.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.total_rejected.$0", tmp40));
  TMetricDef tmp42;
  std::vector<std::string>  tmp43;
  tmp43.push_back("RESOURCE_POOL");

  tmp42.contexts = tmp43;
  tmp42.__isset.contexts = true;
  tmp42.description = "Total number of requests that have completed and released resources in pool $0";
  tmp42.__isset.description = true;
  tmp42.key = "admission_controller.total_released.$0";
  tmp42.__isset.key = true;
  tmp42.kind = ( ::palo::TMetricKind::type)1;
  tmp42.__isset.kind = true;
  tmp42.label = "Resource Pool $0 Total Released";
  tmp42.__isset.label = true;
  tmp42.units = ( ::palo::TUnit::type)0;
  tmp42.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.total_released.$0", tmp42));
  TMetricDef tmp44;
  std::vector<std::string>  tmp45;
  tmp45.push_back("RESOURCE_POOL");

  tmp44.contexts = tmp45;
  tmp44.__isset.contexts = true;
  tmp44.description = "Total number of requests timed out waiting while queued in pool $0";
  tmp44.__isset.description = true;
  tmp44.key = "admission_controller.total_timed_out.$0";
  tmp44.__isset.key = true;
  tmp44.kind = ( ::palo::TMetricKind::type)1;
  tmp44.__isset.kind = true;
  tmp44.label = "Resource Pool $0 Total Timed Out";
  tmp44.__isset.label = true;
  tmp44.units = ( ::palo::TUnit::type)0;
  tmp44.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission_controller.total_timed_out.$0", tmp44));
  TMetricDef tmp46;
  std::vector<std::string>  tmp47;
  tmp47.push_back("PALO BE");

  tmp46.contexts = tmp47;
  tmp46.__isset.contexts = true;
  tmp46.description = "Maximum allowed bytes allocated by the buffer pool.";
  tmp46.__isset.description = true;
  tmp46.key = "buffer_pool.limit";
  tmp46.__isset.key = true;
  tmp46.kind = ( ::palo::TMetricKind::type)0;
  tmp46.__isset.kind = true;
  tmp46.label = "Buffer Pool Allocated Memory Limit.";
  tmp46.__isset.label = true;
  tmp46.units = ( ::palo::TUnit::type)3;
  tmp46.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer_pool.limit", tmp46));
  TMetricDef tmp48;
  std::vector<std::string>  tmp49;
  tmp49.push_back("PALO BE");

  tmp48.contexts = tmp49;
  tmp48.__isset.contexts = true;
  tmp48.description = "Total memory currently reserved for buffers.";
  tmp48.__isset.description = true;
  tmp48.key = "buffer_pool.reserved";
  tmp48.__isset.key = true;
  tmp48.kind = ( ::palo::TMetricKind::type)0;
  tmp48.__isset.kind = true;
  tmp48.label = "Buffer Pool Total Reserved Memory.";
  tmp48.__isset.label = true;
  tmp48.units = ( ::palo::TUnit::type)3;
  tmp48.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer_pool.reserved", tmp48));
  TMetricDef tmp50;
  std::vector<std::string>  tmp51;
  tmp51.push_back("PALO BE");

  tmp50.contexts = tmp51;
  tmp50.__isset.contexts = true;
  tmp50.description = "Total buffer memory currently allocated by the buffer pool.";
  tmp50.__isset.description = true;
  tmp50.key = "buffer_pool.system_allocated";
  tmp50.__isset.key = true;
  tmp50.kind = ( ::palo::TMetricKind::type)0;
  tmp50.__isset.kind = true;
  tmp50.label = "Buffer Pool Total Allocated Memory.";
  tmp50.__isset.label = true;
  tmp50.units = ( ::palo::TUnit::type)3;
  tmp50.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer_pool.system_allocated", tmp50));
  TMetricDef tmp52;
  std::vector<std::string>  tmp53;
  tmp53.push_back("CATALOGSERVER");

  tmp52.contexts = tmp53;
  tmp52.__isset.contexts = true;
  tmp52.description = "Catalog Server Topic Processing Time";
  tmp52.__isset.description = true;
  tmp52.key = "catalog_server.topic_processing_time_s";
  tmp52.__isset.key = true;
  tmp52.kind = ( ::palo::TMetricKind::type)3;
  tmp52.__isset.kind = true;
  tmp52.label = "Catalog Server Topic Processing Time";
  tmp52.__isset.label = true;
  tmp52.units = ( ::palo::TUnit::type)9;
  tmp52.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog_server.topic_processing_time_s", tmp52));
  TMetricDef tmp54;
  std::vector<std::string>  tmp55;
  tmp55.push_back("PALO BE");

  tmp54.contexts = tmp55;
  tmp54.__isset.contexts = true;
  tmp54.description = "The number of databases in the catalog.";
  tmp54.__isset.description = true;
  tmp54.key = "catalog.num_databases";
  tmp54.__isset.key = true;
  tmp54.kind = ( ::palo::TMetricKind::type)0;
  tmp54.__isset.kind = true;
  tmp54.label = "Databases";
  tmp54.__isset.label = true;
  tmp54.units = ( ::palo::TUnit::type)7;
  tmp54.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.num_databases", tmp54));
  TMetricDef tmp56;
  std::vector<std::string>  tmp57;
  tmp57.push_back("PALO BE");

  tmp56.contexts = tmp57;
  tmp56.__isset.contexts = true;
  tmp56.description = "The number of tables in the catalog.";
  tmp56.__isset.description = true;
  tmp56.key = "catalog.num_tables";
  tmp56.__isset.key = true;
  tmp56.kind = ( ::palo::TMetricKind::type)0;
  tmp56.__isset.kind = true;
  tmp56.label = "Tables";
  tmp56.__isset.label = true;
  tmp56.units = ( ::palo::TUnit::type)7;
  tmp56.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.num_tables", tmp56));
  TMetricDef tmp58;
  std::vector<std::string>  tmp59;
  tmp59.push_back("PALO BE");

  tmp58.contexts = tmp59;
  tmp58.__isset.contexts = true;
  tmp58.description = "Indicates if the catalog is ready.";
  tmp58.__isset.description = true;
  tmp58.key = "catalog.ready";
  tmp58.__isset.key = true;
  tmp58.kind = ( ::palo::TMetricKind::type)2;
  tmp58.__isset.kind = true;
  tmp58.label = "Catalog Ready";
  tmp58.__isset.label = true;
  tmp58.units = ( ::palo::TUnit::type)7;
  tmp58.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.ready", tmp58));
  TMetricDef tmp60;
  std::vector<std::string>  tmp61;
  tmp61.push_back("PALO BE");

  tmp60.contexts = tmp61;
  tmp60.__isset.contexts = true;
  tmp60.description = "The number of clients currently in use by the Catalog Server client cache.";
  tmp60.__isset.description = true;
  tmp60.key = "catalog.server.client_cache.clients_in_use";
  tmp60.__isset.key = true;
  tmp60.kind = ( ::palo::TMetricKind::type)0;
  tmp60.__isset.kind = true;
  tmp60.label = "Catalog Server Client Cache Clients In Use";
  tmp60.__isset.label = true;
  tmp60.units = ( ::palo::TUnit::type)7;
  tmp60.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.server.client_cache.clients_in_use", tmp60));
  TMetricDef tmp62;
  std::vector<std::string>  tmp63;
  tmp63.push_back("PALO BE");

  tmp62.contexts = tmp63;
  tmp62.__isset.contexts = true;
  tmp62.description = "The total number of clients in the Catalog Server client cache.";
  tmp62.__isset.description = true;
  tmp62.key = "catalog.server.client_cache.total_clients";
  tmp62.__isset.key = true;
  tmp62.kind = ( ::palo::TMetricKind::type)0;
  tmp62.__isset.kind = true;
  tmp62.label = "Catalog Server Client Cache Total Clients";
  tmp62.__isset.label = true;
  tmp62.units = ( ::palo::TUnit::type)7;
  tmp62.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.server.client_cache.total_clients", tmp62));
  TMetricDef tmp64;
  std::vector<std::string>  tmp65;
  tmp65.push_back("CATALOGSERVER");

  tmp64.contexts = tmp65;
  tmp64.__isset.contexts = true;
  tmp64.description = "The full version string of the Catalog Server.";
  tmp64.__isset.description = true;
  tmp64.key = "catalog.version";
  tmp64.__isset.key = true;
  tmp64.kind = ( ::palo::TMetricKind::type)2;
  tmp64.__isset.kind = true;
  tmp64.label = "Catalog Version";
  tmp64.__isset.label = true;
  tmp64.units = ( ::palo::TUnit::type)7;
  tmp64.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.version", tmp64));
  TMetricDef tmp66;
  std::vector<std::string>  tmp67;
  tmp67.push_back("PALO BE");

  tmp66.contexts = tmp67;
  tmp66.__isset.contexts = true;
  tmp66.description = "The number of cgroups currently registered with the Cgroups Manager";
  tmp66.__isset.description = true;
  tmp66.key = "cgroups_mgr.active_cgroups";
  tmp66.__isset.key = true;
  tmp66.kind = ( ::palo::TMetricKind::type)0;
  tmp66.__isset.kind = true;
  tmp66.label = "Cgroups Manager Active Cgroups";
  tmp66.__isset.label = true;
  tmp66.units = ( ::palo::TUnit::type)0;
  tmp66.__isset.units = true;

  TMetricDefs.insert(std::make_pair("cgroups_mgr.active_cgroups", tmp66));
  TMetricDef tmp68;
  std::vector<std::string>  tmp69;
  tmp69.push_back("PALO BE");

  tmp68.contexts = tmp69;
  tmp68.__isset.contexts = true;
  tmp68.description = "Number of cache hits in the External Data Source Class Cache";
  tmp68.__isset.description = true;
  tmp68.key = "external_data_source.class_cache.hits";
  tmp68.__isset.key = true;
  tmp68.kind = ( ::palo::TMetricKind::type)1;
  tmp68.__isset.kind = true;
  tmp68.label = "External Data Source Class Cache Hits";
  tmp68.__isset.label = true;
  tmp68.units = ( ::palo::TUnit::type)0;
  tmp68.__isset.units = true;

  TMetricDefs.insert(std::make_pair("external_data_source.class_cache.hits", tmp68));
  TMetricDef tmp70;
  std::vector<std::string>  tmp71;
  tmp71.push_back("PALO BE");

  tmp70.contexts = tmp71;
  tmp70.__isset.contexts = true;
  tmp70.description = "Number of cache misses in the External Data Source Class Cache";
  tmp70.__isset.description = true;
  tmp70.key = "external_data_source.class_cache.misses";
  tmp70.__isset.key = true;
  tmp70.kind = ( ::palo::TMetricKind::type)1;
  tmp70.__isset.kind = true;
  tmp70.label = "External Data Source Class Cache Misses";
  tmp70.__isset.label = true;
  tmp70.units = ( ::palo::TUnit::type)0;
  tmp70.__isset.units = true;

  TMetricDefs.insert(std::make_pair("external_data_source.class_cache.misses", tmp70));
  TMetricDef tmp72;
  std::vector<std::string>  tmp73;
  tmp73.push_back("PALO_BE");

  tmp72.contexts = tmp73;
  tmp72.__isset.contexts = true;
  tmp72.description = "The number of active Palo Backend clients. These clients are for communication with other Palo Be.";
  tmp72.__isset.description = true;
  tmp72.key = "palo.backends.client_cache.clients_in_use";
  tmp72.__isset.key = true;
  tmp72.kind = ( ::palo::TMetricKind::type)0;
  tmp72.__isset.kind = true;
  tmp72.label = "Palo Backend Active Clients";
  tmp72.__isset.label = true;
  tmp72.units = ( ::palo::TUnit::type)7;
  tmp72.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo.backends.client_cache.clients_in_use", tmp72));
  TMetricDef tmp74;
  std::vector<std::string>  tmp75;
  tmp75.push_back("PALO_BE");

  tmp74.contexts = tmp75;
  tmp74.__isset.contexts = true;
  tmp74.description = "The total number of Palo Backend clients in this Palo Be's client cache. These clients are for communication with other Palo Be.";
  tmp74.__isset.description = true;
  tmp74.key = "palo.backends.client_cache.total_clients";
  tmp74.__isset.key = true;
  tmp74.kind = ( ::palo::TMetricKind::type)0;
  tmp74.__isset.kind = true;
  tmp74.label = "Palo Backend Total Clients";
  tmp74.__isset.label = true;
  tmp74.units = ( ::palo::TUnit::type)7;
  tmp74.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo.backends.client_cache.total_clients", tmp74));
  TMetricDef tmp76;
  std::vector<std::string>  tmp77;
  tmp77.push_back("PALO BE");

  tmp76.contexts = tmp77;
  tmp76.__isset.contexts = true;
  tmp76.description = "Distribution of DDL operation latencies";
  tmp76.__isset.description = true;
  tmp76.key = "palo_be.ddl_durations_ms";
  tmp76.__isset.key = true;
  tmp76.kind = ( ::palo::TMetricKind::type)5;
  tmp76.__isset.kind = true;
  tmp76.label = "DDL latency distribution";
  tmp76.__isset.label = true;
  tmp76.units = ( ::palo::TUnit::type)8;
  tmp76.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.ddl_durations_ms", tmp76));
  TMetricDef tmp78;
  std::vector<std::string>  tmp79;
  tmp79.push_back("PALO BE");

  tmp78.contexts = tmp79;
  tmp78.__isset.contexts = true;
  tmp78.description = "The current size of all allocated hash tables.";
  tmp78.__isset.description = true;
  tmp78.key = "palo_be.hash_table.total_bytes";
  tmp78.__isset.key = true;
  tmp78.kind = ( ::palo::TMetricKind::type)0;
  tmp78.__isset.kind = true;
  tmp78.label = "Hash Tables Size";
  tmp78.__isset.label = true;
  tmp78.units = ( ::palo::TUnit::type)3;
  tmp78.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.hash_table.total_bytes", tmp78));
  TMetricDef tmp80;
  std::vector<std::string>  tmp81;
  tmp81.push_back("PALO BE");

  tmp80.contexts = tmp81;
  tmp80.__isset.contexts = true;
  tmp80.description = "The total number of bytes read by the IO manager.";
  tmp80.__isset.description = true;
  tmp80.key = "palo_be.io_mgr.bytes_read";
  tmp80.__isset.key = true;
  tmp80.kind = ( ::palo::TMetricKind::type)1;
  tmp80.__isset.kind = true;
  tmp80.label = "Palo Be Io Mgr Bytes Read";
  tmp80.__isset.label = true;
  tmp80.units = ( ::palo::TUnit::type)3;
  tmp80.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.bytes_read", tmp80));
  TMetricDef tmp82;
  std::vector<std::string>  tmp83;
  tmp83.push_back("PALO BE");

  tmp82.contexts = tmp83;
  tmp82.__isset.contexts = true;
  tmp82.description = "Total number of bytes written to disk by the IO manager.";
  tmp82.__isset.description = true;
  tmp82.key = "palo_be.io_mgr.bytes_written";
  tmp82.__isset.key = true;
  tmp82.kind = ( ::palo::TMetricKind::type)1;
  tmp82.__isset.kind = true;
  tmp82.label = "Palo Be Io Mgr Bytes Written";
  tmp82.__isset.label = true;
  tmp82.units = ( ::palo::TUnit::type)3;
  tmp82.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.bytes_written", tmp82));
  TMetricDef tmp84;
  std::vector<std::string>  tmp85;
  tmp85.push_back("PALO BE");

  tmp84.contexts = tmp85;
  tmp84.__isset.contexts = true;
  tmp84.description = "Total number of cached bytes read by the IO manager.";
  tmp84.__isset.description = true;
  tmp84.key = "palo_be.io_mgr.cached_bytes_read";
  tmp84.__isset.key = true;
  tmp84.kind = ( ::palo::TMetricKind::type)1;
  tmp84.__isset.kind = true;
  tmp84.label = "Palo Be Io Mgr Cached Bytes Read";
  tmp84.__isset.label = true;
  tmp84.units = ( ::palo::TUnit::type)3;
  tmp84.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.cached_bytes_read", tmp84));
  TMetricDef tmp86;
  std::vector<std::string>  tmp87;
  tmp87.push_back("PALO BE");

  tmp86.contexts = tmp87;
  tmp86.__isset.contexts = true;
  tmp86.description = "Total number of local bytes read by the IO manager.";
  tmp86.__isset.description = true;
  tmp86.key = "palo_be.io_mgr.local_bytes_read";
  tmp86.__isset.key = true;
  tmp86.kind = ( ::palo::TMetricKind::type)1;
  tmp86.__isset.kind = true;
  tmp86.label = "Palo Be Io Mgr Local Bytes Read";
  tmp86.__isset.label = true;
  tmp86.units = ( ::palo::TUnit::type)3;
  tmp86.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.local_bytes_read", tmp86));
  TMetricDef tmp88;
  std::vector<std::string>  tmp89;
  tmp89.push_back("PALO BE");

  tmp88.contexts = tmp89;
  tmp88.__isset.contexts = true;
  tmp88.description = "The number of allocated IO buffers. IO buffers are shared by all queries.";
  tmp88.__isset.description = true;
  tmp88.key = "palo_be.io_mgr.num_buffers";
  tmp88.__isset.key = true;
  tmp88.kind = ( ::palo::TMetricKind::type)0;
  tmp88.__isset.kind = true;
  tmp88.label = "IO Buffers";
  tmp88.__isset.label = true;
  tmp88.units = ( ::palo::TUnit::type)7;
  tmp88.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.num_buffers", tmp88));
  TMetricDef tmp90;
  std::vector<std::string>  tmp91;
  tmp91.push_back("PALO BE");

  tmp90.contexts = tmp91;
  tmp90.__isset.contexts = true;
  tmp90.description = "The current number of files opened by the IO Manager";
  tmp90.__isset.description = true;
  tmp90.key = "palo_be.io_mgr.num_open_files";
  tmp90.__isset.key = true;
  tmp90.kind = ( ::palo::TMetricKind::type)0;
  tmp90.__isset.kind = true;
  tmp90.label = "Open Files";
  tmp90.__isset.label = true;
  tmp90.units = ( ::palo::TUnit::type)7;
  tmp90.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.num_open_files", tmp90));
  TMetricDef tmp92;
  std::vector<std::string>  tmp93;
  tmp93.push_back("PALO BE");

  tmp92.contexts = tmp93;
  tmp92.__isset.contexts = true;
  tmp92.description = "The number of unused IO buffers. IO buffers are shared by all queries.";
  tmp92.__isset.description = true;
  tmp92.key = "palo_be.io_mgr.num_unused_buffers";
  tmp92.__isset.key = true;
  tmp92.kind = ( ::palo::TMetricKind::type)0;
  tmp92.__isset.kind = true;
  tmp92.label = "Unused IO Buffers";
  tmp92.__isset.label = true;
  tmp92.units = ( ::palo::TUnit::type)7;
  tmp92.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.num_unused_buffers", tmp92));
  TMetricDef tmp94;
  std::vector<std::string>  tmp95;
  tmp95.push_back("PALO BE");

  tmp94.contexts = tmp95;
  tmp94.__isset.contexts = true;
  tmp94.description = "Total number of short_circuit bytes read by the IO manager.";
  tmp94.__isset.description = true;
  tmp94.key = "palo_be.io_mgr.short_circuit_bytes_read";
  tmp94.__isset.key = true;
  tmp94.kind = ( ::palo::TMetricKind::type)1;
  tmp94.__isset.kind = true;
  tmp94.label = "Palo Be Io Mgr Short Circuit Bytes Read";
  tmp94.__isset.label = true;
  tmp94.units = ( ::palo::TUnit::type)3;
  tmp94.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.short_circuit_bytes_read", tmp94));
  TMetricDef tmp96;
  std::vector<std::string>  tmp97;
  tmp97.push_back("PALO BE");

  tmp96.contexts = tmp97;
  tmp96.__isset.contexts = true;
  tmp96.description = "Number of bytes used by IO buffers (used and unused).";
  tmp96.__isset.description = true;
  tmp96.key = "palo_be.io_mgr.total_bytes";
  tmp96.__isset.key = true;
  tmp96.kind = ( ::palo::TMetricKind::type)0;
  tmp96.__isset.kind = true;
  tmp96.label = "IO Buffers Total Size";
  tmp96.__isset.label = true;
  tmp96.units = ( ::palo::TUnit::type)3;
  tmp96.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.total_bytes", tmp96));
  TMetricDef tmp98;
  std::vector<std::string>  tmp99;
  tmp99.push_back("PALO BE");

  tmp98.contexts = tmp99;
  tmp98.__isset.contexts = true;
  tmp98.description = "Number of cache hits for cached HDFS file handles";
  tmp98.__isset.description = true;
  tmp98.key = "palo_be.io_mgr.cached_file_handles_hit_count";
  tmp98.__isset.key = true;
  tmp98.kind = ( ::palo::TMetricKind::type)0;
  tmp98.__isset.kind = true;
  tmp98.label = "HDFS cached file handles hit count";
  tmp98.__isset.label = true;
  tmp98.units = ( ::palo::TUnit::type)7;
  tmp98.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.cached_file_handles_hit_count", tmp98));
  TMetricDef tmp100;
  std::vector<std::string>  tmp101;
  tmp101.push_back("PALO BE");

  tmp100.contexts = tmp101;
  tmp100.__isset.contexts = true;
  tmp100.description = "HDFS file handle cache hit ratio, between 0 and 1, where 1 means all reads were served from cached file handles.";
  tmp100.__isset.description = true;
  tmp100.key = "palo_be.io_mgr.cached_file_handles_hit_ratio";
  tmp100.__isset.key = true;
  tmp100.kind = ( ::palo::TMetricKind::type)3;
  tmp100.__isset.kind = true;
  tmp100.label = "HDFS file handle cache hit ratio";
  tmp100.__isset.label = true;
  tmp100.units = ( ::palo::TUnit::type)7;
  tmp100.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.cached_file_handles_hit_ratio", tmp100));
  TMetricDef tmp102;
  std::vector<std::string>  tmp103;
  tmp103.push_back("PALO BE");

  tmp102.contexts = tmp103;
  tmp102.__isset.contexts = true;
  tmp102.description = "Number of cache misses for cached HDFS file handles";
  tmp102.__isset.description = true;
  tmp102.key = "palo_be.io_mgr.cached_file_handles_miss_count";
  tmp102.__isset.key = true;
  tmp102.kind = ( ::palo::TMetricKind::type)0;
  tmp102.__isset.kind = true;
  tmp102.label = "HDFS cached file handles miss count";
  tmp102.__isset.label = true;
  tmp102.units = ( ::palo::TUnit::type)7;
  tmp102.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.cached_file_handles_miss_count", tmp102));
  TMetricDef tmp104;
  std::vector<std::string>  tmp105;
  tmp105.push_back("PALO BE");

  tmp104.contexts = tmp105;
  tmp104.__isset.contexts = true;
  tmp104.description = "Number of currently cached HDFS file handles in the IO manager.";
  tmp104.__isset.description = true;
  tmp104.key = "palo_be.io_mgr.num_cached_file_handles";
  tmp104.__isset.key = true;
  tmp104.kind = ( ::palo::TMetricKind::type)0;
  tmp104.__isset.kind = true;
  tmp104.label = "Number of cached HDFS file handles";
  tmp104.__isset.label = true;
  tmp104.units = ( ::palo::TUnit::type)7;
  tmp104.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.num_cached_file_handles", tmp104));
  TMetricDef tmp106;
  std::vector<std::string>  tmp107;
  tmp107.push_back("PALO BE");

  tmp106.contexts = tmp107;
  tmp106.__isset.contexts = true;
  tmp106.description = "Number of HDFS file handles that are currently in use by readers.";
  tmp106.__isset.description = true;
  tmp106.key = "palo_be.io_mgr.num_file_handles_outstanding";
  tmp106.__isset.key = true;
  tmp106.kind = ( ::palo::TMetricKind::type)0;
  tmp106.__isset.kind = true;
  tmp106.label = "Number of outstanding HDFS file handles";
  tmp106.__isset.label = true;
  tmp106.units = ( ::palo::TUnit::type)7;
  tmp106.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.io_mgr.num_file_handles_outstanding", tmp106));
  TMetricDef tmp108;
  std::vector<std::string>  tmp109;
  tmp109.push_back("PALO BE");

  tmp108.contexts = tmp109;
  tmp108.__isset.contexts = true;
  tmp108.description = "The current size of the memory pool shared by all queries";
  tmp108.__isset.description = true;
  tmp108.key = "palo_be.mem_pool.total_bytes";
  tmp108.__isset.key = true;
  tmp108.kind = ( ::palo::TMetricKind::type)0;
  tmp108.__isset.kind = true;
  tmp108.label = "Memory Pool Size";
  tmp108.__isset.label = true;
  tmp108.units = ( ::palo::TUnit::type)3;
  tmp108.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.mem_pool.total_bytes", tmp108));
  TMetricDef tmp110;
  std::vector<std::string>  tmp111;
  tmp111.push_back("PALO BE");

  tmp110.contexts = tmp111;
  tmp110.__isset.contexts = true;
  tmp110.description = "The number of HDFS files currently open for writing.";
  tmp110.__isset.description = true;
  tmp110.key = "palo_be.num_files_open_for_insert";
  tmp110.__isset.key = true;
  tmp110.kind = ( ::palo::TMetricKind::type)0;
  tmp110.__isset.kind = true;
  tmp110.label = "Files Open For Insert";
  tmp110.__isset.label = true;
  tmp110.units = ( ::palo::TUnit::type)7;
  tmp110.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_files_open_for_insert", tmp110));
  TMetricDef tmp112;
  std::vector<std::string>  tmp113;
  tmp113.push_back("PALO BE");

  tmp112.contexts = tmp113;
  tmp112.__isset.contexts = true;
  tmp112.description = "The total number of query fragments processed over the life of the process.";
  tmp112.__isset.description = true;
  tmp112.key = "palo_be.num_fragments";
  tmp112.__isset.key = true;
  tmp112.kind = ( ::palo::TMetricKind::type)1;
  tmp112.__isset.kind = true;
  tmp112.label = "Query Fragments";
  tmp112.__isset.label = true;
  tmp112.units = ( ::palo::TUnit::type)0;
  tmp112.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_fragments", tmp112));
  TMetricDef tmp114;
  std::vector<std::string>  tmp115;
  tmp115.push_back("PALO BE");

  tmp114.contexts = tmp115;
  tmp114.__isset.contexts = true;
  tmp114.description = "The number of query fragments currently executing.";
  tmp114.__isset.description = true;
  tmp114.key = "palo_be.num_fragments_in_flight";
  tmp114.__isset.key = true;
  tmp114.kind = ( ::palo::TMetricKind::type)0;
  tmp114.__isset.kind = true;
  tmp114.label = "Query Fragments";
  tmp114.__isset.label = true;
  tmp114.units = ( ::palo::TUnit::type)0;
  tmp114.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_fragments_in_flight", tmp114));
  TMetricDef tmp116;
  std::vector<std::string>  tmp117;
  tmp117.push_back("PALO BE");

  tmp116.contexts = tmp117;
  tmp116.__isset.contexts = true;
  tmp116.description = "The number of open Beeswax sessions.";
  tmp116.__isset.description = true;
  tmp116.key = "palo_be.num_open_beeswax_sessions";
  tmp116.__isset.key = true;
  tmp116.kind = ( ::palo::TMetricKind::type)0;
  tmp116.__isset.kind = true;
  tmp116.label = "Beeswax Sessions";
  tmp116.__isset.label = true;
  tmp116.units = ( ::palo::TUnit::type)7;
  tmp116.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_open_beeswax_sessions", tmp116));
  TMetricDef tmp118;
  std::vector<std::string>  tmp119;
  tmp119.push_back("PALO BE");

  tmp118.contexts = tmp119;
  tmp118.__isset.contexts = true;
  tmp118.description = "The number of open HiveServer2 sessions.";
  tmp118.__isset.description = true;
  tmp118.key = "palo_be.num_open_hiveserver2_sessions";
  tmp118.__isset.key = true;
  tmp118.kind = ( ::palo::TMetricKind::type)0;
  tmp118.__isset.kind = true;
  tmp118.label = "HiveServer2 Sessions";
  tmp118.__isset.label = true;
  tmp118.units = ( ::palo::TUnit::type)7;
  tmp118.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_open_hiveserver2_sessions", tmp118));
  TMetricDef tmp120;
  std::vector<std::string>  tmp121;
  tmp121.push_back("PALO BE");

  tmp120.contexts = tmp121;
  tmp120.__isset.contexts = true;
  tmp120.description = "The total number of queries processed over the life of the process";
  tmp120.__isset.description = true;
  tmp120.key = "palo_be.num_queries";
  tmp120.__isset.key = true;
  tmp120.kind = ( ::palo::TMetricKind::type)1;
  tmp120.__isset.kind = true;
  tmp120.label = "Queries";
  tmp120.__isset.label = true;
  tmp120.units = ( ::palo::TUnit::type)0;
  tmp120.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_queries", tmp120));
  TMetricDef tmp122;
  std::vector<std::string>  tmp123;
  tmp123.push_back("PALO BE");

  tmp122.contexts = tmp123;
  tmp122.__isset.contexts = true;
  tmp122.description = "Number of queries expired due to inactivity.";
  tmp122.__isset.description = true;
  tmp122.key = "palo_be.num_queries_expired";
  tmp122.__isset.key = true;
  tmp122.kind = ( ::palo::TMetricKind::type)1;
  tmp122.__isset.kind = true;
  tmp122.label = "Queries Expired";
  tmp122.__isset.label = true;
  tmp122.units = ( ::palo::TUnit::type)0;
  tmp122.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_queries_expired", tmp122));
  TMetricDef tmp124;
  std::vector<std::string>  tmp125;
  tmp125.push_back("PALO BE");

  tmp124.contexts = tmp125;
  tmp124.__isset.contexts = true;
  tmp124.description = "Number of queries for which any operator spilled.";
  tmp124.__isset.description = true;
  tmp124.key = "palo_be.num_queries_spilled";
  tmp124.__isset.key = true;
  tmp124.kind = ( ::palo::TMetricKind::type)1;
  tmp124.__isset.kind = true;
  tmp124.label = "Palo Be Num Queries Spilled";
  tmp124.__isset.label = true;
  tmp124.units = ( ::palo::TUnit::type)0;
  tmp124.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_queries_spilled", tmp124));
  TMetricDef tmp126;
  std::vector<std::string>  tmp127;
  tmp127.push_back("PALO BE");

  tmp126.contexts = tmp127;
  tmp126.__isset.contexts = true;
  tmp126.description = "Number of sessions expired due to inactivity.";
  tmp126.__isset.description = true;
  tmp126.key = "palo_be.num_sessions_expired";
  tmp126.__isset.key = true;
  tmp126.kind = ( ::palo::TMetricKind::type)1;
  tmp126.__isset.kind = true;
  tmp126.label = "Sessions Expired";
  tmp126.__isset.label = true;
  tmp126.units = ( ::palo::TUnit::type)0;
  tmp126.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.num_sessions_expired", tmp126));
  TMetricDef tmp128;
  std::vector<std::string>  tmp129;
  tmp129.push_back("PALO BE");

  tmp128.contexts = tmp129;
  tmp128.__isset.contexts = true;
  tmp128.description = "Distribution of query latencies";
  tmp128.__isset.description = true;
  tmp128.key = "palo_be.query_durations_ms";
  tmp128.__isset.key = true;
  tmp128.kind = ( ::palo::TMetricKind::type)5;
  tmp128.__isset.kind = true;
  tmp128.label = "Query latency distribution";
  tmp128.__isset.label = true;
  tmp128.units = ( ::palo::TUnit::type)8;
  tmp128.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.query_durations_ms", tmp128));
  TMetricDef tmp130;
  std::vector<std::string>  tmp131;
  tmp131.push_back("PALO BE");

  tmp130.contexts = tmp131;
  tmp130.__isset.contexts = true;
  tmp130.description = "Indicates if the Palo Be is ready.";
  tmp130.__isset.description = true;
  tmp130.key = "palo_be.ready";
  tmp130.__isset.key = true;
  tmp130.kind = ( ::palo::TMetricKind::type)2;
  tmp130.__isset.kind = true;
  tmp130.label = "Palo Be Ready";
  tmp130.__isset.label = true;
  tmp130.units = ( ::palo::TUnit::type)7;
  tmp130.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.ready", tmp130));
  TMetricDef tmp132;
  std::vector<std::string>  tmp133;
  tmp133.push_back("PALO BE");

  tmp132.contexts = tmp133;
  tmp132.__isset.contexts = true;
  tmp132.description = "Total number of bytes consumed for rows cached to support HS2 FETCH_FIRST.";
  tmp132.__isset.description = true;
  tmp132.key = "palo_be.resultset_cache.total_bytes";
  tmp132.__isset.key = true;
  tmp132.kind = ( ::palo::TMetricKind::type)0;
  tmp132.__isset.kind = true;
  tmp132.label = "Palo Be Resultset Cache Total Bytes";
  tmp132.__isset.label = true;
  tmp132.units = ( ::palo::TUnit::type)7;
  tmp132.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.resultset_cache.total_bytes", tmp132));
  TMetricDef tmp134;
  std::vector<std::string>  tmp135;
  tmp135.push_back("PALO BE");

  tmp134.contexts = tmp135;
  tmp134.__isset.contexts = true;
  tmp134.description = "Total number of rows cached to support HS2 FETCH_FIRST.";
  tmp134.__isset.description = true;
  tmp134.key = "palo_be.resultset_cache.total_num_rows";
  tmp134.__isset.key = true;
  tmp134.kind = ( ::palo::TMetricKind::type)0;
  tmp134.__isset.kind = true;
  tmp134.label = "Palo Be Resultset Cache Total Num Rows";
  tmp134.__isset.label = true;
  tmp134.units = ( ::palo::TUnit::type)7;
  tmp134.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.resultset_cache.total_num_rows", tmp134));
  TMetricDef tmp136;
  std::vector<std::string>  tmp137;
  tmp137.push_back("PALO BE");

  tmp136.contexts = tmp137;
  tmp136.__isset.contexts = true;
  tmp136.description = "The total number of scan ranges read over the life of the process that did not have volume metadata";
  tmp136.__isset.description = true;
  tmp136.key = "palo_be.scan_ranges.num_missing_volume_id";
  tmp136.__isset.key = true;
  tmp136.kind = ( ::palo::TMetricKind::type)1;
  tmp136.__isset.kind = true;
  tmp136.label = "Scan Ranges Missing Volume Information";
  tmp136.__isset.label = true;
  tmp136.units = ( ::palo::TUnit::type)0;
  tmp136.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.scan_ranges.num_missing_volume_id", tmp136));
  TMetricDef tmp138;
  std::vector<std::string>  tmp139;
  tmp139.push_back("PALO BE");

  tmp138.contexts = tmp139;
  tmp138.__isset.contexts = true;
  tmp138.description = "The total number of scan ranges read over the life of the process";
  tmp138.__isset.description = true;
  tmp138.key = "palo_be.scan_ranges.total";
  tmp138.__isset.key = true;
  tmp138.kind = ( ::palo::TMetricKind::type)1;
  tmp138.__isset.kind = true;
  tmp138.label = "Scan Ranges";
  tmp138.__isset.label = true;
  tmp138.units = ( ::palo::TUnit::type)0;
  tmp138.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.scan_ranges.total", tmp138));
  TMetricDef tmp140;
  std::vector<std::string>  tmp141;
  tmp141.push_back("PALO_BE");

  tmp140.contexts = tmp141;
  tmp140.__isset.contexts = true;
  tmp140.description = "The local start time of the Palo Be.";
  tmp140.__isset.description = true;
  tmp140.key = "palo_be.start_time";
  tmp140.__isset.key = true;
  tmp140.kind = ( ::palo::TMetricKind::type)2;
  tmp140.__isset.kind = true;
  tmp140.label = "Palo Be Start Time";
  tmp140.__isset.label = true;
  tmp140.units = ( ::palo::TUnit::type)7;
  tmp140.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.start_time", tmp140));
  TMetricDef tmp142;
  std::vector<std::string>  tmp143;
  tmp143.push_back("PALO_BE");

  tmp142.contexts = tmp143;
  tmp142.__isset.contexts = true;
  tmp142.description = "The full version string of the Palo Be.";
  tmp142.__isset.description = true;
  tmp142.key = "palo_be.version";
  tmp142.__isset.key = true;
  tmp142.kind = ( ::palo::TMetricKind::type)2;
  tmp142.__isset.kind = true;
  tmp142.label = "Palo Be Version";
  tmp142.__isset.label = true;
  tmp142.units = ( ::palo::TUnit::type)7;
  tmp142.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.version", tmp142));
  TMetricDef tmp144;
  std::vector<std::string>  tmp145;
  tmp145.push_back("PALO_BE");

  tmp144.contexts = tmp145;
  tmp144.__isset.contexts = true;
  tmp144.description = "Looking count of olapengine's lru cache.";
  tmp144.__isset.description = true;
  tmp144.key = "palo_be.olap.lru_cache.lookup_count";
  tmp144.__isset.key = true;
  tmp144.kind = ( ::palo::TMetricKind::type)1;
  tmp144.__isset.kind = true;
  tmp144.label = "OlapEngine Lru Cache Lookup Count";
  tmp144.__isset.label = true;
  tmp144.units = ( ::palo::TUnit::type)7;
  tmp144.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.lru_cache.lookup_count", tmp144));
  TMetricDef tmp146;
  std::vector<std::string>  tmp147;
  tmp147.push_back("PALO_BE");

  tmp146.contexts = tmp147;
  tmp146.__isset.contexts = true;
  tmp146.description = "Hit count of olapengine's lru cache.";
  tmp146.__isset.description = true;
  tmp146.key = "palo_be.olap.lru_cache.hit_count";
  tmp146.__isset.key = true;
  tmp146.kind = ( ::palo::TMetricKind::type)1;
  tmp146.__isset.kind = true;
  tmp146.label = "OlapEngine Lru Cache Hit Count";
  tmp146.__isset.label = true;
  tmp146.units = ( ::palo::TUnit::type)7;
  tmp146.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.lru_cache.hit_count", tmp146));
  TMetricDef tmp148;
  std::vector<std::string>  tmp149;
  tmp149.push_back("PALO_BE");

  tmp148.contexts = tmp149;
  tmp148.__isset.contexts = true;
  tmp148.description = "Pushing count over the life of the Palo Be process.";
  tmp148.__isset.description = true;
  tmp148.key = "palo_be.olap.push_count";
  tmp148.__isset.key = true;
  tmp148.kind = ( ::palo::TMetricKind::type)1;
  tmp148.__isset.kind = true;
  tmp148.label = "OlapEngine Pushing Count";
  tmp148.__isset.label = true;
  tmp148.units = ( ::palo::TUnit::type)7;
  tmp148.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.push_count", tmp148));
  TMetricDef tmp150;
  std::vector<std::string>  tmp151;
  tmp151.push_back("PALO_BE");

  tmp150.contexts = tmp151;
  tmp150.__isset.contexts = true;
  tmp150.description = "Fetch count over the life of the Palo Be process.";
  tmp150.__isset.description = true;
  tmp150.key = "palo_be.olap.fetch_count";
  tmp150.__isset.key = true;
  tmp150.kind = ( ::palo::TMetricKind::type)1;
  tmp150.__isset.kind = true;
  tmp150.label = "OlapEngine Fetch Count";
  tmp150.__isset.label = true;
  tmp150.units = ( ::palo::TUnit::type)7;
  tmp150.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.fetch_count", tmp150));
  TMetricDef tmp152;
  std::vector<std::string>  tmp153;
  tmp153.push_back("PALO_BE");

  tmp152.contexts = tmp153;
  tmp152.__isset.contexts = true;
  tmp152.description = "Request count over the life of the Palo Be process.";
  tmp152.__isset.description = true;
  tmp152.key = "palo_be.olap.request_count";
  tmp152.__isset.key = true;
  tmp152.kind = ( ::palo::TMetricKind::type)1;
  tmp152.__isset.kind = true;
  tmp152.label = "OlapEngine Request Count";
  tmp152.__isset.label = true;
  tmp152.units = ( ::palo::TUnit::type)7;
  tmp152.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.request_count", tmp152));
  TMetricDef tmp154;
  std::vector<std::string>  tmp155;
  tmp155.push_back("PALO_BE");

  tmp154.contexts = tmp155;
  tmp154.__isset.contexts = true;
  tmp154.description = "Base compaction num over the life of the Palo Be process.";
  tmp154.__isset.description = true;
  tmp154.key = "palo_be.olap.be_merge.delta_num";
  tmp154.__isset.key = true;
  tmp154.kind = ( ::palo::TMetricKind::type)1;
  tmp154.__isset.kind = true;
  tmp154.label = "OlapEngine base compatcion num";
  tmp154.__isset.label = true;
  tmp154.units = ( ::palo::TUnit::type)7;
  tmp154.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.be_merge.delta_num", tmp154));
  TMetricDef tmp156;
  std::vector<std::string>  tmp157;
  tmp157.push_back("PALO_BE");

  tmp156.contexts = tmp157;
  tmp156.__isset.contexts = true;
  tmp156.description = "Base compaction size over the life of the Palo Be process.";
  tmp156.__isset.description = true;
  tmp156.key = "palo_be.olap.be_merge_size";
  tmp156.__isset.key = true;
  tmp156.kind = ( ::palo::TMetricKind::type)1;
  tmp156.__isset.kind = true;
  tmp156.label = "OlapEngine base compatcion size";
  tmp156.__isset.label = true;
  tmp156.units = ( ::palo::TUnit::type)7;
  tmp156.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.be_merge_size", tmp156));
  TMetricDef tmp158;
  std::vector<std::string>  tmp159;
  tmp159.push_back("PALO_BE");

  tmp158.contexts = tmp159;
  tmp158.__isset.contexts = true;
  tmp158.description = "Cumulative compaction num over the life of the Palo Be process.";
  tmp158.__isset.description = true;
  tmp158.key = "palo_be.olap.ce_merge.delta_num";
  tmp158.__isset.key = true;
  tmp158.kind = ( ::palo::TMetricKind::type)1;
  tmp158.__isset.kind = true;
  tmp158.label = "OlapEngine cumulative compatcion num";
  tmp158.__isset.label = true;
  tmp158.units = ( ::palo::TUnit::type)7;
  tmp158.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.ce_merge.delta_num", tmp158));
  TMetricDef tmp160;
  std::vector<std::string>  tmp161;
  tmp161.push_back("PALO_BE");

  tmp160.contexts = tmp161;
  tmp160.__isset.contexts = true;
  tmp160.description = "Cumulative compaction size over the life of the Palo Be process.";
  tmp160.__isset.description = true;
  tmp160.key = "palo_be.olap.ce_merge_size";
  tmp160.__isset.key = true;
  tmp160.kind = ( ::palo::TMetricKind::type)1;
  tmp160.__isset.kind = true;
  tmp160.label = "OlapEngine cumulative compatcion size";
  tmp160.__isset.label = true;
  tmp160.units = ( ::palo::TUnit::type)7;
  tmp160.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.olap.ce_merge_size", tmp160));
  TMetricDef tmp162;
  std::vector<std::string>  tmp163;
  tmp163.push_back("PALO BE");

  tmp162.contexts = tmp163;
  tmp162.__isset.contexts = true;
  tmp162.description = "The number of active Palo Backend client connections to this Palo Be.";
  tmp162.__isset.description = true;
  tmp162.key = "palo_be.thrift_server.PaloBackend.connections_in_use";
  tmp162.__isset.key = true;
  tmp162.kind = ( ::palo::TMetricKind::type)0;
  tmp162.__isset.kind = true;
  tmp162.label = "Palo Backend Active Connections";
  tmp162.__isset.label = true;
  tmp162.units = ( ::palo::TUnit::type)7;
  tmp162.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.thrift_server.PaloBackend.connections_in_use", tmp162));
  TMetricDef tmp164;
  std::vector<std::string>  tmp165;
  tmp165.push_back("PALO BE");

  tmp164.contexts = tmp165;
  tmp164.__isset.contexts = true;
  tmp164.description = "The total number of Palo Backend client connections made to this Palo Be over its lifetime.";
  tmp164.__isset.description = true;
  tmp164.key = "palo_be.thrift_server.PaloBackend.total_connections";
  tmp164.__isset.key = true;
  tmp164.kind = ( ::palo::TMetricKind::type)1;
  tmp164.__isset.kind = true;
  tmp164.label = "Palo Backend Server Total Connections";
  tmp164.__isset.label = true;
  tmp164.units = ( ::palo::TUnit::type)0;
  tmp164.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.thrift_server.PaloBackend.total_connections", tmp164));
  TMetricDef tmp166;
  std::vector<std::string>  tmp167;
  tmp167.push_back("PALO BE");

  tmp166.contexts = tmp167;
  tmp166.__isset.contexts = true;
  tmp166.description = "The number of active Palo Backend heartbeat connections to this Palo Be.";
  tmp166.__isset.description = true;
  tmp166.key = "palo_be.thrift_server.heartbeat.connections_in_use";
  tmp166.__isset.key = true;
  tmp166.kind = ( ::palo::TMetricKind::type)0;
  tmp166.__isset.kind = true;
  tmp166.label = "Palo Backend HeartBeat Active Connections";
  tmp166.__isset.label = true;
  tmp166.units = ( ::palo::TUnit::type)7;
  tmp166.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.thrift_server.heartbeat.connections_in_use", tmp166));
  TMetricDef tmp168;
  std::vector<std::string>  tmp169;
  tmp169.push_back("PALO BE");

  tmp168.contexts = tmp169;
  tmp168.__isset.contexts = true;
  tmp168.description = "The total number of Palo Backend heartbeat connections made to this Palo Be over its lifetime.";
  tmp168.__isset.description = true;
  tmp168.key = "palo_be.thrift_server.heartbeat.total_connections";
  tmp168.__isset.key = true;
  tmp168.kind = ( ::palo::TMetricKind::type)1;
  tmp168.__isset.kind = true;
  tmp168.label = "Palo Backend HeartBeat Total Connections";
  tmp168.__isset.label = true;
  tmp168.units = ( ::palo::TUnit::type)0;
  tmp168.__isset.units = true;

  TMetricDefs.insert(std::make_pair("palo_be.thrift_server.heartbeat.total_connections", tmp168));
  TMetricDef tmp170;
  std::vector<std::string>  tmp171;
  tmp171.push_back("PALO BE");

  tmp170.contexts = tmp171;
  tmp170.__isset.contexts = true;
  tmp170.description = "The number of connections to the Catalog Service that have been accepted and are waiting to be setup.";
  tmp170.__isset.description = true;
  tmp170.key = "impala.thrift_server.CatalogService.connection_setup_queue_size";
  tmp170.__isset.key = true;
  tmp170.kind = ( ::palo::TMetricKind::type)0;
  tmp170.__isset.kind = true;
  tmp170.label = "Catalog Service Connections Queued for Setup";
  tmp170.__isset.label = true;
  tmp170.units = ( ::palo::TUnit::type)7;
  tmp170.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.CatalogService.connection_setup_queue_size", tmp170));
  TMetricDef tmp172;
  std::vector<std::string>  tmp173;
  tmp173.push_back("CATALOGSERVER");

  tmp172.contexts = tmp173;
  tmp172.__isset.contexts = true;
  tmp172.description = "The number of active catalog service connections to this Catalog Server.";
  tmp172.__isset.description = true;
  tmp172.key = "impala.thrift_server.CatalogService.connections_in_use";
  tmp172.__isset.key = true;
  tmp172.kind = ( ::palo::TMetricKind::type)0;
  tmp172.__isset.kind = true;
  tmp172.label = "Catalog Service Active Connections";
  tmp172.__isset.label = true;
  tmp172.units = ( ::palo::TUnit::type)7;
  tmp172.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.CatalogService.connections_in_use", tmp172));
  TMetricDef tmp174;
  std::vector<std::string>  tmp175;
  tmp175.push_back("CATALOGSERVER");

  tmp174.contexts = tmp175;
  tmp174.__isset.contexts = true;
  tmp174.description = "The total number of connections made to this Catalog Server's catalog service  over its lifetime.";
  tmp174.__isset.description = true;
  tmp174.key = "impala.thrift_server.CatalogService.total_connections";
  tmp174.__isset.key = true;
  tmp174.kind = ( ::palo::TMetricKind::type)1;
  tmp174.__isset.kind = true;
  tmp174.label = "Catalog Service Total Connections";
  tmp174.__isset.label = true;
  tmp174.units = ( ::palo::TUnit::type)0;
  tmp174.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.CatalogService.total_connections", tmp174));
  TMetricDef tmp176;
  std::vector<std::string>  tmp177;
  tmp177.push_back("PALO BE");

  tmp176.contexts = tmp177;
  tmp176.__isset.contexts = true;
  tmp176.description = "The number of connections to the Statestore Service that have been accepted and are waiting to be setup.";
  tmp176.__isset.description = true;
  tmp176.key = "impala.thrift_server.StatestoreService.connection_setup_queue_size";
  tmp176.__isset.key = true;
  tmp176.kind = ( ::palo::TMetricKind::type)0;
  tmp176.__isset.kind = true;
  tmp176.label = "Statestore Service Connections Queued for Setup";
  tmp176.__isset.label = true;
  tmp176.units = ( ::palo::TUnit::type)7;
  tmp176.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.StatestoreService.connection_setup_queue_size", tmp176));
  TMetricDef tmp178;
  std::vector<std::string>  tmp179;
  tmp179.push_back("STATESTORE");

  tmp178.contexts = tmp179;
  tmp178.__isset.contexts = true;
  tmp178.description = "The number of active connections to this StateStore's StateStore service.";
  tmp178.__isset.description = true;
  tmp178.key = "impala.thrift_server.StatestoreService.connections_in_use";
  tmp178.__isset.key = true;
  tmp178.kind = ( ::palo::TMetricKind::type)0;
  tmp178.__isset.kind = true;
  tmp178.label = "StateStore Service Active Connections";
  tmp178.__isset.label = true;
  tmp178.units = ( ::palo::TUnit::type)7;
  tmp178.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.StatestoreService.connections_in_use", tmp178));
  TMetricDef tmp180;
  std::vector<std::string>  tmp181;
  tmp181.push_back("STATESTORE");

  tmp180.contexts = tmp181;
  tmp180.__isset.contexts = true;
  tmp180.description = "The total number of connections made to this StateStore's StateStore service over its lifetime.";
  tmp180.__isset.description = true;
  tmp180.key = "impala.thrift_server.StatestoreService.total_connections";
  tmp180.__isset.key = true;
  tmp180.kind = ( ::palo::TMetricKind::type)1;
  tmp180.__isset.kind = true;
  tmp180.label = "StateStore Service Connections";
  tmp180.__isset.label = true;
  tmp180.units = ( ::palo::TUnit::type)0;
  tmp180.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.StatestoreService.total_connections", tmp180));
  TMetricDef tmp182;
  std::vector<std::string>  tmp183;
  tmp183.push_back("PALO BE");

  tmp182.contexts = tmp183;
  tmp182.__isset.contexts = true;
  tmp182.description = "The number of connections to the Impala Backend Server that have been accepted and are waiting to be setup.";
  tmp182.__isset.description = true;
  tmp182.key = "impala.thrift_server.backend.connection_setup_queue_size";
  tmp182.__isset.key = true;
  tmp182.kind = ( ::palo::TMetricKind::type)0;
  tmp182.__isset.kind = true;
  tmp182.label = "Impala Backend Server Connections Queued for Setup";
  tmp182.__isset.label = true;
  tmp182.units = ( ::palo::TUnit::type)7;
  tmp182.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.backend.connection_setup_queue_size", tmp182));
  TMetricDef tmp184;
  std::vector<std::string>  tmp185;
  tmp185.push_back("PALO BE");

  tmp184.contexts = tmp185;
  tmp184.__isset.contexts = true;
  tmp184.description = "The number of active Impala Backend client connections to this Impala Daemon.";
  tmp184.__isset.description = true;
  tmp184.key = "impala.thrift_server.backend.connections_in_use";
  tmp184.__isset.key = true;
  tmp184.kind = ( ::palo::TMetricKind::type)0;
  tmp184.__isset.kind = true;
  tmp184.label = "Impala Backend Server Active Connections";
  tmp184.__isset.label = true;
  tmp184.units = ( ::palo::TUnit::type)7;
  tmp184.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.backend.connections_in_use", tmp184));
  TMetricDef tmp186;
  std::vector<std::string>  tmp187;
  tmp187.push_back("PALO BE");

  tmp186.contexts = tmp187;
  tmp186.__isset.contexts = true;
  tmp186.description = "The total number of Impala Backend client connections made to this Impala Daemon over its lifetime.";
  tmp186.__isset.description = true;
  tmp186.key = "impala.thrift_server.backend.total_connections";
  tmp186.__isset.key = true;
  tmp186.kind = ( ::palo::TMetricKind::type)1;
  tmp186.__isset.kind = true;
  tmp186.label = "Impala Backend Server Connections";
  tmp186.__isset.label = true;
  tmp186.units = ( ::palo::TUnit::type)0;
  tmp186.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.backend.total_connections", tmp186));
  TMetricDef tmp188;
  std::vector<std::string>  tmp189;
  tmp189.push_back("PALO BE");

  tmp188.contexts = tmp189;
  tmp188.__isset.contexts = true;
  tmp188.description = "The number of active Beeswax API connections to this Impala Daemon.";
  tmp188.__isset.description = true;
  tmp188.key = "impala.thrift_server.beeswax_frontend.connections_in_use";
  tmp188.__isset.key = true;
  tmp188.kind = ( ::palo::TMetricKind::type)0;
  tmp188.__isset.kind = true;
  tmp188.label = "Beeswax API Active Connections";
  tmp188.__isset.label = true;
  tmp188.units = ( ::palo::TUnit::type)7;
  tmp188.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.beeswax_frontend.connections_in_use", tmp188));
  TMetricDef tmp190;
  std::vector<std::string>  tmp191;
  tmp191.push_back("PALO BE");

  tmp190.contexts = tmp191;
  tmp190.__isset.contexts = true;
  tmp190.description = "The total number of Beeswax API connections made to this Impala Daemon over its lifetime.";
  tmp190.__isset.description = true;
  tmp190.key = "impala.thrift_server.beeswax_frontend.total_connections";
  tmp190.__isset.key = true;
  tmp190.kind = ( ::palo::TMetricKind::type)1;
  tmp190.__isset.kind = true;
  tmp190.label = "Beeswax API Total Connections";
  tmp190.__isset.label = true;
  tmp190.units = ( ::palo::TUnit::type)0;
  tmp190.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.beeswax_frontend.total_connections", tmp190));
  TMetricDef tmp192;
  std::vector<std::string>  tmp193;
  tmp193.push_back("PALO BE");

  tmp192.contexts = tmp193;
  tmp192.__isset.contexts = true;
  tmp192.description = "The number of active HiveServer2 API connections to this Impala Daemon.";
  tmp192.__isset.description = true;
  tmp192.key = "impala.thrift_server.hiveserver2_frontend.connections_in_use";
  tmp192.__isset.key = true;
  tmp192.kind = ( ::palo::TMetricKind::type)0;
  tmp192.__isset.kind = true;
  tmp192.label = "HiveServer2 API Active Connections";
  tmp192.__isset.label = true;
  tmp192.units = ( ::palo::TUnit::type)7;
  tmp192.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.hiveserver2_frontend.connections_in_use", tmp192));
  TMetricDef tmp194;
  std::vector<std::string>  tmp195;
  tmp195.push_back("PALO BE");

  tmp194.contexts = tmp195;
  tmp194.__isset.contexts = true;
  tmp194.description = "The total number of HiveServer2 API connections made to this Impala Daemon over its lifetime.";
  tmp194.__isset.description = true;
  tmp194.key = "impala.thrift_server.hiveserver2_frontend.total_connections";
  tmp194.__isset.key = true;
  tmp194.kind = ( ::palo::TMetricKind::type)1;
  tmp194.__isset.kind = true;
  tmp194.label = "HiveServer2 API Total Connections";
  tmp194.__isset.label = true;
  tmp194.units = ( ::palo::TUnit::type)0;
  tmp194.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift_server.hiveserver2_frontend.total_connections", tmp194));
  TMetricDef tmp196;
  std::vector<std::string>  tmp197;
  tmp197.push_back("CATALOGSERVER");
  tmp197.push_back("PALO BE");

  tmp196.contexts = tmp197;
  tmp196.__isset.contexts = true;
  tmp196.description = "Jvm $0 Committed Usage Bytes";
  tmp196.__isset.description = true;
  tmp196.key = "jvm.$0.committed_usage_bytes";
  tmp196.__isset.key = true;
  tmp196.kind = ( ::palo::TMetricKind::type)0;
  tmp196.__isset.kind = true;
  tmp196.label = "Jvm $0 Committed Usage Bytes";
  tmp196.__isset.label = true;
  tmp196.units = ( ::palo::TUnit::type)3;
  tmp196.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.committed_usage_bytes", tmp196));
  TMetricDef tmp198;
  std::vector<std::string>  tmp199;
  tmp199.push_back("CATALOGSERVER");
  tmp199.push_back("PALO BE");

  tmp198.contexts = tmp199;
  tmp198.__isset.contexts = true;
  tmp198.description = "Jvm $0 Current Usage Bytes";
  tmp198.__isset.description = true;
  tmp198.key = "jvm.$0.current_usage_bytes";
  tmp198.__isset.key = true;
  tmp198.kind = ( ::palo::TMetricKind::type)0;
  tmp198.__isset.kind = true;
  tmp198.label = "Jvm $0 Current Usage Bytes";
  tmp198.__isset.label = true;
  tmp198.units = ( ::palo::TUnit::type)3;
  tmp198.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.current_usage_bytes", tmp198));
  TMetricDef tmp200;
  std::vector<std::string>  tmp201;
  tmp201.push_back("CATALOGSERVER");
  tmp201.push_back("PALO BE");

  tmp200.contexts = tmp201;
  tmp200.__isset.contexts = true;
  tmp200.description = "Jvm $0 Init Usage Bytes";
  tmp200.__isset.description = true;
  tmp200.key = "jvm.$0.init_usage_bytes";
  tmp200.__isset.key = true;
  tmp200.kind = ( ::palo::TMetricKind::type)0;
  tmp200.__isset.kind = true;
  tmp200.label = "Jvm $0 Init Usage Bytes";
  tmp200.__isset.label = true;
  tmp200.units = ( ::palo::TUnit::type)3;
  tmp200.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.init_usage_bytes", tmp200));
  TMetricDef tmp202;
  std::vector<std::string>  tmp203;
  tmp203.push_back("CATALOGSERVER");
  tmp203.push_back("PALO BE");

  tmp202.contexts = tmp203;
  tmp202.__isset.contexts = true;
  tmp202.description = "Jvm $0 Max Usage Bytes";
  tmp202.__isset.description = true;
  tmp202.key = "jvm.$0.max_usage_bytes";
  tmp202.__isset.key = true;
  tmp202.kind = ( ::palo::TMetricKind::type)0;
  tmp202.__isset.kind = true;
  tmp202.label = "Jvm $0 Max Usage Bytes";
  tmp202.__isset.label = true;
  tmp202.units = ( ::palo::TUnit::type)3;
  tmp202.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.max_usage_bytes", tmp202));
  TMetricDef tmp204;
  std::vector<std::string>  tmp205;
  tmp205.push_back("CATALOGSERVER");
  tmp205.push_back("PALO BE");

  tmp204.contexts = tmp205;
  tmp204.__isset.contexts = true;
  tmp204.description = "Jvm $0 Peak Committed Usage Bytes";
  tmp204.__isset.description = true;
  tmp204.key = "jvm.$0.peak_committed_usage_bytes";
  tmp204.__isset.key = true;
  tmp204.kind = ( ::palo::TMetricKind::type)0;
  tmp204.__isset.kind = true;
  tmp204.label = "Jvm $0 Peak Committed Usage Bytes";
  tmp204.__isset.label = true;
  tmp204.units = ( ::palo::TUnit::type)3;
  tmp204.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak_committed_usage_bytes", tmp204));
  TMetricDef tmp206;
  std::vector<std::string>  tmp207;
  tmp207.push_back("CATALOGSERVER");
  tmp207.push_back("PALO BE");

  tmp206.contexts = tmp207;
  tmp206.__isset.contexts = true;
  tmp206.description = "Jvm $0 Peak Current Usage Bytes";
  tmp206.__isset.description = true;
  tmp206.key = "jvm.$0.peak_current_usage_bytes";
  tmp206.__isset.key = true;
  tmp206.kind = ( ::palo::TMetricKind::type)0;
  tmp206.__isset.kind = true;
  tmp206.label = "Jvm $0 Peak Current Usage Bytes";
  tmp206.__isset.label = true;
  tmp206.units = ( ::palo::TUnit::type)3;
  tmp206.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak_current_usage_bytes", tmp206));
  TMetricDef tmp208;
  std::vector<std::string>  tmp209;
  tmp209.push_back("CATALOGSERVER");
  tmp209.push_back("PALO BE");

  tmp208.contexts = tmp209;
  tmp208.__isset.contexts = true;
  tmp208.description = "Jvm $0 Peak Init Usage Bytes";
  tmp208.__isset.description = true;
  tmp208.key = "jvm.$0.peak_init_usage_bytes";
  tmp208.__isset.key = true;
  tmp208.kind = ( ::palo::TMetricKind::type)0;
  tmp208.__isset.kind = true;
  tmp208.label = "Jvm $0 Peak Init Usage Bytes";
  tmp208.__isset.label = true;
  tmp208.units = ( ::palo::TUnit::type)3;
  tmp208.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak_init_usage_bytes", tmp208));
  TMetricDef tmp210;
  std::vector<std::string>  tmp211;
  tmp211.push_back("CATALOGSERVER");
  tmp211.push_back("PALO BE");

  tmp210.contexts = tmp211;
  tmp210.__isset.contexts = true;
  tmp210.description = "Jvm $0 Peak Max Usage Bytes";
  tmp210.__isset.description = true;
  tmp210.key = "jvm.$0.peak_max_usage_bytes";
  tmp210.__isset.key = true;
  tmp210.kind = ( ::palo::TMetricKind::type)0;
  tmp210.__isset.kind = true;
  tmp210.label = "Jvm $0 Peak Max Usage Bytes";
  tmp210.__isset.label = true;
  tmp210.units = ( ::palo::TUnit::type)3;
  tmp210.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak_max_usage_bytes", tmp210));
  TMetricDef tmp212;
  std::vector<std::string>  tmp213;
  tmp213.push_back("PALO BE");

  tmp212.contexts = tmp213;
  tmp212.__isset.contexts = true;
  tmp212.description = "The amount of memory freed by the last memory tracker garbage collection.";
  tmp212.__isset.description = true;
  tmp212.key = "mem_tracker.process.bytes_freed_by_last_gc";
  tmp212.__isset.key = true;
  tmp212.kind = ( ::palo::TMetricKind::type)0;
  tmp212.__isset.kind = true;
  tmp212.label = "MemTracker Bytes Freed By Last Garbage Collection";
  tmp212.__isset.label = true;
  tmp212.units = ( ::palo::TUnit::type)3;
  tmp212.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem_tracker.process.bytes_freed_by_last_gc", tmp212));
  TMetricDef tmp214;
  std::vector<std::string>  tmp215;
  tmp215.push_back("PALO BE");

  tmp214.contexts = tmp215;
  tmp214.__isset.contexts = true;
  tmp214.description = "The amount of memory by which the process was over its memory limit the last time the memory limit was encountered.";
  tmp214.__isset.description = true;
  tmp214.key = "mem_tracker.process.bytes_over_limit";
  tmp214.__isset.key = true;
  tmp214.kind = ( ::palo::TMetricKind::type)0;
  tmp214.__isset.kind = true;
  tmp214.label = "MemTracker Bytes Over Limit";
  tmp214.__isset.label = true;
  tmp214.units = ( ::palo::TUnit::type)3;
  tmp214.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem_tracker.process.bytes_over_limit", tmp214));
  TMetricDef tmp216;
  std::vector<std::string>  tmp217;
  tmp217.push_back("PALO BE");

  tmp216.contexts = tmp217;
  tmp216.__isset.contexts = true;
  tmp216.description = "The process memory tracker limit.";
  tmp216.__isset.description = true;
  tmp216.key = "mem_tracker.process.limit";
  tmp216.__isset.key = true;
  tmp216.kind = ( ::palo::TMetricKind::type)0;
  tmp216.__isset.kind = true;
  tmp216.label = "Process Tracker Limit";
  tmp216.__isset.label = true;
  tmp216.units = ( ::palo::TUnit::type)3;
  tmp216.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem_tracker.process.limit", tmp216));
  TMetricDef tmp218;
  std::vector<std::string>  tmp219;
  tmp219.push_back("PALO BE");

  tmp218.contexts = tmp219;
  tmp218.__isset.contexts = true;
  tmp218.description = "The total number of garbage collections performed by the memory tracker over the life of the process.";
  tmp218.__isset.description = true;
  tmp218.key = "mem_tracker.process.num_gcs";
  tmp218.__isset.key = true;
  tmp218.kind = ( ::palo::TMetricKind::type)1;
  tmp218.__isset.kind = true;
  tmp218.label = "MemTracker Garbage Collections";
  tmp218.__isset.label = true;
  tmp218.units = ( ::palo::TUnit::type)0;
  tmp218.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem_tracker.process.num_gcs", tmp218));
  TMetricDef tmp220;
  std::vector<std::string>  tmp221;
  tmp221.push_back("STATESTORE");
  tmp221.push_back("CATALOGSERVER");
  tmp221.push_back("PALO BE");

  tmp220.contexts = tmp221;
  tmp220.__isset.contexts = true;
  tmp220.description = "Total memory currently used by TCMalloc and buffer pool.";
  tmp220.__isset.description = true;
  tmp220.key = "memory.total_used";
  tmp220.__isset.key = true;
  tmp220.kind = ( ::palo::TMetricKind::type)0;
  tmp220.__isset.kind = true;
  tmp220.label = "Total Used Memory.";
  tmp220.__isset.label = true;
  tmp220.units = ( ::palo::TUnit::type)3;
  tmp220.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.total_used", tmp220));
  TMetricDef tmp222;
  std::vector<std::string>  tmp223;
  tmp223.push_back("PALO BE");

  tmp222.contexts = tmp223;
  tmp222.__isset.contexts = true;
  tmp222.description = "Time (ms) spent resolving request request pools.";
  tmp222.__isset.description = true;
  tmp222.key = "request_pool_service.resolve_pool_duration_ms";
  tmp222.__isset.key = true;
  tmp222.kind = ( ::palo::TMetricKind::type)3;
  tmp222.__isset.kind = true;
  tmp222.label = "Request Pool Service Resolve Pool Duration Ms";
  tmp222.__isset.label = true;
  tmp222.units = ( ::palo::TUnit::type)8;
  tmp222.__isset.units = true;

  TMetricDefs.insert(std::make_pair("request_pool_service.resolve_pool_duration_ms", tmp222));
  TMetricDef tmp224;
  std::vector<std::string>  tmp225;
  tmp225.push_back("CATALOGSERVER");
  tmp225.push_back("STATESTORE");
  tmp225.push_back("PALO BE");

  tmp224.contexts = tmp225;
  tmp224.__isset.contexts = true;
  tmp224.description = "Duration (ms) of RPC calls to $0";
  tmp224.__isset.description = true;
  tmp224.key = "rpc_method.$0.call_duration";
  tmp224.__isset.key = true;
  tmp224.kind = ( ::palo::TMetricKind::type)5;
  tmp224.__isset.kind = true;
  tmp224.label = "$0 RPC Call Duration";
  tmp224.__isset.label = true;
  tmp224.units = ( ::palo::TUnit::type)8;
  tmp224.__isset.units = true;

  TMetricDefs.insert(std::make_pair("rpc_method.$0.call_duration", tmp224));
  TMetricDef tmp226;
  std::vector<std::string>  tmp227;
  tmp227.push_back("PALO BE");

  tmp226.contexts = tmp227;
  tmp226.__isset.contexts = true;
  tmp226.description = "Number of senders waiting for receiving fragment to initialize";
  tmp226.__isset.description = true;
  tmp226.key = "senders_blocked_on_recvr_creation";
  tmp226.__isset.key = true;
  tmp226.kind = ( ::palo::TMetricKind::type)0;
  tmp226.__isset.kind = true;
  tmp226.label = "Number of senders waiting for receiving fragment to initialize.";
  tmp226.__isset.label = true;
  tmp226.units = ( ::palo::TUnit::type)7;
  tmp226.__isset.units = true;

  TMetricDefs.insert(std::make_pair("senders_blocked_on_recvr_creation", tmp226));
  TMetricDef tmp228;
  std::vector<std::string>  tmp229;
  tmp229.push_back("PALO BE");

  tmp228.contexts = tmp229;
  tmp228.__isset.contexts = true;
  tmp228.description = "The number of assignments";
  tmp228.__isset.description = true;
  tmp228.key = "simple_scheduler.assignments.total";
  tmp228.__isset.key = true;
  tmp228.kind = ( ::palo::TMetricKind::type)1;
  tmp228.__isset.kind = true;
  tmp228.label = "Assignments";
  tmp228.__isset.label = true;
  tmp228.units = ( ::palo::TUnit::type)0;
  tmp228.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple_scheduler.assignments.total", tmp228));
  TMetricDef tmp230;
  std::vector<std::string>  tmp231;
  tmp231.push_back("PALO BE");

  tmp230.contexts = tmp231;
  tmp230.__isset.contexts = true;
  tmp230.description = "Indicates whether the scheduler has been initialized.";
  tmp230.__isset.description = true;
  tmp230.key = "simple_scheduler.initialized";
  tmp230.__isset.key = true;
  tmp230.kind = ( ::palo::TMetricKind::type)2;
  tmp230.__isset.kind = true;
  tmp230.label = "Simple Scheduler Initialized";
  tmp230.__isset.label = true;
  tmp230.units = ( ::palo::TUnit::type)7;
  tmp230.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple_scheduler.initialized", tmp230));
  TMetricDef tmp232;
  std::vector<std::string>  tmp233;
  tmp233.push_back("PALO BE");

  tmp232.contexts = tmp233;
  tmp232.__isset.contexts = true;
  tmp232.description = "Number of assignments operating on local data";
  tmp232.__isset.description = true;
  tmp232.key = "simple_scheduler.local_assignments.total";
  tmp232.__isset.key = true;
  tmp232.kind = ( ::palo::TMetricKind::type)1;
  tmp232.__isset.kind = true;
  tmp232.label = "Local Assignments";
  tmp232.__isset.label = true;
  tmp232.units = ( ::palo::TUnit::type)0;
  tmp232.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple_scheduler.local_assignments.total", tmp232));
  TMetricDef tmp234;
  std::vector<std::string>  tmp235;
  tmp235.push_back("PALO BE");

  tmp234.contexts = tmp235;
  tmp234.__isset.contexts = true;
  tmp234.description = "The number of backend connections from this Impala Daemon to other Impala Daemons.";
  tmp234.__isset.description = true;
  tmp234.key = "simple_scheduler.num_backends";
  tmp234.__isset.key = true;
  tmp234.kind = ( ::palo::TMetricKind::type)0;
  tmp234.__isset.kind = true;
  tmp234.label = "Backend Connections";
  tmp234.__isset.label = true;
  tmp234.units = ( ::palo::TUnit::type)7;
  tmp234.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple_scheduler.num_backends", tmp234));
  TMetricDef tmp236;
  std::vector<std::string>  tmp237;
  tmp237.push_back("CATALOGSERVER");
  tmp237.push_back("PALO BE");

  tmp236.contexts = tmp237;
  tmp236.__isset.contexts = true;
  tmp236.description = "Whether the Impala Daemon considers itself connected to the StateStore.";
  tmp236.__isset.description = true;
  tmp236.key = "statestore_subscriber.connected";
  tmp236.__isset.key = true;
  tmp236.kind = ( ::palo::TMetricKind::type)2;
  tmp236.__isset.kind = true;
  tmp236.label = "StateStore Connectivity";
  tmp236.__isset.label = true;
  tmp236.units = ( ::palo::TUnit::type)7;
  tmp236.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.connected", tmp236));
  TMetricDef tmp238;
  std::vector<std::string>  tmp239;
  tmp239.push_back("CATALOGSERVER");
  tmp239.push_back("PALO BE");

  tmp238.contexts = tmp239;
  tmp238.__isset.contexts = true;
  tmp238.description = "The time (sec) between Statestore heartbeats.";
  tmp238.__isset.description = true;
  tmp238.key = "statestore_subscriber.heartbeat_interval_time";
  tmp238.__isset.key = true;
  tmp238.kind = ( ::palo::TMetricKind::type)3;
  tmp238.__isset.kind = true;
  tmp238.label = "Statestore Subscriber Heartbeat Interval Time";
  tmp238.__isset.label = true;
  tmp238.units = ( ::palo::TUnit::type)9;
  tmp238.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.heartbeat_interval_time", tmp238));
  TMetricDef tmp240;
  std::vector<std::string>  tmp241;
  tmp241.push_back("CATALOGSERVER");
  tmp241.push_back("PALO BE");

  tmp240.contexts = tmp241;
  tmp240.__isset.contexts = true;
  tmp240.description = "The amount of time the StateStore subscriber took to recover the connection the last time it was lost.";
  tmp240.__isset.description = true;
  tmp240.key = "statestore_subscriber.last_recovery_duration";
  tmp240.__isset.key = true;
  tmp240.kind = ( ::palo::TMetricKind::type)0;
  tmp240.__isset.kind = true;
  tmp240.label = "StateStore Subscriber Last Recovery Duration";
  tmp240.__isset.label = true;
  tmp240.units = ( ::palo::TUnit::type)7;
  tmp240.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.last_recovery_duration", tmp240));
  TMetricDef tmp242;
  std::vector<std::string>  tmp243;
  tmp243.push_back("CATALOGSERVER");
  tmp243.push_back("PALO BE");

  tmp242.contexts = tmp243;
  tmp242.__isset.contexts = true;
  tmp242.description = "The local time that the last statestore recovery happened.";
  tmp242.__isset.description = true;
  tmp242.key = "statestore_subscriber.last_recovery_time";
  tmp242.__isset.key = true;
  tmp242.kind = ( ::palo::TMetricKind::type)2;
  tmp242.__isset.kind = true;
  tmp242.label = "Statestore Subscriber Last Recovery Time";
  tmp242.__isset.label = true;
  tmp242.units = ( ::palo::TUnit::type)7;
  tmp242.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.last_recovery_time", tmp242));
  TMetricDef tmp244;
  std::vector<std::string>  tmp245;
  tmp245.push_back("CATALOGSERVER");
  tmp245.push_back("PALO BE");

  tmp244.contexts = tmp245;
  tmp244.__isset.contexts = true;
  tmp244.description = "The most recent registration ID for this subscriber with the statestore. Set to 'N/A' if no registration has been completed";
  tmp244.__isset.description = true;
  tmp244.key = "statestore_subscriber.registration_id";
  tmp244.__isset.key = true;
  tmp244.kind = ( ::palo::TMetricKind::type)2;
  tmp244.__isset.kind = true;
  tmp244.label = "Statestore Subscriber Registration Id";
  tmp244.__isset.label = true;
  tmp244.units = ( ::palo::TUnit::type)7;
  tmp244.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.registration_id", tmp244));
  TMetricDef tmp246;
  std::vector<std::string>  tmp247;
  tmp247.push_back("CATALOGSERVER");
  tmp247.push_back("PALO BE");

  tmp246.contexts = tmp247;
  tmp246.__isset.contexts = true;
  tmp246.description = "The number of active StateStore subscriber clients in this Impala Daemon's client cache. These clients are for communication from this role to the StateStore.";
  tmp246.__isset.description = true;
  tmp246.key = "statestore_subscriber.statestore.client_cache.clients_in_use";
  tmp246.__isset.key = true;
  tmp246.kind = ( ::palo::TMetricKind::type)0;
  tmp246.__isset.kind = true;
  tmp246.label = "StateStore Subscriber Active Clients";
  tmp246.__isset.label = true;
  tmp246.units = ( ::palo::TUnit::type)7;
  tmp246.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.statestore.client_cache.clients_in_use", tmp246));
  TMetricDef tmp248;
  std::vector<std::string>  tmp249;
  tmp249.push_back("CATALOGSERVER");
  tmp249.push_back("PALO BE");

  tmp248.contexts = tmp249;
  tmp248.__isset.contexts = true;
  tmp248.description = "The total number of StateStore subscriber clients in this Impala Daemon's client cache. These clients are for communication from this role to the StateStore.";
  tmp248.__isset.description = true;
  tmp248.key = "statestore_subscriber.statestore.client_cache.total_clients";
  tmp248.__isset.key = true;
  tmp248.kind = ( ::palo::TMetricKind::type)0;
  tmp248.__isset.kind = true;
  tmp248.label = "StateStore Subscriber Total Clients";
  tmp248.__isset.label = true;
  tmp248.units = ( ::palo::TUnit::type)7;
  tmp248.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.statestore.client_cache.total_clients", tmp248));
  TMetricDef tmp250;
  std::vector<std::string>  tmp251;
  tmp251.push_back("CATALOGSERVER");
  tmp251.push_back("PALO BE");

  tmp250.contexts = tmp251;
  tmp250.__isset.contexts = true;
  tmp250.description = "Statestore Subscriber Topic $0 Processing Time";
  tmp250.__isset.description = true;
  tmp250.key = "statestore_subscriber.topic_$0.processing_time_s";
  tmp250.__isset.key = true;
  tmp250.kind = ( ::palo::TMetricKind::type)3;
  tmp250.__isset.kind = true;
  tmp250.label = "Statestore Subscriber Topic $0 Processing Time";
  tmp250.__isset.label = true;
  tmp250.units = ( ::palo::TUnit::type)9;
  tmp250.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.topic_$0.processing_time_s", tmp250));
  TMetricDef tmp252;
  std::vector<std::string>  tmp253;
  tmp253.push_back("CATALOGSERVER");
  tmp253.push_back("PALO BE");

  tmp252.contexts = tmp253;
  tmp252.__isset.contexts = true;
  tmp252.description = "The time (sec) taken to process Statestore subcriber topic updates.";
  tmp252.__isset.description = true;
  tmp252.key = "statestore_subscriber.topic_update_duration";
  tmp252.__isset.key = true;
  tmp252.kind = ( ::palo::TMetricKind::type)3;
  tmp252.__isset.kind = true;
  tmp252.label = "Statestore Subscriber Topic Update Duration";
  tmp252.__isset.label = true;
  tmp252.units = ( ::palo::TUnit::type)9;
  tmp252.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.topic_update_duration", tmp252));
  TMetricDef tmp254;
  std::vector<std::string>  tmp255;
  tmp255.push_back("CATALOGSERVER");
  tmp255.push_back("PALO BE");

  tmp254.contexts = tmp255;
  tmp254.__isset.contexts = true;
  tmp254.description = "The time (sec) between Statestore subscriber topic updates.";
  tmp254.__isset.description = true;
  tmp254.key = "statestore_subscriber.topic_update_interval_time";
  tmp254.__isset.key = true;
  tmp254.kind = ( ::palo::TMetricKind::type)3;
  tmp254.__isset.kind = true;
  tmp254.label = "Statestore Subscriber Topic Update Interval Time";
  tmp254.__isset.label = true;
  tmp254.units = ( ::palo::TUnit::type)9;
  tmp254.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore_subscriber.topic_update_interval_time", tmp254));
  TMetricDef tmp256;
  std::vector<std::string>  tmp257;
  tmp257.push_back("STATESTORE");

  tmp256.contexts = tmp257;
  tmp256.__isset.contexts = true;
  tmp256.description = "The time (sec) spent sending heartbeat RPCs. Includes subscriber_side processing time and network transmission time.";
  tmp256.__isset.description = true;
  tmp256.key = "statestore.heartbeat_durations";
  tmp256.__isset.key = true;
  tmp256.kind = ( ::palo::TMetricKind::type)3;
  tmp256.__isset.kind = true;
  tmp256.label = "Statestore Heartbeat Durations";
  tmp256.__isset.label = true;
  tmp256.units = ( ::palo::TUnit::type)9;
  tmp256.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.heartbeat_durations", tmp256));
  TMetricDef tmp258;
  std::vector<std::string>  tmp259;
  tmp259.push_back("STATESTORE");

  tmp258.contexts = tmp259;
  tmp258.__isset.contexts = true;
  tmp258.description = "The number of registered Statestore subscribers.";
  tmp258.__isset.description = true;
  tmp258.key = "statestore.live_backends";
  tmp258.__isset.key = true;
  tmp258.kind = ( ::palo::TMetricKind::type)0;
  tmp258.__isset.kind = true;
  tmp258.label = "Statestore Live Backends";
  tmp258.__isset.label = true;
  tmp258.units = ( ::palo::TUnit::type)7;
  tmp258.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.live_backends", tmp258));
  TMetricDef tmp260;
  std::vector<std::string>  tmp261;
  tmp261.push_back("STATESTORE");

  tmp260.contexts = tmp261;
  tmp260.__isset.contexts = true;
  tmp260.description = "The set of all live Statestore subscribers.";
  tmp260.__isset.description = true;
  tmp260.key = "statestore.live_backends.list";
  tmp260.__isset.key = true;
  tmp260.kind = ( ::palo::TMetricKind::type)4;
  tmp260.__isset.kind = true;
  tmp260.label = "Statestore Live Backends List";
  tmp260.__isset.label = true;
  tmp260.units = ( ::palo::TUnit::type)7;
  tmp260.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.live_backends.list", tmp260));
  TMetricDef tmp262;
  std::vector<std::string>  tmp263;
  tmp263.push_back("STATESTORE");

  tmp262.contexts = tmp263;
  tmp262.__isset.contexts = true;
  tmp262.description = "The time (sec) spent sending topic update RPCs. Includes subscriber_side processing time and network transmission time.";
  tmp262.__isset.description = true;
  tmp262.key = "statestore.topic_update_durations";
  tmp262.__isset.key = true;
  tmp262.kind = ( ::palo::TMetricKind::type)3;
  tmp262.__isset.kind = true;
  tmp262.label = "Statestore Topic Update Durations";
  tmp262.__isset.label = true;
  tmp262.units = ( ::palo::TUnit::type)9;
  tmp262.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.topic_update_durations", tmp262));
  TMetricDef tmp264;
  std::vector<std::string>  tmp265;
  tmp265.push_back("STATESTORE");

  tmp264.contexts = tmp265;
  tmp264.__isset.contexts = true;
  tmp264.description = "The sum of the size of all keys for all topics tracked by the StateStore.";
  tmp264.__isset.description = true;
  tmp264.key = "statestore.total_key_size_bytes";
  tmp264.__isset.key = true;
  tmp264.kind = ( ::palo::TMetricKind::type)0;
  tmp264.__isset.kind = true;
  tmp264.label = "Topic Key Size";
  tmp264.__isset.label = true;
  tmp264.units = ( ::palo::TUnit::type)7;
  tmp264.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.total_key_size_bytes", tmp264));
  TMetricDef tmp266;
  std::vector<std::string>  tmp267;
  tmp267.push_back("STATESTORE");

  tmp266.contexts = tmp267;
  tmp266.__isset.contexts = true;
  tmp266.description = "The sum of the size of all keys and all values for all topics tracked by the StateStore.";
  tmp266.__isset.description = true;
  tmp266.key = "statestore.total_topic_size_bytes";
  tmp266.__isset.key = true;
  tmp266.kind = ( ::palo::TMetricKind::type)0;
  tmp266.__isset.kind = true;
  tmp266.label = "Topic Size";
  tmp266.__isset.label = true;
  tmp266.units = ( ::palo::TUnit::type)7;
  tmp266.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.total_topic_size_bytes", tmp266));
  TMetricDef tmp268;
  std::vector<std::string>  tmp269;
  tmp269.push_back("STATESTORE");

  tmp268.contexts = tmp269;
  tmp268.__isset.contexts = true;
  tmp268.description = "The sum of the size of all values for all topics tracked by the StateStore.";
  tmp268.__isset.description = true;
  tmp268.key = "statestore.total_value_size_bytes";
  tmp268.__isset.key = true;
  tmp268.kind = ( ::palo::TMetricKind::type)0;
  tmp268.__isset.kind = true;
  tmp268.label = "Topic Value Size";
  tmp268.__isset.label = true;
  tmp268.units = ( ::palo::TUnit::type)7;
  tmp268.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.total_value_size_bytes", tmp268));
  TMetricDef tmp270;
  std::vector<std::string>  tmp271;
  tmp271.push_back("STATESTORE");

  tmp270.contexts = tmp271;
  tmp270.__isset.contexts = true;
  tmp270.description = "The full version string of the Statestore Server.";
  tmp270.__isset.description = true;
  tmp270.key = "statestore.version";
  tmp270.__isset.key = true;
  tmp270.kind = ( ::palo::TMetricKind::type)2;
  tmp270.__isset.kind = true;
  tmp270.label = "Statestore Version";
  tmp270.__isset.label = true;
  tmp270.units = ( ::palo::TUnit::type)7;
  tmp270.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.version", tmp270));
  TMetricDef tmp272;
  std::vector<std::string>  tmp273;
  tmp273.push_back("STATESTORE");

  tmp272.contexts = tmp273;
  tmp272.__isset.contexts = true;
  tmp272.description = "The number of clients in use by the Statestore heartbeat client cache.";
  tmp272.__isset.description = true;
  tmp272.key = "subscriber_heartbeat.client_cache.clients_in_use";
  tmp272.__isset.key = true;
  tmp272.kind = ( ::palo::TMetricKind::type)0;
  tmp272.__isset.kind = true;
  tmp272.label = "Subscriber Heartbeat Client Cache Clients In Use";
  tmp272.__isset.label = true;
  tmp272.units = ( ::palo::TUnit::type)7;
  tmp272.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber_heartbeat.client_cache.clients_in_use", tmp272));
  TMetricDef tmp274;
  std::vector<std::string>  tmp275;
  tmp275.push_back("STATESTORE");

  tmp274.contexts = tmp275;
  tmp274.__isset.contexts = true;
  tmp274.description = "The total number of clients in the Statestore heartbeat client cache.";
  tmp274.__isset.description = true;
  tmp274.key = "subscriber_heartbeat.client_cache.total_clients";
  tmp274.__isset.key = true;
  tmp274.kind = ( ::palo::TMetricKind::type)0;
  tmp274.__isset.kind = true;
  tmp274.label = "Subscriber Heartbeat Client Cache Total Clients";
  tmp274.__isset.label = true;
  tmp274.units = ( ::palo::TUnit::type)7;
  tmp274.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber_heartbeat.client_cache.total_clients", tmp274));
  TMetricDef tmp276;
  std::vector<std::string>  tmp277;
  tmp277.push_back("STATESTORE");

  tmp276.contexts = tmp277;
  tmp276.__isset.contexts = true;
  tmp276.description = "The number of clients in use by the Statestore update state client cache.";
  tmp276.__isset.description = true;
  tmp276.key = "subscriber_update_state.client_cache.clients_in_use";
  tmp276.__isset.key = true;
  tmp276.kind = ( ::palo::TMetricKind::type)0;
  tmp276.__isset.kind = true;
  tmp276.label = "Subscriber Update State Client Cache Clients In Use";
  tmp276.__isset.label = true;
  tmp276.units = ( ::palo::TUnit::type)7;
  tmp276.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber_update_state.client_cache.clients_in_use", tmp276));
  TMetricDef tmp278;
  std::vector<std::string>  tmp279;
  tmp279.push_back("STATESTORE");

  tmp278.contexts = tmp279;
  tmp278.__isset.contexts = true;
  tmp278.description = "The total number of clients in the Statestore update state client cache.";
  tmp278.__isset.description = true;
  tmp278.key = "subscriber_update_state.client_cache.total_clients";
  tmp278.__isset.key = true;
  tmp278.kind = ( ::palo::TMetricKind::type)0;
  tmp278.__isset.kind = true;
  tmp278.label = "Subscriber Update State Client Cache Total Clients";
  tmp278.__isset.label = true;
  tmp278.units = ( ::palo::TUnit::type)7;
  tmp278.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber_update_state.client_cache.total_clients", tmp278));
  TMetricDef tmp280;
  std::vector<std::string>  tmp281;
  tmp281.push_back("STATESTORE");
  tmp281.push_back("CATALOGSERVER");
  tmp281.push_back("PALO BE");

  tmp280.contexts = tmp281;
  tmp280.__isset.contexts = true;
  tmp280.description = "Number of bytes used by the application. This will not typically match the memory use reported by the OS, because it does not include TCMalloc overhead or memory fragmentation.";
  tmp280.__isset.description = true;
  tmp280.key = "tcmalloc.bytes_in_use";
  tmp280.__isset.key = true;
  tmp280.kind = ( ::palo::TMetricKind::type)0;
  tmp280.__isset.kind = true;
  tmp280.label = "TCMalloc Bytes in Use";
  tmp280.__isset.label = true;
  tmp280.units = ( ::palo::TUnit::type)3;
  tmp280.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.bytes_in_use", tmp280));
  TMetricDef tmp282;
  std::vector<std::string>  tmp283;
  tmp283.push_back("STATESTORE");
  tmp283.push_back("CATALOGSERVER");
  tmp283.push_back("PALO BE");

  tmp282.contexts = tmp283;
  tmp282.__isset.contexts = true;
  tmp282.description = "Number of bytes in free, mapped pages in page heap. These bytes can be used to fulfill allocation requests. They always count towards virtual memory usage, and unless the underlying memory is swapped out by the OS, they also count towards physical memory usage.";
  tmp282.__isset.description = true;
  tmp282.key = "tcmalloc.pageheap_free_bytes";
  tmp282.__isset.key = true;
  tmp282.kind = ( ::palo::TMetricKind::type)0;
  tmp282.__isset.kind = true;
  tmp282.label = "TCMalloc Pageheap Free";
  tmp282.__isset.label = true;
  tmp282.units = ( ::palo::TUnit::type)3;
  tmp282.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.pageheap_free_bytes", tmp282));
  TMetricDef tmp284;
  std::vector<std::string>  tmp285;
  tmp285.push_back("STATESTORE");
  tmp285.push_back("CATALOGSERVER");
  tmp285.push_back("PALO BE");

  tmp284.contexts = tmp285;
  tmp284.__isset.contexts = true;
  tmp284.description = "Number of bytes in free, unmapped pages in page heap. These are bytes that have been released back to the OS, possibly by one of the MallocExtension \"Release\" calls. They can be used to fulfill allocation requests, but typically incur a page fault. They always count towards virtual memory usage, and depending on the OS, typically do not count towards physical memory usage.";
  tmp284.__isset.description = true;
  tmp284.key = "tcmalloc.pageheap_unmapped_bytes";
  tmp284.__isset.key = true;
  tmp284.kind = ( ::palo::TMetricKind::type)0;
  tmp284.__isset.kind = true;
  tmp284.label = "TCMalloc Pageheap Unmapped";
  tmp284.__isset.label = true;
  tmp284.units = ( ::palo::TUnit::type)3;
  tmp284.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.pageheap_unmapped_bytes", tmp284));
  TMetricDef tmp286;
  std::vector<std::string>  tmp287;
  tmp287.push_back("STATESTORE");
  tmp287.push_back("CATALOGSERVER");
  tmp287.push_back("PALO BE");

  tmp286.contexts = tmp287;
  tmp286.__isset.contexts = true;
  tmp286.description = "Derived metric computing the amount of physical memory (in bytes) used by the process, including that actually in use and free bytes reserved by tcmalloc. Does not include the tcmalloc metadata.";
  tmp286.__isset.description = true;
  tmp286.key = "tcmalloc.physical_bytes_reserved";
  tmp286.__isset.key = true;
  tmp286.kind = ( ::palo::TMetricKind::type)0;
  tmp286.__isset.kind = true;
  tmp286.label = "TCMalloc Physical Bytes Reserved";
  tmp286.__isset.label = true;
  tmp286.units = ( ::palo::TUnit::type)3;
  tmp286.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.physical_bytes_reserved", tmp286));
  TMetricDef tmp288;
  std::vector<std::string>  tmp289;
  tmp289.push_back("STATESTORE");
  tmp289.push_back("CATALOGSERVER");
  tmp289.push_back("PALO BE");

  tmp288.contexts = tmp289;
  tmp288.__isset.contexts = true;
  tmp288.description = "Bytes of system memory reserved by TCMalloc.";
  tmp288.__isset.description = true;
  tmp288.key = "tcmalloc.total_bytes_reserved";
  tmp288.__isset.key = true;
  tmp288.kind = ( ::palo::TMetricKind::type)0;
  tmp288.__isset.kind = true;
  tmp288.label = "TCMalloc Total Bytes Reserved";
  tmp288.__isset.label = true;
  tmp288.units = ( ::palo::TUnit::type)3;
  tmp288.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.total_bytes_reserved", tmp288));
  TMetricDef tmp290;
  std::vector<std::string>  tmp291;
  tmp291.push_back("STATESTORE");
  tmp291.push_back("CATALOGSERVER");
  tmp291.push_back("PALO BE");

  tmp290.contexts = tmp291;
  tmp290.__isset.contexts = true;
  tmp290.description = "The number of running threads in this process.";
  tmp290.__isset.description = true;
  tmp290.key = "thread_manager.running_threads";
  tmp290.__isset.key = true;
  tmp290.kind = ( ::palo::TMetricKind::type)0;
  tmp290.__isset.kind = true;
  tmp290.label = "Running Threads";
  tmp290.__isset.label = true;
  tmp290.units = ( ::palo::TUnit::type)7;
  tmp290.__isset.units = true;

  TMetricDefs.insert(std::make_pair("thread_manager.running_threads", tmp290));
  TMetricDef tmp292;
  std::vector<std::string>  tmp293;
  tmp293.push_back("STATESTORE");
  tmp293.push_back("CATALOGSERVER");
  tmp293.push_back("PALO BE");

  tmp292.contexts = tmp293;
  tmp292.__isset.contexts = true;
  tmp292.description = "Threads created over the lifetime of the process.";
  tmp292.__isset.description = true;
  tmp292.key = "thread_manager.total_threads_created";
  tmp292.__isset.key = true;
  tmp292.kind = ( ::palo::TMetricKind::type)0;
  tmp292.__isset.kind = true;
  tmp292.label = "Threads Created";
  tmp292.__isset.label = true;
  tmp292.units = ( ::palo::TUnit::type)7;
  tmp292.__isset.units = true;

  TMetricDefs.insert(std::make_pair("thread_manager.total_threads_created", tmp292));
  TMetricDef tmp294;
  std::vector<std::string>  tmp295;
  tmp295.push_back("PALO BE");

  tmp294.contexts = tmp295;
  tmp294.__isset.contexts = true;
  tmp294.description = "The number of active scratch directories for spilling to disk.";
  tmp294.__isset.description = true;
  tmp294.key = "tmp_file_mgr.active_scratch_dirs";
  tmp294.__isset.key = true;
  tmp294.kind = ( ::palo::TMetricKind::type)0;
  tmp294.__isset.kind = true;
  tmp294.label = "Active scratch directories";
  tmp294.__isset.label = true;
  tmp294.units = ( ::palo::TUnit::type)7;
  tmp294.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp_file_mgr.active_scratch_dirs", tmp294));
  TMetricDef tmp296;
  std::vector<std::string>  tmp297;
  tmp297.push_back("PALO BE");

  tmp296.contexts = tmp297;
  tmp296.__isset.contexts = true;
  tmp296.description = "The set of all active scratch directories for spilling to disk.";
  tmp296.__isset.description = true;
  tmp296.key = "tmp_file_mgr.active_scratch_dirs.list";
  tmp296.__isset.key = true;
  tmp296.kind = ( ::palo::TMetricKind::type)4;
  tmp296.__isset.kind = true;
  tmp296.label = "Active scratch directories list";
  tmp296.__isset.label = true;
  tmp296.units = ( ::palo::TUnit::type)7;
  tmp296.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp_file_mgr.active_scratch_dirs.list", tmp296));
  TMetricDef tmp298;
  std::vector<std::string>  tmp299;
  tmp299.push_back("PALO BE");

  tmp298.contexts = tmp299;
  tmp298.__isset.contexts = true;
  tmp298.description = "Total number of senders that have been blocked waiting for receiving fragment to initialize.";
  tmp298.__isset.description = true;
  tmp298.key = "total_senders_blocked_on_recvr_creation";
  tmp298.__isset.key = true;
  tmp298.kind = ( ::palo::TMetricKind::type)1;
  tmp298.__isset.kind = true;
  tmp298.label = "Total senders waiting for receiving fragment to initialize";
  tmp298.__isset.label = true;
  tmp298.units = ( ::palo::TUnit::type)7;
  tmp298.__isset.units = true;

  TMetricDefs.insert(std::make_pair("total_senders_blocked_on_recvr_creation", tmp298));
  TMetricDef tmp300;
  std::vector<std::string>  tmp301;
  tmp301.push_back("PALO BE");

  tmp300.contexts = tmp301;
  tmp300.__isset.contexts = true;
  tmp300.description = "Total number of senders that timed_out waiting for receiving fragment to initialize.";
  tmp300.__isset.description = true;
  tmp300.key = "total_senders_timedout_waiting_for_recvr_creation";
  tmp300.__isset.key = true;
  tmp300.kind = ( ::palo::TMetricKind::type)1;
  tmp300.__isset.kind = true;
  tmp300.label = "Total senders timed_out waiting for receiving fragment to initialize";
  tmp300.__isset.label = true;
  tmp300.units = ( ::palo::TUnit::type)7;
  tmp300.__isset.units = true;

  TMetricDefs.insert(std::make_pair("total_senders_timedout_waiting_for_recvr_creation", tmp300));

}

} // namespace

