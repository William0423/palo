/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Data_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace palo {


TRowBatch::~TRowBatch() throw() {
}


void TRowBatch::__set_num_rows(const int32_t val) {
  this->num_rows = val;
}

void TRowBatch::__set_row_tuples(const std::vector< ::palo::TTupleId> & val) {
  this->row_tuples = val;
}

void TRowBatch::__set_tuple_offsets(const std::vector<int32_t> & val) {
  this->tuple_offsets = val;
}

void TRowBatch::__set_tuple_data(const std::string& val) {
  this->tuple_data = val;
}

void TRowBatch::__set_is_compressed(const bool val) {
  this->is_compressed = val;
}

void TRowBatch::__set_be_number(const int32_t val) {
  this->be_number = val;
}

void TRowBatch::__set_packet_seq(const int64_t val) {
  this->packet_seq = val;
}

uint32_t TRowBatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_num_rows = false;
  bool isset_row_tuples = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_rows);
          isset_num_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->row_tuples.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->row_tuples.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->row_tuples[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_row_tuples = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tuple_offsets.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->tuple_offsets.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->tuple_offsets[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tuple_offsets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tuple_data);
          this->__isset.tuple_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_compressed);
          this->__isset.is_compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->be_number);
          this->__isset.be_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packet_seq);
          this->__isset.packet_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_num_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_row_tuples)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRowBatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRowBatch");

  xfer += oprot->writeFieldBegin("num_rows", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_rows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_tuples", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->row_tuples.size()));
    std::vector< ::palo::TTupleId> ::const_iterator _iter10;
    for (_iter10 = this->row_tuples.begin(); _iter10 != this->row_tuples.end(); ++_iter10)
    {
      xfer += oprot->writeI32((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tuple_offsets", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->tuple_offsets.size()));
    std::vector<int32_t> ::const_iterator _iter11;
    for (_iter11 = this->tuple_offsets.begin(); _iter11 != this->tuple_offsets.end(); ++_iter11)
    {
      xfer += oprot->writeI32((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tuple_data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tuple_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_compressed", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->is_compressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("be_number", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->be_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packet_seq", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->packet_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRowBatch &a, TRowBatch &b) {
  using ::std::swap;
  swap(a.num_rows, b.num_rows);
  swap(a.row_tuples, b.row_tuples);
  swap(a.tuple_offsets, b.tuple_offsets);
  swap(a.tuple_data, b.tuple_data);
  swap(a.is_compressed, b.is_compressed);
  swap(a.be_number, b.be_number);
  swap(a.packet_seq, b.packet_seq);
  swap(a.__isset, b.__isset);
}

TRowBatch::TRowBatch(const TRowBatch& other12) {
  num_rows = other12.num_rows;
  row_tuples = other12.row_tuples;
  tuple_offsets = other12.tuple_offsets;
  tuple_data = other12.tuple_data;
  is_compressed = other12.is_compressed;
  be_number = other12.be_number;
  packet_seq = other12.packet_seq;
  __isset = other12.__isset;
}
TRowBatch& TRowBatch::operator=(const TRowBatch& other13) {
  num_rows = other13.num_rows;
  row_tuples = other13.row_tuples;
  tuple_offsets = other13.tuple_offsets;
  tuple_data = other13.tuple_data;
  is_compressed = other13.is_compressed;
  be_number = other13.be_number;
  packet_seq = other13.packet_seq;
  __isset = other13.__isset;
  return *this;
}
void TRowBatch::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRowBatch(";
  out << "num_rows=" << to_string(num_rows);
  out << ", " << "row_tuples=" << to_string(row_tuples);
  out << ", " << "tuple_offsets=" << to_string(tuple_offsets);
  out << ", " << "tuple_data=" << to_string(tuple_data);
  out << ", " << "is_compressed=" << to_string(is_compressed);
  out << ", " << "be_number=" << to_string(be_number);
  out << ", " << "packet_seq=" << to_string(packet_seq);
  out << ")";
}


TColumnValue::~TColumnValue() throw() {
}


void TColumnValue::__set_boolVal(const bool val) {
  this->boolVal = val;
__isset.boolVal = true;
}

void TColumnValue::__set_intVal(const int32_t val) {
  this->intVal = val;
__isset.intVal = true;
}

void TColumnValue::__set_longVal(const int64_t val) {
  this->longVal = val;
__isset.longVal = true;
}

void TColumnValue::__set_doubleVal(const double val) {
  this->doubleVal = val;
__isset.doubleVal = true;
}

void TColumnValue::__set_stringVal(const std::string& val) {
  this->stringVal = val;
__isset.stringVal = true;
}

uint32_t TColumnValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolVal);
          this->__isset.boolVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intVal);
          this->__isset.intVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->longVal);
          this->__isset.longVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->doubleVal);
          this->__isset.doubleVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringVal);
          this->__isset.stringVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TColumnValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TColumnValue");

  if (this->__isset.boolVal) {
    xfer += oprot->writeFieldBegin("boolVal", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->boolVal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intVal) {
    xfer += oprot->writeFieldBegin("intVal", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->intVal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longVal) {
    xfer += oprot->writeFieldBegin("longVal", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->longVal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.doubleVal) {
    xfer += oprot->writeFieldBegin("doubleVal", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->doubleVal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringVal) {
    xfer += oprot->writeFieldBegin("stringVal", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->stringVal);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TColumnValue &a, TColumnValue &b) {
  using ::std::swap;
  swap(a.boolVal, b.boolVal);
  swap(a.intVal, b.intVal);
  swap(a.longVal, b.longVal);
  swap(a.doubleVal, b.doubleVal);
  swap(a.stringVal, b.stringVal);
  swap(a.__isset, b.__isset);
}

TColumnValue::TColumnValue(const TColumnValue& other14) {
  boolVal = other14.boolVal;
  intVal = other14.intVal;
  longVal = other14.longVal;
  doubleVal = other14.doubleVal;
  stringVal = other14.stringVal;
  __isset = other14.__isset;
}
TColumnValue& TColumnValue::operator=(const TColumnValue& other15) {
  boolVal = other15.boolVal;
  intVal = other15.intVal;
  longVal = other15.longVal;
  doubleVal = other15.doubleVal;
  stringVal = other15.stringVal;
  __isset = other15.__isset;
  return *this;
}
void TColumnValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumnValue(";
  out << "boolVal="; (__isset.boolVal ? (out << to_string(boolVal)) : (out << "<null>"));
  out << ", " << "intVal="; (__isset.intVal ? (out << to_string(intVal)) : (out << "<null>"));
  out << ", " << "longVal="; (__isset.longVal ? (out << to_string(longVal)) : (out << "<null>"));
  out << ", " << "doubleVal="; (__isset.doubleVal ? (out << to_string(doubleVal)) : (out << "<null>"));
  out << ", " << "stringVal="; (__isset.stringVal ? (out << to_string(stringVal)) : (out << "<null>"));
  out << ")";
}


TResultRow::~TResultRow() throw() {
}


void TResultRow::__set_colVals(const std::vector<TColumnValue> & val) {
  this->colVals = val;
}

uint32_t TResultRow::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colVals.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->colVals.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->colVals[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.colVals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TResultRow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TResultRow");

  xfer += oprot->writeFieldBegin("colVals", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colVals.size()));
    std::vector<TColumnValue> ::const_iterator _iter21;
    for (_iter21 = this->colVals.begin(); _iter21 != this->colVals.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResultRow &a, TResultRow &b) {
  using ::std::swap;
  swap(a.colVals, b.colVals);
  swap(a.__isset, b.__isset);
}

TResultRow::TResultRow(const TResultRow& other22) {
  colVals = other22.colVals;
  __isset = other22.__isset;
}
TResultRow& TResultRow::operator=(const TResultRow& other23) {
  colVals = other23.colVals;
  __isset = other23.__isset;
  return *this;
}
void TResultRow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResultRow(";
  out << "colVals=" << to_string(colVals);
  out << ")";
}


TResultBatch::~TResultBatch() throw() {
}


void TResultBatch::__set_rows(const std::vector<std::string> & val) {
  this->rows = val;
}

void TResultBatch::__set_is_compressed(const bool val) {
  this->is_compressed = val;
}

void TResultBatch::__set_packet_seq(const int64_t val) {
  this->packet_seq = val;
}

uint32_t TResultBatch::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rows = false;
  bool isset_is_compressed = false;
  bool isset_packet_seq = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rows.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->rows.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readBinary(this->rows[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_compressed);
          isset_is_compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packet_seq);
          isset_packet_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_compressed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_packet_seq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResultBatch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TResultBatch");

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->rows.size()));
    std::vector<std::string> ::const_iterator _iter29;
    for (_iter29 = this->rows.begin(); _iter29 != this->rows.end(); ++_iter29)
    {
      xfer += oprot->writeBinary((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_compressed", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->is_compressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packet_seq", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->packet_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResultBatch &a, TResultBatch &b) {
  using ::std::swap;
  swap(a.rows, b.rows);
  swap(a.is_compressed, b.is_compressed);
  swap(a.packet_seq, b.packet_seq);
}

TResultBatch::TResultBatch(const TResultBatch& other30) {
  rows = other30.rows;
  is_compressed = other30.is_compressed;
  packet_seq = other30.packet_seq;
}
TResultBatch& TResultBatch::operator=(const TResultBatch& other31) {
  rows = other31.rows;
  is_compressed = other31.is_compressed;
  packet_seq = other31.packet_seq;
  return *this;
}
void TResultBatch::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResultBatch(";
  out << "rows=" << to_string(rows);
  out << ", " << "is_compressed=" << to_string(is_compressed);
  out << ", " << "packet_seq=" << to_string(packet_seq);
  out << ")";
}

} // namespace
