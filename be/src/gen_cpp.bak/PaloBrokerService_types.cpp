/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "PaloBrokerService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace palo {

int _kTBrokerOperationStatusCodeValues[] = {
  TBrokerOperationStatusCode::OK,
  TBrokerOperationStatusCode::END_OF_FILE,
  TBrokerOperationStatusCode::NOT_AUTHORIZED,
  TBrokerOperationStatusCode::DUPLICATE_REQUEST,
  TBrokerOperationStatusCode::INVALID_INPUT_OFFSET,
  TBrokerOperationStatusCode::INVALID_INPUT_FILE_PATH,
  TBrokerOperationStatusCode::INVALID_ARGUMENT,
  TBrokerOperationStatusCode::FILE_NOT_FOUND,
  TBrokerOperationStatusCode::TARGET_STORAGE_SERVICE_ERROR,
  TBrokerOperationStatusCode::OPERATION_NOT_SUPPORTED
};
const char* _kTBrokerOperationStatusCodeNames[] = {
  "OK",
  "END_OF_FILE",
  "NOT_AUTHORIZED",
  "DUPLICATE_REQUEST",
  "INVALID_INPUT_OFFSET",
  "INVALID_INPUT_FILE_PATH",
  "INVALID_ARGUMENT",
  "FILE_NOT_FOUND",
  "TARGET_STORAGE_SERVICE_ERROR",
  "OPERATION_NOT_SUPPORTED"
};
const std::map<int, const char*> _TBrokerOperationStatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kTBrokerOperationStatusCodeValues, _kTBrokerOperationStatusCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTBrokerVersionValues[] = {
  TBrokerVersion::VERSION_ONE
};
const char* _kTBrokerVersionNames[] = {
  "VERSION_ONE"
};
const std::map<int, const char*> _TBrokerVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTBrokerVersionValues, _kTBrokerVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTBrokerOpenModeValues[] = {
  TBrokerOpenMode::APPEND
};
const char* _kTBrokerOpenModeNames[] = {
  "APPEND"
};
const std::map<int, const char*> _TBrokerOpenMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTBrokerOpenModeValues, _kTBrokerOpenModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TBrokerOperationStatus::~TBrokerOperationStatus() throw() {
}


void TBrokerOperationStatus::__set_statusCode(const TBrokerOperationStatusCode::type val) {
  this->statusCode = val;
}

void TBrokerOperationStatus::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t TBrokerOperationStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_statusCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->statusCode = (TBrokerOperationStatusCode::type)ecast0;
          isset_statusCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_statusCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerOperationStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerOperationStatus");

  xfer += oprot->writeFieldBegin("statusCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->statusCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerOperationStatus &a, TBrokerOperationStatus &b) {
  using ::std::swap;
  swap(a.statusCode, b.statusCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

TBrokerOperationStatus::TBrokerOperationStatus(const TBrokerOperationStatus& other1) {
  statusCode = other1.statusCode;
  message = other1.message;
  __isset = other1.__isset;
}
TBrokerOperationStatus& TBrokerOperationStatus::operator=(const TBrokerOperationStatus& other2) {
  statusCode = other2.statusCode;
  message = other2.message;
  __isset = other2.__isset;
  return *this;
}
void TBrokerOperationStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerOperationStatus(";
  out << "statusCode=" << to_string(statusCode);
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


TBrokerFileStatus::~TBrokerFileStatus() throw() {
}


void TBrokerFileStatus::__set_path(const std::string& val) {
  this->path = val;
}

void TBrokerFileStatus::__set_isDir(const bool val) {
  this->isDir = val;
}

void TBrokerFileStatus::__set_size(const int64_t val) {
  this->size = val;
}

void TBrokerFileStatus::__set_isSplitable(const bool val) {
  this->isSplitable = val;
}

uint32_t TBrokerFileStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_path = false;
  bool isset_isDir = false;
  bool isset_size = false;
  bool isset_isSplitable = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDir);
          isset_isDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSplitable);
          isset_isSplitable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isDir)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isSplitable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerFileStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerFileStatus");

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isDir", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isDir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSplitable", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->isSplitable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerFileStatus &a, TBrokerFileStatus &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.isDir, b.isDir);
  swap(a.size, b.size);
  swap(a.isSplitable, b.isSplitable);
}

TBrokerFileStatus::TBrokerFileStatus(const TBrokerFileStatus& other3) {
  path = other3.path;
  isDir = other3.isDir;
  size = other3.size;
  isSplitable = other3.isSplitable;
}
TBrokerFileStatus& TBrokerFileStatus::operator=(const TBrokerFileStatus& other4) {
  path = other4.path;
  isDir = other4.isDir;
  size = other4.size;
  isSplitable = other4.isSplitable;
  return *this;
}
void TBrokerFileStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerFileStatus(";
  out << "path=" << to_string(path);
  out << ", " << "isDir=" << to_string(isDir);
  out << ", " << "size=" << to_string(size);
  out << ", " << "isSplitable=" << to_string(isSplitable);
  out << ")";
}


TBrokerFD::~TBrokerFD() throw() {
}


void TBrokerFD::__set_high(const int64_t val) {
  this->high = val;
}

void TBrokerFD::__set_low(const int64_t val) {
  this->low = val;
}

uint32_t TBrokerFD::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_high = false;
  bool isset_low = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->high);
          isset_high = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->low);
          isset_low = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_high)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_low)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerFD::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerFD");

  xfer += oprot->writeFieldBegin("high", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->high);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("low", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->low);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerFD &a, TBrokerFD &b) {
  using ::std::swap;
  swap(a.high, b.high);
  swap(a.low, b.low);
}

TBrokerFD::TBrokerFD(const TBrokerFD& other5) {
  high = other5.high;
  low = other5.low;
}
TBrokerFD& TBrokerFD::operator=(const TBrokerFD& other6) {
  high = other6.high;
  low = other6.low;
  return *this;
}
void TBrokerFD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerFD(";
  out << "high=" << to_string(high);
  out << ", " << "low=" << to_string(low);
  out << ")";
}


TBrokerListResponse::~TBrokerListResponse() throw() {
}


void TBrokerListResponse::__set_opStatus(const TBrokerOperationStatus& val) {
  this->opStatus = val;
}

void TBrokerListResponse::__set_files(const std::vector<TBrokerFileStatus> & val) {
  this->files = val;
__isset.files = true;
}

uint32_t TBrokerListResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_opStatus = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opStatus.read(iprot);
          isset_opStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->files.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->files.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->files[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_opStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerListResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerListResponse");

  xfer += oprot->writeFieldBegin("opStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->opStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.files) {
    xfer += oprot->writeFieldBegin("files", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->files.size()));
      std::vector<TBrokerFileStatus> ::const_iterator _iter12;
      for (_iter12 = this->files.begin(); _iter12 != this->files.end(); ++_iter12)
      {
        xfer += (*_iter12).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerListResponse &a, TBrokerListResponse &b) {
  using ::std::swap;
  swap(a.opStatus, b.opStatus);
  swap(a.files, b.files);
  swap(a.__isset, b.__isset);
}

TBrokerListResponse::TBrokerListResponse(const TBrokerListResponse& other13) {
  opStatus = other13.opStatus;
  files = other13.files;
  __isset = other13.__isset;
}
TBrokerListResponse& TBrokerListResponse::operator=(const TBrokerListResponse& other14) {
  opStatus = other14.opStatus;
  files = other14.files;
  __isset = other14.__isset;
  return *this;
}
void TBrokerListResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerListResponse(";
  out << "opStatus=" << to_string(opStatus);
  out << ", " << "files="; (__isset.files ? (out << to_string(files)) : (out << "<null>"));
  out << ")";
}


TBrokerOpenReaderResponse::~TBrokerOpenReaderResponse() throw() {
}


void TBrokerOpenReaderResponse::__set_opStatus(const TBrokerOperationStatus& val) {
  this->opStatus = val;
}

void TBrokerOpenReaderResponse::__set_fd(const TBrokerFD& val) {
  this->fd = val;
__isset.fd = true;
}

uint32_t TBrokerOpenReaderResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_opStatus = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opStatus.read(iprot);
          isset_opStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          this->__isset.fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_opStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerOpenReaderResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerOpenReaderResponse");

  xfer += oprot->writeFieldBegin("opStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->opStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fd) {
    xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->fd.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerOpenReaderResponse &a, TBrokerOpenReaderResponse &b) {
  using ::std::swap;
  swap(a.opStatus, b.opStatus);
  swap(a.fd, b.fd);
  swap(a.__isset, b.__isset);
}

TBrokerOpenReaderResponse::TBrokerOpenReaderResponse(const TBrokerOpenReaderResponse& other15) {
  opStatus = other15.opStatus;
  fd = other15.fd;
  __isset = other15.__isset;
}
TBrokerOpenReaderResponse& TBrokerOpenReaderResponse::operator=(const TBrokerOpenReaderResponse& other16) {
  opStatus = other16.opStatus;
  fd = other16.fd;
  __isset = other16.__isset;
  return *this;
}
void TBrokerOpenReaderResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerOpenReaderResponse(";
  out << "opStatus=" << to_string(opStatus);
  out << ", " << "fd="; (__isset.fd ? (out << to_string(fd)) : (out << "<null>"));
  out << ")";
}


TBrokerReadResponse::~TBrokerReadResponse() throw() {
}


void TBrokerReadResponse::__set_opStatus(const TBrokerOperationStatus& val) {
  this->opStatus = val;
}

void TBrokerReadResponse::__set_data(const std::string& val) {
  this->data = val;
__isset.data = true;
}

uint32_t TBrokerReadResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_opStatus = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opStatus.read(iprot);
          isset_opStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_opStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerReadResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerReadResponse");

  xfer += oprot->writeFieldBegin("opStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->opStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerReadResponse &a, TBrokerReadResponse &b) {
  using ::std::swap;
  swap(a.opStatus, b.opStatus);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TBrokerReadResponse::TBrokerReadResponse(const TBrokerReadResponse& other17) {
  opStatus = other17.opStatus;
  data = other17.data;
  __isset = other17.__isset;
}
TBrokerReadResponse& TBrokerReadResponse::operator=(const TBrokerReadResponse& other18) {
  opStatus = other18.opStatus;
  data = other18.data;
  __isset = other18.__isset;
  return *this;
}
void TBrokerReadResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerReadResponse(";
  out << "opStatus=" << to_string(opStatus);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TBrokerOpenWriterResponse::~TBrokerOpenWriterResponse() throw() {
}


void TBrokerOpenWriterResponse::__set_opStatus(const TBrokerOperationStatus& val) {
  this->opStatus = val;
}

void TBrokerOpenWriterResponse::__set_fd(const TBrokerFD& val) {
  this->fd = val;
__isset.fd = true;
}

uint32_t TBrokerOpenWriterResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_opStatus = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opStatus.read(iprot);
          isset_opStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          this->__isset.fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_opStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerOpenWriterResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerOpenWriterResponse");

  xfer += oprot->writeFieldBegin("opStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->opStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fd) {
    xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->fd.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerOpenWriterResponse &a, TBrokerOpenWriterResponse &b) {
  using ::std::swap;
  swap(a.opStatus, b.opStatus);
  swap(a.fd, b.fd);
  swap(a.__isset, b.__isset);
}

TBrokerOpenWriterResponse::TBrokerOpenWriterResponse(const TBrokerOpenWriterResponse& other19) {
  opStatus = other19.opStatus;
  fd = other19.fd;
  __isset = other19.__isset;
}
TBrokerOpenWriterResponse& TBrokerOpenWriterResponse::operator=(const TBrokerOpenWriterResponse& other20) {
  opStatus = other20.opStatus;
  fd = other20.fd;
  __isset = other20.__isset;
  return *this;
}
void TBrokerOpenWriterResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerOpenWriterResponse(";
  out << "opStatus=" << to_string(opStatus);
  out << ", " << "fd="; (__isset.fd ? (out << to_string(fd)) : (out << "<null>"));
  out << ")";
}


TBrokerCheckPathExistResponse::~TBrokerCheckPathExistResponse() throw() {
}


void TBrokerCheckPathExistResponse::__set_opStatus(const TBrokerOperationStatus& val) {
  this->opStatus = val;
}

void TBrokerCheckPathExistResponse::__set_isPathExist(const bool val) {
  this->isPathExist = val;
}

uint32_t TBrokerCheckPathExistResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_opStatus = false;
  bool isset_isPathExist = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opStatus.read(iprot);
          isset_opStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isPathExist);
          isset_isPathExist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_opStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isPathExist)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerCheckPathExistResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerCheckPathExistResponse");

  xfer += oprot->writeFieldBegin("opStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->opStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isPathExist", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isPathExist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerCheckPathExistResponse &a, TBrokerCheckPathExistResponse &b) {
  using ::std::swap;
  swap(a.opStatus, b.opStatus);
  swap(a.isPathExist, b.isPathExist);
}

TBrokerCheckPathExistResponse::TBrokerCheckPathExistResponse(const TBrokerCheckPathExistResponse& other21) {
  opStatus = other21.opStatus;
  isPathExist = other21.isPathExist;
}
TBrokerCheckPathExistResponse& TBrokerCheckPathExistResponse::operator=(const TBrokerCheckPathExistResponse& other22) {
  opStatus = other22.opStatus;
  isPathExist = other22.isPathExist;
  return *this;
}
void TBrokerCheckPathExistResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerCheckPathExistResponse(";
  out << "opStatus=" << to_string(opStatus);
  out << ", " << "isPathExist=" << to_string(isPathExist);
  out << ")";
}


TBrokerListPathRequest::~TBrokerListPathRequest() throw() {
}


void TBrokerListPathRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerListPathRequest::__set_path(const std::string& val) {
  this->path = val;
}

void TBrokerListPathRequest::__set_isRecursive(const bool val) {
  this->isRecursive = val;
}

void TBrokerListPathRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t TBrokerListPathRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_path = false;
  bool isset_isRecursive = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->version = (TBrokerVersion::type)ecast23;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isRecursive);
          isset_isRecursive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _ktype25;
            ::apache::thrift::protocol::TType _vtype26;
            xfer += iprot->readMapBegin(_ktype25, _vtype26, _size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              std::string _key29;
              xfer += iprot->readString(_key29);
              std::string& _val30 = this->properties[_key29];
              xfer += iprot->readString(_val30);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isRecursive)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerListPathRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerListPathRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isRecursive", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->isRecursive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter31;
    for (_iter31 = this->properties.begin(); _iter31 != this->properties.end(); ++_iter31)
    {
      xfer += oprot->writeString(_iter31->first);
      xfer += oprot->writeString(_iter31->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerListPathRequest &a, TBrokerListPathRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.path, b.path);
  swap(a.isRecursive, b.isRecursive);
  swap(a.properties, b.properties);
}

TBrokerListPathRequest::TBrokerListPathRequest(const TBrokerListPathRequest& other32) {
  version = other32.version;
  path = other32.path;
  isRecursive = other32.isRecursive;
  properties = other32.properties;
}
TBrokerListPathRequest& TBrokerListPathRequest::operator=(const TBrokerListPathRequest& other33) {
  version = other33.version;
  path = other33.path;
  isRecursive = other33.isRecursive;
  properties = other33.properties;
  return *this;
}
void TBrokerListPathRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerListPathRequest(";
  out << "version=" << to_string(version);
  out << ", " << "path=" << to_string(path);
  out << ", " << "isRecursive=" << to_string(isRecursive);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


TBrokerDeletePathRequest::~TBrokerDeletePathRequest() throw() {
}


void TBrokerDeletePathRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerDeletePathRequest::__set_path(const std::string& val) {
  this->path = val;
}

void TBrokerDeletePathRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t TBrokerDeletePathRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_path = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->version = (TBrokerVersion::type)ecast34;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _ktype36;
            ::apache::thrift::protocol::TType _vtype37;
            xfer += iprot->readMapBegin(_ktype36, _vtype37, _size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              std::string _key40;
              xfer += iprot->readString(_key40);
              std::string& _val41 = this->properties[_key40];
              xfer += iprot->readString(_val41);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerDeletePathRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerDeletePathRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter42;
    for (_iter42 = this->properties.begin(); _iter42 != this->properties.end(); ++_iter42)
    {
      xfer += oprot->writeString(_iter42->first);
      xfer += oprot->writeString(_iter42->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerDeletePathRequest &a, TBrokerDeletePathRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.path, b.path);
  swap(a.properties, b.properties);
}

TBrokerDeletePathRequest::TBrokerDeletePathRequest(const TBrokerDeletePathRequest& other43) {
  version = other43.version;
  path = other43.path;
  properties = other43.properties;
}
TBrokerDeletePathRequest& TBrokerDeletePathRequest::operator=(const TBrokerDeletePathRequest& other44) {
  version = other44.version;
  path = other44.path;
  properties = other44.properties;
  return *this;
}
void TBrokerDeletePathRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerDeletePathRequest(";
  out << "version=" << to_string(version);
  out << ", " << "path=" << to_string(path);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


TBrokerRenamePathRequest::~TBrokerRenamePathRequest() throw() {
}


void TBrokerRenamePathRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerRenamePathRequest::__set_srcPath(const std::string& val) {
  this->srcPath = val;
}

void TBrokerRenamePathRequest::__set_destPath(const std::string& val) {
  this->destPath = val;
}

void TBrokerRenamePathRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t TBrokerRenamePathRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_srcPath = false;
  bool isset_destPath = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast45;
          xfer += iprot->readI32(ecast45);
          this->version = (TBrokerVersion::type)ecast45;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcPath);
          isset_srcPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destPath);
          isset_destPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _ktype47;
            ::apache::thrift::protocol::TType _vtype48;
            xfer += iprot->readMapBegin(_ktype47, _vtype48, _size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              std::string _key51;
              xfer += iprot->readString(_key51);
              std::string& _val52 = this->properties[_key51];
              xfer += iprot->readString(_val52);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_srcPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_destPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerRenamePathRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerRenamePathRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("srcPath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->srcPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destPath", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->destPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter53;
    for (_iter53 = this->properties.begin(); _iter53 != this->properties.end(); ++_iter53)
    {
      xfer += oprot->writeString(_iter53->first);
      xfer += oprot->writeString(_iter53->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerRenamePathRequest &a, TBrokerRenamePathRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.srcPath, b.srcPath);
  swap(a.destPath, b.destPath);
  swap(a.properties, b.properties);
}

TBrokerRenamePathRequest::TBrokerRenamePathRequest(const TBrokerRenamePathRequest& other54) {
  version = other54.version;
  srcPath = other54.srcPath;
  destPath = other54.destPath;
  properties = other54.properties;
}
TBrokerRenamePathRequest& TBrokerRenamePathRequest::operator=(const TBrokerRenamePathRequest& other55) {
  version = other55.version;
  srcPath = other55.srcPath;
  destPath = other55.destPath;
  properties = other55.properties;
  return *this;
}
void TBrokerRenamePathRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerRenamePathRequest(";
  out << "version=" << to_string(version);
  out << ", " << "srcPath=" << to_string(srcPath);
  out << ", " << "destPath=" << to_string(destPath);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


TBrokerCheckPathExistRequest::~TBrokerCheckPathExistRequest() throw() {
}


void TBrokerCheckPathExistRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerCheckPathExistRequest::__set_path(const std::string& val) {
  this->path = val;
}

void TBrokerCheckPathExistRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t TBrokerCheckPathExistRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_path = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast56;
          xfer += iprot->readI32(ecast56);
          this->version = (TBrokerVersion::type)ecast56;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _ktype58;
            ::apache::thrift::protocol::TType _vtype59;
            xfer += iprot->readMapBegin(_ktype58, _vtype59, _size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              std::string _key62;
              xfer += iprot->readString(_key62);
              std::string& _val63 = this->properties[_key62];
              xfer += iprot->readString(_val63);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerCheckPathExistRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerCheckPathExistRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter64;
    for (_iter64 = this->properties.begin(); _iter64 != this->properties.end(); ++_iter64)
    {
      xfer += oprot->writeString(_iter64->first);
      xfer += oprot->writeString(_iter64->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerCheckPathExistRequest &a, TBrokerCheckPathExistRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.path, b.path);
  swap(a.properties, b.properties);
}

TBrokerCheckPathExistRequest::TBrokerCheckPathExistRequest(const TBrokerCheckPathExistRequest& other65) {
  version = other65.version;
  path = other65.path;
  properties = other65.properties;
}
TBrokerCheckPathExistRequest& TBrokerCheckPathExistRequest::operator=(const TBrokerCheckPathExistRequest& other66) {
  version = other66.version;
  path = other66.path;
  properties = other66.properties;
  return *this;
}
void TBrokerCheckPathExistRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerCheckPathExistRequest(";
  out << "version=" << to_string(version);
  out << ", " << "path=" << to_string(path);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


TBrokerOpenReaderRequest::~TBrokerOpenReaderRequest() throw() {
}


void TBrokerOpenReaderRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerOpenReaderRequest::__set_path(const std::string& val) {
  this->path = val;
}

void TBrokerOpenReaderRequest::__set_startOffset(const int64_t val) {
  this->startOffset = val;
}

void TBrokerOpenReaderRequest::__set_clientId(const std::string& val) {
  this->clientId = val;
}

void TBrokerOpenReaderRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t TBrokerOpenReaderRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_path = false;
  bool isset_startOffset = false;
  bool isset_clientId = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast67;
          xfer += iprot->readI32(ecast67);
          this->version = (TBrokerVersion::type)ecast67;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startOffset);
          isset_startOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientId);
          isset_clientId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _ktype69;
            ::apache::thrift::protocol::TType _vtype70;
            xfer += iprot->readMapBegin(_ktype69, _vtype70, _size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              std::string _key73;
              xfer += iprot->readString(_key73);
              std::string& _val74 = this->properties[_key73];
              xfer += iprot->readString(_val74);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clientId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerOpenReaderRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerOpenReaderRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startOffset", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->clientId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter75;
    for (_iter75 = this->properties.begin(); _iter75 != this->properties.end(); ++_iter75)
    {
      xfer += oprot->writeString(_iter75->first);
      xfer += oprot->writeString(_iter75->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerOpenReaderRequest &a, TBrokerOpenReaderRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.path, b.path);
  swap(a.startOffset, b.startOffset);
  swap(a.clientId, b.clientId);
  swap(a.properties, b.properties);
}

TBrokerOpenReaderRequest::TBrokerOpenReaderRequest(const TBrokerOpenReaderRequest& other76) {
  version = other76.version;
  path = other76.path;
  startOffset = other76.startOffset;
  clientId = other76.clientId;
  properties = other76.properties;
}
TBrokerOpenReaderRequest& TBrokerOpenReaderRequest::operator=(const TBrokerOpenReaderRequest& other77) {
  version = other77.version;
  path = other77.path;
  startOffset = other77.startOffset;
  clientId = other77.clientId;
  properties = other77.properties;
  return *this;
}
void TBrokerOpenReaderRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerOpenReaderRequest(";
  out << "version=" << to_string(version);
  out << ", " << "path=" << to_string(path);
  out << ", " << "startOffset=" << to_string(startOffset);
  out << ", " << "clientId=" << to_string(clientId);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


TBrokerPReadRequest::~TBrokerPReadRequest() throw() {
}


void TBrokerPReadRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerPReadRequest::__set_fd(const TBrokerFD& val) {
  this->fd = val;
}

void TBrokerPReadRequest::__set_offset(const int64_t val) {
  this->offset = val;
}

void TBrokerPReadRequest::__set_length(const int64_t val) {
  this->length = val;
}

uint32_t TBrokerPReadRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_fd = false;
  bool isset_offset = false;
  bool isset_length = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast78;
          xfer += iprot->readI32(ecast78);
          this->version = (TBrokerVersion::type)ecast78;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          isset_fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          isset_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_length)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerPReadRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerPReadRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerPReadRequest &a, TBrokerPReadRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.fd, b.fd);
  swap(a.offset, b.offset);
  swap(a.length, b.length);
}

TBrokerPReadRequest::TBrokerPReadRequest(const TBrokerPReadRequest& other79) {
  version = other79.version;
  fd = other79.fd;
  offset = other79.offset;
  length = other79.length;
}
TBrokerPReadRequest& TBrokerPReadRequest::operator=(const TBrokerPReadRequest& other80) {
  version = other80.version;
  fd = other80.fd;
  offset = other80.offset;
  length = other80.length;
  return *this;
}
void TBrokerPReadRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerPReadRequest(";
  out << "version=" << to_string(version);
  out << ", " << "fd=" << to_string(fd);
  out << ", " << "offset=" << to_string(offset);
  out << ", " << "length=" << to_string(length);
  out << ")";
}


TBrokerSeekRequest::~TBrokerSeekRequest() throw() {
}


void TBrokerSeekRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerSeekRequest::__set_fd(const TBrokerFD& val) {
  this->fd = val;
}

void TBrokerSeekRequest::__set_offset(const int64_t val) {
  this->offset = val;
}

uint32_t TBrokerSeekRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_fd = false;
  bool isset_offset = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast81;
          xfer += iprot->readI32(ecast81);
          this->version = (TBrokerVersion::type)ecast81;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          isset_fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerSeekRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerSeekRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerSeekRequest &a, TBrokerSeekRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.fd, b.fd);
  swap(a.offset, b.offset);
}

TBrokerSeekRequest::TBrokerSeekRequest(const TBrokerSeekRequest& other82) {
  version = other82.version;
  fd = other82.fd;
  offset = other82.offset;
}
TBrokerSeekRequest& TBrokerSeekRequest::operator=(const TBrokerSeekRequest& other83) {
  version = other83.version;
  fd = other83.fd;
  offset = other83.offset;
  return *this;
}
void TBrokerSeekRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerSeekRequest(";
  out << "version=" << to_string(version);
  out << ", " << "fd=" << to_string(fd);
  out << ", " << "offset=" << to_string(offset);
  out << ")";
}


TBrokerCloseReaderRequest::~TBrokerCloseReaderRequest() throw() {
}


void TBrokerCloseReaderRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerCloseReaderRequest::__set_fd(const TBrokerFD& val) {
  this->fd = val;
}

uint32_t TBrokerCloseReaderRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_fd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->version = (TBrokerVersion::type)ecast84;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          isset_fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerCloseReaderRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerCloseReaderRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerCloseReaderRequest &a, TBrokerCloseReaderRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.fd, b.fd);
}

TBrokerCloseReaderRequest::TBrokerCloseReaderRequest(const TBrokerCloseReaderRequest& other85) {
  version = other85.version;
  fd = other85.fd;
}
TBrokerCloseReaderRequest& TBrokerCloseReaderRequest::operator=(const TBrokerCloseReaderRequest& other86) {
  version = other86.version;
  fd = other86.fd;
  return *this;
}
void TBrokerCloseReaderRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerCloseReaderRequest(";
  out << "version=" << to_string(version);
  out << ", " << "fd=" << to_string(fd);
  out << ")";
}


TBrokerOpenWriterRequest::~TBrokerOpenWriterRequest() throw() {
}


void TBrokerOpenWriterRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerOpenWriterRequest::__set_path(const std::string& val) {
  this->path = val;
}

void TBrokerOpenWriterRequest::__set_openMode(const TBrokerOpenMode::type val) {
  this->openMode = val;
}

void TBrokerOpenWriterRequest::__set_clientId(const std::string& val) {
  this->clientId = val;
}

void TBrokerOpenWriterRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t TBrokerOpenWriterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_path = false;
  bool isset_openMode = false;
  bool isset_clientId = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast87;
          xfer += iprot->readI32(ecast87);
          this->version = (TBrokerVersion::type)ecast87;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast88;
          xfer += iprot->readI32(ecast88);
          this->openMode = (TBrokerOpenMode::type)ecast88;
          isset_openMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientId);
          isset_clientId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _ktype90;
            ::apache::thrift::protocol::TType _vtype91;
            xfer += iprot->readMapBegin(_ktype90, _vtype91, _size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              std::string _key94;
              xfer += iprot->readString(_key94);
              std::string& _val95 = this->properties[_key94];
              xfer += iprot->readString(_val95);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_openMode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clientId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerOpenWriterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerOpenWriterRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openMode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->openMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->clientId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter96;
    for (_iter96 = this->properties.begin(); _iter96 != this->properties.end(); ++_iter96)
    {
      xfer += oprot->writeString(_iter96->first);
      xfer += oprot->writeString(_iter96->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerOpenWriterRequest &a, TBrokerOpenWriterRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.path, b.path);
  swap(a.openMode, b.openMode);
  swap(a.clientId, b.clientId);
  swap(a.properties, b.properties);
}

TBrokerOpenWriterRequest::TBrokerOpenWriterRequest(const TBrokerOpenWriterRequest& other97) {
  version = other97.version;
  path = other97.path;
  openMode = other97.openMode;
  clientId = other97.clientId;
  properties = other97.properties;
}
TBrokerOpenWriterRequest& TBrokerOpenWriterRequest::operator=(const TBrokerOpenWriterRequest& other98) {
  version = other98.version;
  path = other98.path;
  openMode = other98.openMode;
  clientId = other98.clientId;
  properties = other98.properties;
  return *this;
}
void TBrokerOpenWriterRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerOpenWriterRequest(";
  out << "version=" << to_string(version);
  out << ", " << "path=" << to_string(path);
  out << ", " << "openMode=" << to_string(openMode);
  out << ", " << "clientId=" << to_string(clientId);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


TBrokerPWriteRequest::~TBrokerPWriteRequest() throw() {
}


void TBrokerPWriteRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerPWriteRequest::__set_fd(const TBrokerFD& val) {
  this->fd = val;
}

void TBrokerPWriteRequest::__set_offset(const int64_t val) {
  this->offset = val;
}

void TBrokerPWriteRequest::__set_data(const std::string& val) {
  this->data = val;
}

uint32_t TBrokerPWriteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_fd = false;
  bool isset_offset = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast99;
          xfer += iprot->readI32(ecast99);
          this->version = (TBrokerVersion::type)ecast99;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          isset_fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerPWriteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerPWriteRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerPWriteRequest &a, TBrokerPWriteRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.fd, b.fd);
  swap(a.offset, b.offset);
  swap(a.data, b.data);
}

TBrokerPWriteRequest::TBrokerPWriteRequest(const TBrokerPWriteRequest& other100) {
  version = other100.version;
  fd = other100.fd;
  offset = other100.offset;
  data = other100.data;
}
TBrokerPWriteRequest& TBrokerPWriteRequest::operator=(const TBrokerPWriteRequest& other101) {
  version = other101.version;
  fd = other101.fd;
  offset = other101.offset;
  data = other101.data;
  return *this;
}
void TBrokerPWriteRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerPWriteRequest(";
  out << "version=" << to_string(version);
  out << ", " << "fd=" << to_string(fd);
  out << ", " << "offset=" << to_string(offset);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


TBrokerCloseWriterRequest::~TBrokerCloseWriterRequest() throw() {
}


void TBrokerCloseWriterRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerCloseWriterRequest::__set_fd(const TBrokerFD& val) {
  this->fd = val;
}

uint32_t TBrokerCloseWriterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_fd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast102;
          xfer += iprot->readI32(ecast102);
          this->version = (TBrokerVersion::type)ecast102;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          isset_fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerCloseWriterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerCloseWriterRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerCloseWriterRequest &a, TBrokerCloseWriterRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.fd, b.fd);
}

TBrokerCloseWriterRequest::TBrokerCloseWriterRequest(const TBrokerCloseWriterRequest& other103) {
  version = other103.version;
  fd = other103.fd;
}
TBrokerCloseWriterRequest& TBrokerCloseWriterRequest::operator=(const TBrokerCloseWriterRequest& other104) {
  version = other104.version;
  fd = other104.fd;
  return *this;
}
void TBrokerCloseWriterRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerCloseWriterRequest(";
  out << "version=" << to_string(version);
  out << ", " << "fd=" << to_string(fd);
  out << ")";
}


TBrokerPingBrokerRequest::~TBrokerPingBrokerRequest() throw() {
}


void TBrokerPingBrokerRequest::__set_version(const TBrokerVersion::type val) {
  this->version = val;
}

void TBrokerPingBrokerRequest::__set_clientId(const std::string& val) {
  this->clientId = val;
}

uint32_t TBrokerPingBrokerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_clientId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast105;
          xfer += iprot->readI32(ecast105);
          this->version = (TBrokerVersion::type)ecast105;
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientId);
          isset_clientId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clientId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TBrokerPingBrokerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBrokerPingBrokerRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->clientId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBrokerPingBrokerRequest &a, TBrokerPingBrokerRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.clientId, b.clientId);
}

TBrokerPingBrokerRequest::TBrokerPingBrokerRequest(const TBrokerPingBrokerRequest& other106) {
  version = other106.version;
  clientId = other106.clientId;
}
TBrokerPingBrokerRequest& TBrokerPingBrokerRequest::operator=(const TBrokerPingBrokerRequest& other107) {
  version = other107.version;
  clientId = other107.clientId;
  return *this;
}
void TBrokerPingBrokerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBrokerPingBrokerRequest(";
  out << "version=" << to_string(version);
  out << ", " << "clientId=" << to_string(clientId);
  out << ")";
}

} // namespace
