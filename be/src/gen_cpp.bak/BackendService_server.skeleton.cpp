// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BackendService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::palo;

class BackendServiceHandler : virtual public BackendServiceIf {
 public:
  BackendServiceHandler() {
    // Your initialization goes here
  }

  void exec_plan_fragment( ::palo::TExecPlanFragmentResult& _return, const  ::palo::TExecPlanFragmentParams& params) {
    // Your implementation goes here
    printf("exec_plan_fragment\n");
  }

  void cancel_plan_fragment( ::palo::TCancelPlanFragmentResult& _return, const  ::palo::TCancelPlanFragmentParams& params) {
    // Your implementation goes here
    printf("cancel_plan_fragment\n");
  }

  void transmit_data( ::palo::TTransmitDataResult& _return, const  ::palo::TTransmitDataParams& params) {
    // Your implementation goes here
    printf("transmit_data\n");
  }

  void fetch_data( ::palo::TFetchDataResult& _return, const  ::palo::TFetchDataParams& params) {
    // Your implementation goes here
    printf("fetch_data\n");
  }

  void submit_tasks( ::palo::TAgentResult& _return, const std::vector< ::palo::TAgentTaskRequest> & tasks) {
    // Your implementation goes here
    printf("submit_tasks\n");
  }

  void make_snapshot( ::palo::TAgentResult& _return, const  ::palo::TSnapshotRequest& snapshot_request) {
    // Your implementation goes here
    printf("make_snapshot\n");
  }

  void release_snapshot( ::palo::TAgentResult& _return, const std::string& snapshot_path) {
    // Your implementation goes here
    printf("release_snapshot\n");
  }

  void publish_cluster_state( ::palo::TAgentResult& _return, const  ::palo::TAgentPublishRequest& request) {
    // Your implementation goes here
    printf("publish_cluster_state\n");
  }

  void submit_etl_task( ::palo::TAgentResult& _return, const  ::palo::TMiniLoadEtlTaskRequest& request) {
    // Your implementation goes here
    printf("submit_etl_task\n");
  }

  void get_etl_status( ::palo::TMiniLoadEtlStatusResult& _return, const  ::palo::TMiniLoadEtlStatusRequest& request) {
    // Your implementation goes here
    printf("get_etl_status\n");
  }

  void delete_etl_files( ::palo::TAgentResult& _return, const  ::palo::TDeleteEtlFilesRequest& request) {
    // Your implementation goes here
    printf("delete_etl_files\n");
  }

  void register_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id, const int32_t num_senders) {
    // Your implementation goes here
    printf("register_pull_load_task\n");
  }

  void deregister_pull_load_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& id) {
    // Your implementation goes here
    printf("deregister_pull_load_task\n");
  }

  void report_pull_load_sub_task_info( ::palo::TStatus& _return, const TPullLoadSubTaskInfo& task_info) {
    // Your implementation goes here
    printf("report_pull_load_sub_task_info\n");
  }

  void fetch_pull_load_task_info(TFetchPullLoadTaskInfoResult& _return, const  ::palo::TUniqueId& id) {
    // Your implementation goes here
    printf("fetch_pull_load_task_info\n");
  }

  void fetch_all_pull_load_task_infos(TFetchAllPullLoadTaskInfosResult& _return) {
    // Your implementation goes here
    printf("fetch_all_pull_load_task_infos\n");
  }

  void submit_export_task( ::palo::TStatus& _return, const TExportTaskRequest& request) {
    // Your implementation goes here
    printf("submit_export_task\n");
  }

  void get_export_status( ::palo::TExportStatusResult& _return, const  ::palo::TUniqueId& task_id) {
    // Your implementation goes here
    printf("get_export_status\n");
  }

  void erase_export_task( ::palo::TStatus& _return, const  ::palo::TUniqueId& task_id) {
    // Your implementation goes here
    printf("erase_export_task\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BackendServiceHandler> handler(new BackendServiceHandler());
  shared_ptr<TProcessor> processor(new BackendServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

