/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TPaloBrokerService_H
#define TPaloBrokerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "PaloBrokerService_types.h"

namespace palo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TPaloBrokerServiceIf {
 public:
  virtual ~TPaloBrokerServiceIf() {}
  virtual void listPath(TBrokerListResponse& _return, const TBrokerListPathRequest& request) = 0;
  virtual void deletePath(TBrokerOperationStatus& _return, const TBrokerDeletePathRequest& request) = 0;
  virtual void renamePath(TBrokerOperationStatus& _return, const TBrokerRenamePathRequest& request) = 0;
  virtual void checkPathExist(TBrokerCheckPathExistResponse& _return, const TBrokerCheckPathExistRequest& request) = 0;
  virtual void openReader(TBrokerOpenReaderResponse& _return, const TBrokerOpenReaderRequest& request) = 0;
  virtual void pread(TBrokerReadResponse& _return, const TBrokerPReadRequest& request) = 0;
  virtual void seek(TBrokerOperationStatus& _return, const TBrokerSeekRequest& request) = 0;
  virtual void closeReader(TBrokerOperationStatus& _return, const TBrokerCloseReaderRequest& request) = 0;
  virtual void openWriter(TBrokerOpenWriterResponse& _return, const TBrokerOpenWriterRequest& request) = 0;
  virtual void pwrite(TBrokerOperationStatus& _return, const TBrokerPWriteRequest& request) = 0;
  virtual void closeWriter(TBrokerOperationStatus& _return, const TBrokerCloseWriterRequest& request) = 0;
  virtual void ping(TBrokerOperationStatus& _return, const TBrokerPingBrokerRequest& request) = 0;
};

class TPaloBrokerServiceIfFactory {
 public:
  typedef TPaloBrokerServiceIf Handler;

  virtual ~TPaloBrokerServiceIfFactory() {}

  virtual TPaloBrokerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TPaloBrokerServiceIf* /* handler */) = 0;
};

class TPaloBrokerServiceIfSingletonFactory : virtual public TPaloBrokerServiceIfFactory {
 public:
  TPaloBrokerServiceIfSingletonFactory(const boost::shared_ptr<TPaloBrokerServiceIf>& iface) : iface_(iface) {}
  virtual ~TPaloBrokerServiceIfSingletonFactory() {}

  virtual TPaloBrokerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TPaloBrokerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TPaloBrokerServiceIf> iface_;
};

class TPaloBrokerServiceNull : virtual public TPaloBrokerServiceIf {
 public:
  virtual ~TPaloBrokerServiceNull() {}
  void listPath(TBrokerListResponse& /* _return */, const TBrokerListPathRequest& /* request */) {
    return;
  }
  void deletePath(TBrokerOperationStatus& /* _return */, const TBrokerDeletePathRequest& /* request */) {
    return;
  }
  void renamePath(TBrokerOperationStatus& /* _return */, const TBrokerRenamePathRequest& /* request */) {
    return;
  }
  void checkPathExist(TBrokerCheckPathExistResponse& /* _return */, const TBrokerCheckPathExistRequest& /* request */) {
    return;
  }
  void openReader(TBrokerOpenReaderResponse& /* _return */, const TBrokerOpenReaderRequest& /* request */) {
    return;
  }
  void pread(TBrokerReadResponse& /* _return */, const TBrokerPReadRequest& /* request */) {
    return;
  }
  void seek(TBrokerOperationStatus& /* _return */, const TBrokerSeekRequest& /* request */) {
    return;
  }
  void closeReader(TBrokerOperationStatus& /* _return */, const TBrokerCloseReaderRequest& /* request */) {
    return;
  }
  void openWriter(TBrokerOpenWriterResponse& /* _return */, const TBrokerOpenWriterRequest& /* request */) {
    return;
  }
  void pwrite(TBrokerOperationStatus& /* _return */, const TBrokerPWriteRequest& /* request */) {
    return;
  }
  void closeWriter(TBrokerOperationStatus& /* _return */, const TBrokerCloseWriterRequest& /* request */) {
    return;
  }
  void ping(TBrokerOperationStatus& /* _return */, const TBrokerPingBrokerRequest& /* request */) {
    return;
  }
};

typedef struct _TPaloBrokerService_listPath_args__isset {
  _TPaloBrokerService_listPath_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_listPath_args__isset;

class TPaloBrokerService_listPath_args {
 public:

  TPaloBrokerService_listPath_args(const TPaloBrokerService_listPath_args&);
  TPaloBrokerService_listPath_args& operator=(const TPaloBrokerService_listPath_args&);
  TPaloBrokerService_listPath_args() {
  }

  virtual ~TPaloBrokerService_listPath_args() throw();
  TBrokerListPathRequest request;

  _TPaloBrokerService_listPath_args__isset __isset;

  void __set_request(const TBrokerListPathRequest& val);

  bool operator == (const TPaloBrokerService_listPath_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_listPath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_listPath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_listPath_pargs {
 public:


  virtual ~TPaloBrokerService_listPath_pargs() throw();
  const TBrokerListPathRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_listPath_result__isset {
  _TPaloBrokerService_listPath_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_listPath_result__isset;

class TPaloBrokerService_listPath_result {
 public:

  TPaloBrokerService_listPath_result(const TPaloBrokerService_listPath_result&);
  TPaloBrokerService_listPath_result& operator=(const TPaloBrokerService_listPath_result&);
  TPaloBrokerService_listPath_result() {
  }

  virtual ~TPaloBrokerService_listPath_result() throw();
  TBrokerListResponse success;

  _TPaloBrokerService_listPath_result__isset __isset;

  void __set_success(const TBrokerListResponse& val);

  bool operator == (const TPaloBrokerService_listPath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_listPath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_listPath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_listPath_presult__isset {
  _TPaloBrokerService_listPath_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_listPath_presult__isset;

class TPaloBrokerService_listPath_presult {
 public:


  virtual ~TPaloBrokerService_listPath_presult() throw();
  TBrokerListResponse* success;

  _TPaloBrokerService_listPath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_deletePath_args__isset {
  _TPaloBrokerService_deletePath_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_deletePath_args__isset;

class TPaloBrokerService_deletePath_args {
 public:

  TPaloBrokerService_deletePath_args(const TPaloBrokerService_deletePath_args&);
  TPaloBrokerService_deletePath_args& operator=(const TPaloBrokerService_deletePath_args&);
  TPaloBrokerService_deletePath_args() {
  }

  virtual ~TPaloBrokerService_deletePath_args() throw();
  TBrokerDeletePathRequest request;

  _TPaloBrokerService_deletePath_args__isset __isset;

  void __set_request(const TBrokerDeletePathRequest& val);

  bool operator == (const TPaloBrokerService_deletePath_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_deletePath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_deletePath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_deletePath_pargs {
 public:


  virtual ~TPaloBrokerService_deletePath_pargs() throw();
  const TBrokerDeletePathRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_deletePath_result__isset {
  _TPaloBrokerService_deletePath_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_deletePath_result__isset;

class TPaloBrokerService_deletePath_result {
 public:

  TPaloBrokerService_deletePath_result(const TPaloBrokerService_deletePath_result&);
  TPaloBrokerService_deletePath_result& operator=(const TPaloBrokerService_deletePath_result&);
  TPaloBrokerService_deletePath_result() {
  }

  virtual ~TPaloBrokerService_deletePath_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_deletePath_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_deletePath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_deletePath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_deletePath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_deletePath_presult__isset {
  _TPaloBrokerService_deletePath_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_deletePath_presult__isset;

class TPaloBrokerService_deletePath_presult {
 public:


  virtual ~TPaloBrokerService_deletePath_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_deletePath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_renamePath_args__isset {
  _TPaloBrokerService_renamePath_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_renamePath_args__isset;

class TPaloBrokerService_renamePath_args {
 public:

  TPaloBrokerService_renamePath_args(const TPaloBrokerService_renamePath_args&);
  TPaloBrokerService_renamePath_args& operator=(const TPaloBrokerService_renamePath_args&);
  TPaloBrokerService_renamePath_args() {
  }

  virtual ~TPaloBrokerService_renamePath_args() throw();
  TBrokerRenamePathRequest request;

  _TPaloBrokerService_renamePath_args__isset __isset;

  void __set_request(const TBrokerRenamePathRequest& val);

  bool operator == (const TPaloBrokerService_renamePath_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_renamePath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_renamePath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_renamePath_pargs {
 public:


  virtual ~TPaloBrokerService_renamePath_pargs() throw();
  const TBrokerRenamePathRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_renamePath_result__isset {
  _TPaloBrokerService_renamePath_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_renamePath_result__isset;

class TPaloBrokerService_renamePath_result {
 public:

  TPaloBrokerService_renamePath_result(const TPaloBrokerService_renamePath_result&);
  TPaloBrokerService_renamePath_result& operator=(const TPaloBrokerService_renamePath_result&);
  TPaloBrokerService_renamePath_result() {
  }

  virtual ~TPaloBrokerService_renamePath_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_renamePath_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_renamePath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_renamePath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_renamePath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_renamePath_presult__isset {
  _TPaloBrokerService_renamePath_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_renamePath_presult__isset;

class TPaloBrokerService_renamePath_presult {
 public:


  virtual ~TPaloBrokerService_renamePath_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_renamePath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_checkPathExist_args__isset {
  _TPaloBrokerService_checkPathExist_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_checkPathExist_args__isset;

class TPaloBrokerService_checkPathExist_args {
 public:

  TPaloBrokerService_checkPathExist_args(const TPaloBrokerService_checkPathExist_args&);
  TPaloBrokerService_checkPathExist_args& operator=(const TPaloBrokerService_checkPathExist_args&);
  TPaloBrokerService_checkPathExist_args() {
  }

  virtual ~TPaloBrokerService_checkPathExist_args() throw();
  TBrokerCheckPathExistRequest request;

  _TPaloBrokerService_checkPathExist_args__isset __isset;

  void __set_request(const TBrokerCheckPathExistRequest& val);

  bool operator == (const TPaloBrokerService_checkPathExist_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_checkPathExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_checkPathExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_checkPathExist_pargs {
 public:


  virtual ~TPaloBrokerService_checkPathExist_pargs() throw();
  const TBrokerCheckPathExistRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_checkPathExist_result__isset {
  _TPaloBrokerService_checkPathExist_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_checkPathExist_result__isset;

class TPaloBrokerService_checkPathExist_result {
 public:

  TPaloBrokerService_checkPathExist_result(const TPaloBrokerService_checkPathExist_result&);
  TPaloBrokerService_checkPathExist_result& operator=(const TPaloBrokerService_checkPathExist_result&);
  TPaloBrokerService_checkPathExist_result() {
  }

  virtual ~TPaloBrokerService_checkPathExist_result() throw();
  TBrokerCheckPathExistResponse success;

  _TPaloBrokerService_checkPathExist_result__isset __isset;

  void __set_success(const TBrokerCheckPathExistResponse& val);

  bool operator == (const TPaloBrokerService_checkPathExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_checkPathExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_checkPathExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_checkPathExist_presult__isset {
  _TPaloBrokerService_checkPathExist_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_checkPathExist_presult__isset;

class TPaloBrokerService_checkPathExist_presult {
 public:


  virtual ~TPaloBrokerService_checkPathExist_presult() throw();
  TBrokerCheckPathExistResponse* success;

  _TPaloBrokerService_checkPathExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_openReader_args__isset {
  _TPaloBrokerService_openReader_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_openReader_args__isset;

class TPaloBrokerService_openReader_args {
 public:

  TPaloBrokerService_openReader_args(const TPaloBrokerService_openReader_args&);
  TPaloBrokerService_openReader_args& operator=(const TPaloBrokerService_openReader_args&);
  TPaloBrokerService_openReader_args() {
  }

  virtual ~TPaloBrokerService_openReader_args() throw();
  TBrokerOpenReaderRequest request;

  _TPaloBrokerService_openReader_args__isset __isset;

  void __set_request(const TBrokerOpenReaderRequest& val);

  bool operator == (const TPaloBrokerService_openReader_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_openReader_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_openReader_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_openReader_pargs {
 public:


  virtual ~TPaloBrokerService_openReader_pargs() throw();
  const TBrokerOpenReaderRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_openReader_result__isset {
  _TPaloBrokerService_openReader_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_openReader_result__isset;

class TPaloBrokerService_openReader_result {
 public:

  TPaloBrokerService_openReader_result(const TPaloBrokerService_openReader_result&);
  TPaloBrokerService_openReader_result& operator=(const TPaloBrokerService_openReader_result&);
  TPaloBrokerService_openReader_result() {
  }

  virtual ~TPaloBrokerService_openReader_result() throw();
  TBrokerOpenReaderResponse success;

  _TPaloBrokerService_openReader_result__isset __isset;

  void __set_success(const TBrokerOpenReaderResponse& val);

  bool operator == (const TPaloBrokerService_openReader_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_openReader_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_openReader_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_openReader_presult__isset {
  _TPaloBrokerService_openReader_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_openReader_presult__isset;

class TPaloBrokerService_openReader_presult {
 public:


  virtual ~TPaloBrokerService_openReader_presult() throw();
  TBrokerOpenReaderResponse* success;

  _TPaloBrokerService_openReader_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_pread_args__isset {
  _TPaloBrokerService_pread_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_pread_args__isset;

class TPaloBrokerService_pread_args {
 public:

  TPaloBrokerService_pread_args(const TPaloBrokerService_pread_args&);
  TPaloBrokerService_pread_args& operator=(const TPaloBrokerService_pread_args&);
  TPaloBrokerService_pread_args() {
  }

  virtual ~TPaloBrokerService_pread_args() throw();
  TBrokerPReadRequest request;

  _TPaloBrokerService_pread_args__isset __isset;

  void __set_request(const TBrokerPReadRequest& val);

  bool operator == (const TPaloBrokerService_pread_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_pread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_pread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_pread_pargs {
 public:


  virtual ~TPaloBrokerService_pread_pargs() throw();
  const TBrokerPReadRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_pread_result__isset {
  _TPaloBrokerService_pread_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_pread_result__isset;

class TPaloBrokerService_pread_result {
 public:

  TPaloBrokerService_pread_result(const TPaloBrokerService_pread_result&);
  TPaloBrokerService_pread_result& operator=(const TPaloBrokerService_pread_result&);
  TPaloBrokerService_pread_result() {
  }

  virtual ~TPaloBrokerService_pread_result() throw();
  TBrokerReadResponse success;

  _TPaloBrokerService_pread_result__isset __isset;

  void __set_success(const TBrokerReadResponse& val);

  bool operator == (const TPaloBrokerService_pread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_pread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_pread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_pread_presult__isset {
  _TPaloBrokerService_pread_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_pread_presult__isset;

class TPaloBrokerService_pread_presult {
 public:


  virtual ~TPaloBrokerService_pread_presult() throw();
  TBrokerReadResponse* success;

  _TPaloBrokerService_pread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_seek_args__isset {
  _TPaloBrokerService_seek_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_seek_args__isset;

class TPaloBrokerService_seek_args {
 public:

  TPaloBrokerService_seek_args(const TPaloBrokerService_seek_args&);
  TPaloBrokerService_seek_args& operator=(const TPaloBrokerService_seek_args&);
  TPaloBrokerService_seek_args() {
  }

  virtual ~TPaloBrokerService_seek_args() throw();
  TBrokerSeekRequest request;

  _TPaloBrokerService_seek_args__isset __isset;

  void __set_request(const TBrokerSeekRequest& val);

  bool operator == (const TPaloBrokerService_seek_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_seek_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_seek_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_seek_pargs {
 public:


  virtual ~TPaloBrokerService_seek_pargs() throw();
  const TBrokerSeekRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_seek_result__isset {
  _TPaloBrokerService_seek_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_seek_result__isset;

class TPaloBrokerService_seek_result {
 public:

  TPaloBrokerService_seek_result(const TPaloBrokerService_seek_result&);
  TPaloBrokerService_seek_result& operator=(const TPaloBrokerService_seek_result&);
  TPaloBrokerService_seek_result() {
  }

  virtual ~TPaloBrokerService_seek_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_seek_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_seek_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_seek_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_seek_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_seek_presult__isset {
  _TPaloBrokerService_seek_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_seek_presult__isset;

class TPaloBrokerService_seek_presult {
 public:


  virtual ~TPaloBrokerService_seek_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_seek_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_closeReader_args__isset {
  _TPaloBrokerService_closeReader_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_closeReader_args__isset;

class TPaloBrokerService_closeReader_args {
 public:

  TPaloBrokerService_closeReader_args(const TPaloBrokerService_closeReader_args&);
  TPaloBrokerService_closeReader_args& operator=(const TPaloBrokerService_closeReader_args&);
  TPaloBrokerService_closeReader_args() {
  }

  virtual ~TPaloBrokerService_closeReader_args() throw();
  TBrokerCloseReaderRequest request;

  _TPaloBrokerService_closeReader_args__isset __isset;

  void __set_request(const TBrokerCloseReaderRequest& val);

  bool operator == (const TPaloBrokerService_closeReader_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_closeReader_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_closeReader_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_closeReader_pargs {
 public:


  virtual ~TPaloBrokerService_closeReader_pargs() throw();
  const TBrokerCloseReaderRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_closeReader_result__isset {
  _TPaloBrokerService_closeReader_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_closeReader_result__isset;

class TPaloBrokerService_closeReader_result {
 public:

  TPaloBrokerService_closeReader_result(const TPaloBrokerService_closeReader_result&);
  TPaloBrokerService_closeReader_result& operator=(const TPaloBrokerService_closeReader_result&);
  TPaloBrokerService_closeReader_result() {
  }

  virtual ~TPaloBrokerService_closeReader_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_closeReader_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_closeReader_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_closeReader_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_closeReader_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_closeReader_presult__isset {
  _TPaloBrokerService_closeReader_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_closeReader_presult__isset;

class TPaloBrokerService_closeReader_presult {
 public:


  virtual ~TPaloBrokerService_closeReader_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_closeReader_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_openWriter_args__isset {
  _TPaloBrokerService_openWriter_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_openWriter_args__isset;

class TPaloBrokerService_openWriter_args {
 public:

  TPaloBrokerService_openWriter_args(const TPaloBrokerService_openWriter_args&);
  TPaloBrokerService_openWriter_args& operator=(const TPaloBrokerService_openWriter_args&);
  TPaloBrokerService_openWriter_args() {
  }

  virtual ~TPaloBrokerService_openWriter_args() throw();
  TBrokerOpenWriterRequest request;

  _TPaloBrokerService_openWriter_args__isset __isset;

  void __set_request(const TBrokerOpenWriterRequest& val);

  bool operator == (const TPaloBrokerService_openWriter_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_openWriter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_openWriter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_openWriter_pargs {
 public:


  virtual ~TPaloBrokerService_openWriter_pargs() throw();
  const TBrokerOpenWriterRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_openWriter_result__isset {
  _TPaloBrokerService_openWriter_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_openWriter_result__isset;

class TPaloBrokerService_openWriter_result {
 public:

  TPaloBrokerService_openWriter_result(const TPaloBrokerService_openWriter_result&);
  TPaloBrokerService_openWriter_result& operator=(const TPaloBrokerService_openWriter_result&);
  TPaloBrokerService_openWriter_result() {
  }

  virtual ~TPaloBrokerService_openWriter_result() throw();
  TBrokerOpenWriterResponse success;

  _TPaloBrokerService_openWriter_result__isset __isset;

  void __set_success(const TBrokerOpenWriterResponse& val);

  bool operator == (const TPaloBrokerService_openWriter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_openWriter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_openWriter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_openWriter_presult__isset {
  _TPaloBrokerService_openWriter_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_openWriter_presult__isset;

class TPaloBrokerService_openWriter_presult {
 public:


  virtual ~TPaloBrokerService_openWriter_presult() throw();
  TBrokerOpenWriterResponse* success;

  _TPaloBrokerService_openWriter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_pwrite_args__isset {
  _TPaloBrokerService_pwrite_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_pwrite_args__isset;

class TPaloBrokerService_pwrite_args {
 public:

  TPaloBrokerService_pwrite_args(const TPaloBrokerService_pwrite_args&);
  TPaloBrokerService_pwrite_args& operator=(const TPaloBrokerService_pwrite_args&);
  TPaloBrokerService_pwrite_args() {
  }

  virtual ~TPaloBrokerService_pwrite_args() throw();
  TBrokerPWriteRequest request;

  _TPaloBrokerService_pwrite_args__isset __isset;

  void __set_request(const TBrokerPWriteRequest& val);

  bool operator == (const TPaloBrokerService_pwrite_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_pwrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_pwrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_pwrite_pargs {
 public:


  virtual ~TPaloBrokerService_pwrite_pargs() throw();
  const TBrokerPWriteRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_pwrite_result__isset {
  _TPaloBrokerService_pwrite_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_pwrite_result__isset;

class TPaloBrokerService_pwrite_result {
 public:

  TPaloBrokerService_pwrite_result(const TPaloBrokerService_pwrite_result&);
  TPaloBrokerService_pwrite_result& operator=(const TPaloBrokerService_pwrite_result&);
  TPaloBrokerService_pwrite_result() {
  }

  virtual ~TPaloBrokerService_pwrite_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_pwrite_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_pwrite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_pwrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_pwrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_pwrite_presult__isset {
  _TPaloBrokerService_pwrite_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_pwrite_presult__isset;

class TPaloBrokerService_pwrite_presult {
 public:


  virtual ~TPaloBrokerService_pwrite_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_pwrite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_closeWriter_args__isset {
  _TPaloBrokerService_closeWriter_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_closeWriter_args__isset;

class TPaloBrokerService_closeWriter_args {
 public:

  TPaloBrokerService_closeWriter_args(const TPaloBrokerService_closeWriter_args&);
  TPaloBrokerService_closeWriter_args& operator=(const TPaloBrokerService_closeWriter_args&);
  TPaloBrokerService_closeWriter_args() {
  }

  virtual ~TPaloBrokerService_closeWriter_args() throw();
  TBrokerCloseWriterRequest request;

  _TPaloBrokerService_closeWriter_args__isset __isset;

  void __set_request(const TBrokerCloseWriterRequest& val);

  bool operator == (const TPaloBrokerService_closeWriter_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_closeWriter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_closeWriter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_closeWriter_pargs {
 public:


  virtual ~TPaloBrokerService_closeWriter_pargs() throw();
  const TBrokerCloseWriterRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_closeWriter_result__isset {
  _TPaloBrokerService_closeWriter_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_closeWriter_result__isset;

class TPaloBrokerService_closeWriter_result {
 public:

  TPaloBrokerService_closeWriter_result(const TPaloBrokerService_closeWriter_result&);
  TPaloBrokerService_closeWriter_result& operator=(const TPaloBrokerService_closeWriter_result&);
  TPaloBrokerService_closeWriter_result() {
  }

  virtual ~TPaloBrokerService_closeWriter_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_closeWriter_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_closeWriter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_closeWriter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_closeWriter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_closeWriter_presult__isset {
  _TPaloBrokerService_closeWriter_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_closeWriter_presult__isset;

class TPaloBrokerService_closeWriter_presult {
 public:


  virtual ~TPaloBrokerService_closeWriter_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_closeWriter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TPaloBrokerService_ping_args__isset {
  _TPaloBrokerService_ping_args__isset() : request(false) {}
  bool request :1;
} _TPaloBrokerService_ping_args__isset;

class TPaloBrokerService_ping_args {
 public:

  TPaloBrokerService_ping_args(const TPaloBrokerService_ping_args&);
  TPaloBrokerService_ping_args& operator=(const TPaloBrokerService_ping_args&);
  TPaloBrokerService_ping_args() {
  }

  virtual ~TPaloBrokerService_ping_args() throw();
  TBrokerPingBrokerRequest request;

  _TPaloBrokerService_ping_args__isset __isset;

  void __set_request(const TBrokerPingBrokerRequest& val);

  bool operator == (const TPaloBrokerService_ping_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPaloBrokerService_ping_pargs {
 public:


  virtual ~TPaloBrokerService_ping_pargs() throw();
  const TBrokerPingBrokerRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_ping_result__isset {
  _TPaloBrokerService_ping_result__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_ping_result__isset;

class TPaloBrokerService_ping_result {
 public:

  TPaloBrokerService_ping_result(const TPaloBrokerService_ping_result&);
  TPaloBrokerService_ping_result& operator=(const TPaloBrokerService_ping_result&);
  TPaloBrokerService_ping_result() {
  }

  virtual ~TPaloBrokerService_ping_result() throw();
  TBrokerOperationStatus success;

  _TPaloBrokerService_ping_result__isset __isset;

  void __set_success(const TBrokerOperationStatus& val);

  bool operator == (const TPaloBrokerService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPaloBrokerService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPaloBrokerService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPaloBrokerService_ping_presult__isset {
  _TPaloBrokerService_ping_presult__isset() : success(false) {}
  bool success :1;
} _TPaloBrokerService_ping_presult__isset;

class TPaloBrokerService_ping_presult {
 public:


  virtual ~TPaloBrokerService_ping_presult() throw();
  TBrokerOperationStatus* success;

  _TPaloBrokerService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TPaloBrokerServiceClient : virtual public TPaloBrokerServiceIf {
 public:
  TPaloBrokerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TPaloBrokerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void listPath(TBrokerListResponse& _return, const TBrokerListPathRequest& request);
  void send_listPath(const TBrokerListPathRequest& request);
  void recv_listPath(TBrokerListResponse& _return);
  void deletePath(TBrokerOperationStatus& _return, const TBrokerDeletePathRequest& request);
  void send_deletePath(const TBrokerDeletePathRequest& request);
  void recv_deletePath(TBrokerOperationStatus& _return);
  void renamePath(TBrokerOperationStatus& _return, const TBrokerRenamePathRequest& request);
  void send_renamePath(const TBrokerRenamePathRequest& request);
  void recv_renamePath(TBrokerOperationStatus& _return);
  void checkPathExist(TBrokerCheckPathExistResponse& _return, const TBrokerCheckPathExistRequest& request);
  void send_checkPathExist(const TBrokerCheckPathExistRequest& request);
  void recv_checkPathExist(TBrokerCheckPathExistResponse& _return);
  void openReader(TBrokerOpenReaderResponse& _return, const TBrokerOpenReaderRequest& request);
  void send_openReader(const TBrokerOpenReaderRequest& request);
  void recv_openReader(TBrokerOpenReaderResponse& _return);
  void pread(TBrokerReadResponse& _return, const TBrokerPReadRequest& request);
  void send_pread(const TBrokerPReadRequest& request);
  void recv_pread(TBrokerReadResponse& _return);
  void seek(TBrokerOperationStatus& _return, const TBrokerSeekRequest& request);
  void send_seek(const TBrokerSeekRequest& request);
  void recv_seek(TBrokerOperationStatus& _return);
  void closeReader(TBrokerOperationStatus& _return, const TBrokerCloseReaderRequest& request);
  void send_closeReader(const TBrokerCloseReaderRequest& request);
  void recv_closeReader(TBrokerOperationStatus& _return);
  void openWriter(TBrokerOpenWriterResponse& _return, const TBrokerOpenWriterRequest& request);
  void send_openWriter(const TBrokerOpenWriterRequest& request);
  void recv_openWriter(TBrokerOpenWriterResponse& _return);
  void pwrite(TBrokerOperationStatus& _return, const TBrokerPWriteRequest& request);
  void send_pwrite(const TBrokerPWriteRequest& request);
  void recv_pwrite(TBrokerOperationStatus& _return);
  void closeWriter(TBrokerOperationStatus& _return, const TBrokerCloseWriterRequest& request);
  void send_closeWriter(const TBrokerCloseWriterRequest& request);
  void recv_closeWriter(TBrokerOperationStatus& _return);
  void ping(TBrokerOperationStatus& _return, const TBrokerPingBrokerRequest& request);
  void send_ping(const TBrokerPingBrokerRequest& request);
  void recv_ping(TBrokerOperationStatus& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TPaloBrokerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TPaloBrokerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TPaloBrokerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_listPath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renamePath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkPathExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openReader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_seek(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeReader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openWriter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pwrite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeWriter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TPaloBrokerServiceProcessor(boost::shared_ptr<TPaloBrokerServiceIf> iface) :
    iface_(iface) {
    processMap_["listPath"] = &TPaloBrokerServiceProcessor::process_listPath;
    processMap_["deletePath"] = &TPaloBrokerServiceProcessor::process_deletePath;
    processMap_["renamePath"] = &TPaloBrokerServiceProcessor::process_renamePath;
    processMap_["checkPathExist"] = &TPaloBrokerServiceProcessor::process_checkPathExist;
    processMap_["openReader"] = &TPaloBrokerServiceProcessor::process_openReader;
    processMap_["pread"] = &TPaloBrokerServiceProcessor::process_pread;
    processMap_["seek"] = &TPaloBrokerServiceProcessor::process_seek;
    processMap_["closeReader"] = &TPaloBrokerServiceProcessor::process_closeReader;
    processMap_["openWriter"] = &TPaloBrokerServiceProcessor::process_openWriter;
    processMap_["pwrite"] = &TPaloBrokerServiceProcessor::process_pwrite;
    processMap_["closeWriter"] = &TPaloBrokerServiceProcessor::process_closeWriter;
    processMap_["ping"] = &TPaloBrokerServiceProcessor::process_ping;
  }

  virtual ~TPaloBrokerServiceProcessor() {}
};

class TPaloBrokerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TPaloBrokerServiceProcessorFactory(const ::boost::shared_ptr< TPaloBrokerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TPaloBrokerServiceIfFactory > handlerFactory_;
};

class TPaloBrokerServiceMultiface : virtual public TPaloBrokerServiceIf {
 public:
  TPaloBrokerServiceMultiface(std::vector<boost::shared_ptr<TPaloBrokerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TPaloBrokerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TPaloBrokerServiceIf> > ifaces_;
  TPaloBrokerServiceMultiface() {}
  void add(boost::shared_ptr<TPaloBrokerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void listPath(TBrokerListResponse& _return, const TBrokerListPathRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listPath(_return, request);
    }
    ifaces_[i]->listPath(_return, request);
    return;
  }

  void deletePath(TBrokerOperationStatus& _return, const TBrokerDeletePathRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePath(_return, request);
    }
    ifaces_[i]->deletePath(_return, request);
    return;
  }

  void renamePath(TBrokerOperationStatus& _return, const TBrokerRenamePathRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->renamePath(_return, request);
    }
    ifaces_[i]->renamePath(_return, request);
    return;
  }

  void checkPathExist(TBrokerCheckPathExistResponse& _return, const TBrokerCheckPathExistRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkPathExist(_return, request);
    }
    ifaces_[i]->checkPathExist(_return, request);
    return;
  }

  void openReader(TBrokerOpenReaderResponse& _return, const TBrokerOpenReaderRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openReader(_return, request);
    }
    ifaces_[i]->openReader(_return, request);
    return;
  }

  void pread(TBrokerReadResponse& _return, const TBrokerPReadRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pread(_return, request);
    }
    ifaces_[i]->pread(_return, request);
    return;
  }

  void seek(TBrokerOperationStatus& _return, const TBrokerSeekRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seek(_return, request);
    }
    ifaces_[i]->seek(_return, request);
    return;
  }

  void closeReader(TBrokerOperationStatus& _return, const TBrokerCloseReaderRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeReader(_return, request);
    }
    ifaces_[i]->closeReader(_return, request);
    return;
  }

  void openWriter(TBrokerOpenWriterResponse& _return, const TBrokerOpenWriterRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openWriter(_return, request);
    }
    ifaces_[i]->openWriter(_return, request);
    return;
  }

  void pwrite(TBrokerOperationStatus& _return, const TBrokerPWriteRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pwrite(_return, request);
    }
    ifaces_[i]->pwrite(_return, request);
    return;
  }

  void closeWriter(TBrokerOperationStatus& _return, const TBrokerCloseWriterRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeWriter(_return, request);
    }
    ifaces_[i]->closeWriter(_return, request);
    return;
  }

  void ping(TBrokerOperationStatus& _return, const TBrokerPingBrokerRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, request);
    }
    ifaces_[i]->ping(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TPaloBrokerServiceConcurrentClient : virtual public TPaloBrokerServiceIf {
 public:
  TPaloBrokerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TPaloBrokerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void listPath(TBrokerListResponse& _return, const TBrokerListPathRequest& request);
  int32_t send_listPath(const TBrokerListPathRequest& request);
  void recv_listPath(TBrokerListResponse& _return, const int32_t seqid);
  void deletePath(TBrokerOperationStatus& _return, const TBrokerDeletePathRequest& request);
  int32_t send_deletePath(const TBrokerDeletePathRequest& request);
  void recv_deletePath(TBrokerOperationStatus& _return, const int32_t seqid);
  void renamePath(TBrokerOperationStatus& _return, const TBrokerRenamePathRequest& request);
  int32_t send_renamePath(const TBrokerRenamePathRequest& request);
  void recv_renamePath(TBrokerOperationStatus& _return, const int32_t seqid);
  void checkPathExist(TBrokerCheckPathExistResponse& _return, const TBrokerCheckPathExistRequest& request);
  int32_t send_checkPathExist(const TBrokerCheckPathExistRequest& request);
  void recv_checkPathExist(TBrokerCheckPathExistResponse& _return, const int32_t seqid);
  void openReader(TBrokerOpenReaderResponse& _return, const TBrokerOpenReaderRequest& request);
  int32_t send_openReader(const TBrokerOpenReaderRequest& request);
  void recv_openReader(TBrokerOpenReaderResponse& _return, const int32_t seqid);
  void pread(TBrokerReadResponse& _return, const TBrokerPReadRequest& request);
  int32_t send_pread(const TBrokerPReadRequest& request);
  void recv_pread(TBrokerReadResponse& _return, const int32_t seqid);
  void seek(TBrokerOperationStatus& _return, const TBrokerSeekRequest& request);
  int32_t send_seek(const TBrokerSeekRequest& request);
  void recv_seek(TBrokerOperationStatus& _return, const int32_t seqid);
  void closeReader(TBrokerOperationStatus& _return, const TBrokerCloseReaderRequest& request);
  int32_t send_closeReader(const TBrokerCloseReaderRequest& request);
  void recv_closeReader(TBrokerOperationStatus& _return, const int32_t seqid);
  void openWriter(TBrokerOpenWriterResponse& _return, const TBrokerOpenWriterRequest& request);
  int32_t send_openWriter(const TBrokerOpenWriterRequest& request);
  void recv_openWriter(TBrokerOpenWriterResponse& _return, const int32_t seqid);
  void pwrite(TBrokerOperationStatus& _return, const TBrokerPWriteRequest& request);
  int32_t send_pwrite(const TBrokerPWriteRequest& request);
  void recv_pwrite(TBrokerOperationStatus& _return, const int32_t seqid);
  void closeWriter(TBrokerOperationStatus& _return, const TBrokerCloseWriterRequest& request);
  int32_t send_closeWriter(const TBrokerCloseWriterRequest& request);
  void recv_closeWriter(TBrokerOperationStatus& _return, const int32_t seqid);
  void ping(TBrokerOperationStatus& _return, const TBrokerPingBrokerRequest& request);
  int32_t send_ping(const TBrokerPingBrokerRequest& request);
  void recv_ping(TBrokerOperationStatus& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
