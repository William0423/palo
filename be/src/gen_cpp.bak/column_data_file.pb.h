// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: column_data_file.proto

#ifndef PROTOBUF_column_5fdata_5ffile_2eproto__INCLUDED
#define PROTOBUF_column_5fdata_5ffile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "olap_common.pb.h"
// @@protoc_insertion_point(includes)

namespace palo {
namespace column_file {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_column_5fdata_5ffile_2eproto();
void protobuf_AssignDesc_column_5fdata_5ffile_2eproto();
void protobuf_ShutdownFile_column_5fdata_5ffile_2eproto();

class StreamInfoMessage;
class ColumnEncodingMessage;
class ColumnDataHeaderMessage;

enum StreamInfoMessage_Kind {
  StreamInfoMessage_Kind_ROW_INDEX = 0,
  StreamInfoMessage_Kind_PRESENT = 1,
  StreamInfoMessage_Kind_DATA = 2,
  StreamInfoMessage_Kind_LENGTH = 3,
  StreamInfoMessage_Kind_DICTIONARY_DATA = 4,
  StreamInfoMessage_Kind_SECONDARY = 5,
  StreamInfoMessage_Kind_ROW_INDEX_STATISTIC = 6,
  StreamInfoMessage_Kind_BLOOM_FILTER = 7
};
bool StreamInfoMessage_Kind_IsValid(int value);
const StreamInfoMessage_Kind StreamInfoMessage_Kind_Kind_MIN = StreamInfoMessage_Kind_ROW_INDEX;
const StreamInfoMessage_Kind StreamInfoMessage_Kind_Kind_MAX = StreamInfoMessage_Kind_BLOOM_FILTER;
const int StreamInfoMessage_Kind_Kind_ARRAYSIZE = StreamInfoMessage_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamInfoMessage_Kind_descriptor();
inline const ::std::string& StreamInfoMessage_Kind_Name(StreamInfoMessage_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamInfoMessage_Kind_descriptor(), value);
}
inline bool StreamInfoMessage_Kind_Parse(
    const ::std::string& name, StreamInfoMessage_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamInfoMessage_Kind>(
    StreamInfoMessage_Kind_descriptor(), name, value);
}
enum ColumnEncodingMessage_Kind {
  ColumnEncodingMessage_Kind_DIRECT = 0,
  ColumnEncodingMessage_Kind_DICTIONARY = 1
};
bool ColumnEncodingMessage_Kind_IsValid(int value);
const ColumnEncodingMessage_Kind ColumnEncodingMessage_Kind_Kind_MIN = ColumnEncodingMessage_Kind_DIRECT;
const ColumnEncodingMessage_Kind ColumnEncodingMessage_Kind_Kind_MAX = ColumnEncodingMessage_Kind_DICTIONARY;
const int ColumnEncodingMessage_Kind_Kind_ARRAYSIZE = ColumnEncodingMessage_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnEncodingMessage_Kind_descriptor();
inline const ::std::string& ColumnEncodingMessage_Kind_Name(ColumnEncodingMessage_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnEncodingMessage_Kind_descriptor(), value);
}
inline bool ColumnEncodingMessage_Kind_Parse(
    const ::std::string& name, ColumnEncodingMessage_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnEncodingMessage_Kind>(
    ColumnEncodingMessage_Kind_descriptor(), name, value);
}
// ===================================================================

class StreamInfoMessage : public ::google::protobuf::Message {
 public:
  StreamInfoMessage();
  virtual ~StreamInfoMessage();

  StreamInfoMessage(const StreamInfoMessage& from);

  inline StreamInfoMessage& operator=(const StreamInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamInfoMessage& default_instance();

  void Swap(StreamInfoMessage* other);

  // implements Message ----------------------------------------------

  StreamInfoMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamInfoMessage& from);
  void MergeFrom(const StreamInfoMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StreamInfoMessage_Kind Kind;
  static const Kind ROW_INDEX = StreamInfoMessage_Kind_ROW_INDEX;
  static const Kind PRESENT = StreamInfoMessage_Kind_PRESENT;
  static const Kind DATA = StreamInfoMessage_Kind_DATA;
  static const Kind LENGTH = StreamInfoMessage_Kind_LENGTH;
  static const Kind DICTIONARY_DATA = StreamInfoMessage_Kind_DICTIONARY_DATA;
  static const Kind SECONDARY = StreamInfoMessage_Kind_SECONDARY;
  static const Kind ROW_INDEX_STATISTIC = StreamInfoMessage_Kind_ROW_INDEX_STATISTIC;
  static const Kind BLOOM_FILTER = StreamInfoMessage_Kind_BLOOM_FILTER;
  static inline bool Kind_IsValid(int value) {
    return StreamInfoMessage_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    StreamInfoMessage_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    StreamInfoMessage_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    StreamInfoMessage_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return StreamInfoMessage_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return StreamInfoMessage_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return StreamInfoMessage_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .palo.column_file.StreamInfoMessage.Kind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::palo::column_file::StreamInfoMessage_Kind kind() const;
  inline void set_kind(::palo::column_file::StreamInfoMessage_Kind value);

  // required uint32 column_unique_id = 2;
  inline bool has_column_unique_id() const;
  inline void clear_column_unique_id();
  static const int kColumnUniqueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 column_unique_id() const;
  inline void set_column_unique_id(::google::protobuf::uint32 value);

  // required uint64 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:palo.column_file.StreamInfoMessage)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_column_unique_id();
  inline void clear_has_column_unique_id();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int kind_;
  ::google::protobuf::uint32 column_unique_id_;
  ::google::protobuf::uint64 length_;
  friend void  protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  friend void protobuf_AssignDesc_column_5fdata_5ffile_2eproto();
  friend void protobuf_ShutdownFile_column_5fdata_5ffile_2eproto();

  void InitAsDefaultInstance();
  static StreamInfoMessage* default_instance_;
};
// -------------------------------------------------------------------

class ColumnEncodingMessage : public ::google::protobuf::Message {
 public:
  ColumnEncodingMessage();
  virtual ~ColumnEncodingMessage();

  ColumnEncodingMessage(const ColumnEncodingMessage& from);

  inline ColumnEncodingMessage& operator=(const ColumnEncodingMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnEncodingMessage& default_instance();

  void Swap(ColumnEncodingMessage* other);

  // implements Message ----------------------------------------------

  ColumnEncodingMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnEncodingMessage& from);
  void MergeFrom(const ColumnEncodingMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ColumnEncodingMessage_Kind Kind;
  static const Kind DIRECT = ColumnEncodingMessage_Kind_DIRECT;
  static const Kind DICTIONARY = ColumnEncodingMessage_Kind_DICTIONARY;
  static inline bool Kind_IsValid(int value) {
    return ColumnEncodingMessage_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    ColumnEncodingMessage_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    ColumnEncodingMessage_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    ColumnEncodingMessage_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return ColumnEncodingMessage_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return ColumnEncodingMessage_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return ColumnEncodingMessage_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .palo.column_file.ColumnEncodingMessage.Kind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::palo::column_file::ColumnEncodingMessage_Kind kind() const;
  inline void set_kind(::palo::column_file::ColumnEncodingMessage_Kind value);

  // optional uint32 dictionary_size = 2;
  inline bool has_dictionary_size() const;
  inline void clear_dictionary_size();
  static const int kDictionarySizeFieldNumber = 2;
  inline ::google::protobuf::uint32 dictionary_size() const;
  inline void set_dictionary_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:palo.column_file.ColumnEncodingMessage)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_dictionary_size();
  inline void clear_has_dictionary_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int kind_;
  ::google::protobuf::uint32 dictionary_size_;
  friend void  protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  friend void protobuf_AssignDesc_column_5fdata_5ffile_2eproto();
  friend void protobuf_ShutdownFile_column_5fdata_5ffile_2eproto();

  void InitAsDefaultInstance();
  static ColumnEncodingMessage* default_instance_;
};
// -------------------------------------------------------------------

class ColumnDataHeaderMessage : public ::google::protobuf::Message {
 public:
  ColumnDataHeaderMessage();
  virtual ~ColumnDataHeaderMessage();

  ColumnDataHeaderMessage(const ColumnDataHeaderMessage& from);

  inline ColumnDataHeaderMessage& operator=(const ColumnDataHeaderMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnDataHeaderMessage& default_instance();

  void Swap(ColumnDataHeaderMessage* other);

  // implements Message ----------------------------------------------

  ColumnDataHeaderMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnDataHeaderMessage& from);
  void MergeFrom(const ColumnDataHeaderMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string magic_string = 1 [default = "COLUMN DATA"];
  inline bool has_magic_string() const;
  inline void clear_magic_string();
  static const int kMagicStringFieldNumber = 1;
  inline const ::std::string& magic_string() const;
  inline void set_magic_string(const ::std::string& value);
  inline void set_magic_string(const char* value);
  inline void set_magic_string(const char* value, size_t size);
  inline ::std::string* mutable_magic_string();
  inline ::std::string* release_magic_string();
  inline void set_allocated_magic_string(::std::string* magic_string);

  // required uint32 version = 2 [default = 1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required uint64 number_of_rows = 4;
  inline bool has_number_of_rows() const;
  inline void clear_number_of_rows();
  static const int kNumberOfRowsFieldNumber = 4;
  inline ::google::protobuf::uint64 number_of_rows() const;
  inline void set_number_of_rows(::google::protobuf::uint64 value);

  // repeated .palo.ColumnMessage column = 5;
  inline int column_size() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 5;
  inline const ::palo::ColumnMessage& column(int index) const;
  inline ::palo::ColumnMessage* mutable_column(int index);
  inline ::palo::ColumnMessage* add_column();
  inline const ::google::protobuf::RepeatedPtrField< ::palo::ColumnMessage >&
      column() const;
  inline ::google::protobuf::RepeatedPtrField< ::palo::ColumnMessage >*
      mutable_column();

  // required uint64 index_length = 7;
  inline bool has_index_length() const;
  inline void clear_index_length();
  static const int kIndexLengthFieldNumber = 7;
  inline ::google::protobuf::uint64 index_length() const;
  inline void set_index_length(::google::protobuf::uint64 value);

  // required uint64 data_length = 8;
  inline bool has_data_length() const;
  inline void clear_data_length();
  static const int kDataLengthFieldNumber = 8;
  inline ::google::protobuf::uint64 data_length() const;
  inline void set_data_length(::google::protobuf::uint64 value);

  // required .palo.CompressKind compress_kind = 9 [default = COMPRESS_LZO];
  inline bool has_compress_kind() const;
  inline void clear_compress_kind();
  static const int kCompressKindFieldNumber = 9;
  inline ::palo::CompressKind compress_kind() const;
  inline void set_compress_kind(::palo::CompressKind value);

  // repeated .palo.column_file.StreamInfoMessage stream_info = 10;
  inline int stream_info_size() const;
  inline void clear_stream_info();
  static const int kStreamInfoFieldNumber = 10;
  inline const ::palo::column_file::StreamInfoMessage& stream_info(int index) const;
  inline ::palo::column_file::StreamInfoMessage* mutable_stream_info(int index);
  inline ::palo::column_file::StreamInfoMessage* add_stream_info();
  inline const ::google::protobuf::RepeatedPtrField< ::palo::column_file::StreamInfoMessage >&
      stream_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::palo::column_file::StreamInfoMessage >*
      mutable_stream_info();

  // repeated .palo.column_file.ColumnEncodingMessage column_encoding = 11;
  inline int column_encoding_size() const;
  inline void clear_column_encoding();
  static const int kColumnEncodingFieldNumber = 11;
  inline const ::palo::column_file::ColumnEncodingMessage& column_encoding(int index) const;
  inline ::palo::column_file::ColumnEncodingMessage* mutable_column_encoding(int index);
  inline ::palo::column_file::ColumnEncodingMessage* add_column_encoding();
  inline const ::google::protobuf::RepeatedPtrField< ::palo::column_file::ColumnEncodingMessage >&
      column_encoding() const;
  inline ::google::protobuf::RepeatedPtrField< ::palo::column_file::ColumnEncodingMessage >*
      mutable_column_encoding();

  // required uint32 stream_buffer_size = 12;
  inline bool has_stream_buffer_size() const;
  inline void clear_stream_buffer_size();
  static const int kStreamBufferSizeFieldNumber = 12;
  inline ::google::protobuf::uint32 stream_buffer_size() const;
  inline void set_stream_buffer_size(::google::protobuf::uint32 value);

  // optional uint32 num_rows_per_block = 13 [default = 0];
  inline bool has_num_rows_per_block() const;
  inline void clear_num_rows_per_block();
  static const int kNumRowsPerBlockFieldNumber = 13;
  inline ::google::protobuf::uint32 num_rows_per_block() const;
  inline void set_num_rows_per_block(::google::protobuf::uint32 value);

  // optional uint32 bf_hash_function_num = 14;
  inline bool has_bf_hash_function_num() const;
  inline void clear_bf_hash_function_num();
  static const int kBfHashFunctionNumFieldNumber = 14;
  inline ::google::protobuf::uint32 bf_hash_function_num() const;
  inline void set_bf_hash_function_num(::google::protobuf::uint32 value);

  // optional uint32 bf_bit_num = 15;
  inline bool has_bf_bit_num() const;
  inline void clear_bf_bit_num();
  static const int kBfBitNumFieldNumber = 15;
  inline ::google::protobuf::uint32 bf_bit_num() const;
  inline void set_bf_bit_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:palo.column_file.ColumnDataHeaderMessage)
 private:
  inline void set_has_magic_string();
  inline void clear_has_magic_string();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_number_of_rows();
  inline void clear_has_number_of_rows();
  inline void set_has_index_length();
  inline void clear_has_index_length();
  inline void set_has_data_length();
  inline void clear_has_data_length();
  inline void set_has_compress_kind();
  inline void clear_has_compress_kind();
  inline void set_has_stream_buffer_size();
  inline void clear_has_stream_buffer_size();
  inline void set_has_num_rows_per_block();
  inline void clear_has_num_rows_per_block();
  inline void set_has_bf_hash_function_num();
  inline void clear_has_bf_hash_function_num();
  inline void set_has_bf_bit_num();
  inline void clear_has_bf_bit_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_magic_string_;
  ::std::string* magic_string_;
  ::google::protobuf::uint64 number_of_rows_;
  ::google::protobuf::RepeatedPtrField< ::palo::ColumnMessage > column_;
  ::google::protobuf::uint32 version_;
  int compress_kind_;
  ::google::protobuf::uint64 index_length_;
  ::google::protobuf::uint64 data_length_;
  ::google::protobuf::RepeatedPtrField< ::palo::column_file::StreamInfoMessage > stream_info_;
  ::google::protobuf::RepeatedPtrField< ::palo::column_file::ColumnEncodingMessage > column_encoding_;
  ::google::protobuf::uint32 stream_buffer_size_;
  ::google::protobuf::uint32 num_rows_per_block_;
  ::google::protobuf::uint32 bf_hash_function_num_;
  ::google::protobuf::uint32 bf_bit_num_;
  friend void  protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  friend void protobuf_AssignDesc_column_5fdata_5ffile_2eproto();
  friend void protobuf_ShutdownFile_column_5fdata_5ffile_2eproto();

  void InitAsDefaultInstance();
  static ColumnDataHeaderMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// StreamInfoMessage

// required .palo.column_file.StreamInfoMessage.Kind kind = 1;
inline bool StreamInfoMessage::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamInfoMessage::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamInfoMessage::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamInfoMessage::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::palo::column_file::StreamInfoMessage_Kind StreamInfoMessage::kind() const {
  // @@protoc_insertion_point(field_get:palo.column_file.StreamInfoMessage.kind)
  return static_cast< ::palo::column_file::StreamInfoMessage_Kind >(kind_);
}
inline void StreamInfoMessage::set_kind(::palo::column_file::StreamInfoMessage_Kind value) {
  assert(::palo::column_file::StreamInfoMessage_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.StreamInfoMessage.kind)
}

// required uint32 column_unique_id = 2;
inline bool StreamInfoMessage::has_column_unique_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamInfoMessage::set_has_column_unique_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamInfoMessage::clear_has_column_unique_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamInfoMessage::clear_column_unique_id() {
  column_unique_id_ = 0u;
  clear_has_column_unique_id();
}
inline ::google::protobuf::uint32 StreamInfoMessage::column_unique_id() const {
  // @@protoc_insertion_point(field_get:palo.column_file.StreamInfoMessage.column_unique_id)
  return column_unique_id_;
}
inline void StreamInfoMessage::set_column_unique_id(::google::protobuf::uint32 value) {
  set_has_column_unique_id();
  column_unique_id_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.StreamInfoMessage.column_unique_id)
}

// required uint64 length = 3;
inline bool StreamInfoMessage::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamInfoMessage::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamInfoMessage::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamInfoMessage::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 StreamInfoMessage::length() const {
  // @@protoc_insertion_point(field_get:palo.column_file.StreamInfoMessage.length)
  return length_;
}
inline void StreamInfoMessage::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.StreamInfoMessage.length)
}

// -------------------------------------------------------------------

// ColumnEncodingMessage

// optional .palo.column_file.ColumnEncodingMessage.Kind kind = 1;
inline bool ColumnEncodingMessage::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnEncodingMessage::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnEncodingMessage::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnEncodingMessage::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::palo::column_file::ColumnEncodingMessage_Kind ColumnEncodingMessage::kind() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnEncodingMessage.kind)
  return static_cast< ::palo::column_file::ColumnEncodingMessage_Kind >(kind_);
}
inline void ColumnEncodingMessage::set_kind(::palo::column_file::ColumnEncodingMessage_Kind value) {
  assert(::palo::column_file::ColumnEncodingMessage_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnEncodingMessage.kind)
}

// optional uint32 dictionary_size = 2;
inline bool ColumnEncodingMessage::has_dictionary_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnEncodingMessage::set_has_dictionary_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnEncodingMessage::clear_has_dictionary_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnEncodingMessage::clear_dictionary_size() {
  dictionary_size_ = 0u;
  clear_has_dictionary_size();
}
inline ::google::protobuf::uint32 ColumnEncodingMessage::dictionary_size() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnEncodingMessage.dictionary_size)
  return dictionary_size_;
}
inline void ColumnEncodingMessage::set_dictionary_size(::google::protobuf::uint32 value) {
  set_has_dictionary_size();
  dictionary_size_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnEncodingMessage.dictionary_size)
}

// -------------------------------------------------------------------

// ColumnDataHeaderMessage

// required string magic_string = 1 [default = "COLUMN DATA"];
inline bool ColumnDataHeaderMessage::has_magic_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_magic_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnDataHeaderMessage::clear_has_magic_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnDataHeaderMessage::clear_magic_string() {
  if (magic_string_ != _default_magic_string_) {
    magic_string_->assign(*_default_magic_string_);
  }
  clear_has_magic_string();
}
inline const ::std::string& ColumnDataHeaderMessage::magic_string() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.magic_string)
  return *magic_string_;
}
inline void ColumnDataHeaderMessage::set_magic_string(const ::std::string& value) {
  set_has_magic_string();
  if (magic_string_ == _default_magic_string_) {
    magic_string_ = new ::std::string;
  }
  magic_string_->assign(value);
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.magic_string)
}
inline void ColumnDataHeaderMessage::set_magic_string(const char* value) {
  set_has_magic_string();
  if (magic_string_ == _default_magic_string_) {
    magic_string_ = new ::std::string;
  }
  magic_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:palo.column_file.ColumnDataHeaderMessage.magic_string)
}
inline void ColumnDataHeaderMessage::set_magic_string(const char* value, size_t size) {
  set_has_magic_string();
  if (magic_string_ == _default_magic_string_) {
    magic_string_ = new ::std::string;
  }
  magic_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palo.column_file.ColumnDataHeaderMessage.magic_string)
}
inline ::std::string* ColumnDataHeaderMessage::mutable_magic_string() {
  set_has_magic_string();
  if (magic_string_ == _default_magic_string_) {
    magic_string_ = new ::std::string(*_default_magic_string_);
  }
  // @@protoc_insertion_point(field_mutable:palo.column_file.ColumnDataHeaderMessage.magic_string)
  return magic_string_;
}
inline ::std::string* ColumnDataHeaderMessage::release_magic_string() {
  clear_has_magic_string();
  if (magic_string_ == _default_magic_string_) {
    return NULL;
  } else {
    ::std::string* temp = magic_string_;
    magic_string_ = const_cast< ::std::string*>(_default_magic_string_);
    return temp;
  }
}
inline void ColumnDataHeaderMessage::set_allocated_magic_string(::std::string* magic_string) {
  if (magic_string_ != _default_magic_string_) {
    delete magic_string_;
  }
  if (magic_string) {
    set_has_magic_string();
    magic_string_ = magic_string;
  } else {
    clear_has_magic_string();
    magic_string_ = const_cast< ::std::string*>(_default_magic_string_);
  }
  // @@protoc_insertion_point(field_set_allocated:palo.column_file.ColumnDataHeaderMessage.magic_string)
}

// required uint32 version = 2 [default = 1];
inline bool ColumnDataHeaderMessage::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnDataHeaderMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnDataHeaderMessage::clear_version() {
  version_ = 1u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ColumnDataHeaderMessage::version() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.version)
  return version_;
}
inline void ColumnDataHeaderMessage::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.version)
}

// required uint64 number_of_rows = 4;
inline bool ColumnDataHeaderMessage::has_number_of_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_number_of_rows() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnDataHeaderMessage::clear_has_number_of_rows() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnDataHeaderMessage::clear_number_of_rows() {
  number_of_rows_ = GOOGLE_ULONGLONG(0);
  clear_has_number_of_rows();
}
inline ::google::protobuf::uint64 ColumnDataHeaderMessage::number_of_rows() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.number_of_rows)
  return number_of_rows_;
}
inline void ColumnDataHeaderMessage::set_number_of_rows(::google::protobuf::uint64 value) {
  set_has_number_of_rows();
  number_of_rows_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.number_of_rows)
}

// repeated .palo.ColumnMessage column = 5;
inline int ColumnDataHeaderMessage::column_size() const {
  return column_.size();
}
inline void ColumnDataHeaderMessage::clear_column() {
  column_.Clear();
}
inline const ::palo::ColumnMessage& ColumnDataHeaderMessage::column(int index) const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.column)
  return column_.Get(index);
}
inline ::palo::ColumnMessage* ColumnDataHeaderMessage::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:palo.column_file.ColumnDataHeaderMessage.column)
  return column_.Mutable(index);
}
inline ::palo::ColumnMessage* ColumnDataHeaderMessage::add_column() {
  // @@protoc_insertion_point(field_add:palo.column_file.ColumnDataHeaderMessage.column)
  return column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::palo::ColumnMessage >&
ColumnDataHeaderMessage::column() const {
  // @@protoc_insertion_point(field_list:palo.column_file.ColumnDataHeaderMessage.column)
  return column_;
}
inline ::google::protobuf::RepeatedPtrField< ::palo::ColumnMessage >*
ColumnDataHeaderMessage::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:palo.column_file.ColumnDataHeaderMessage.column)
  return &column_;
}

// required uint64 index_length = 7;
inline bool ColumnDataHeaderMessage::has_index_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_index_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnDataHeaderMessage::clear_has_index_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnDataHeaderMessage::clear_index_length() {
  index_length_ = GOOGLE_ULONGLONG(0);
  clear_has_index_length();
}
inline ::google::protobuf::uint64 ColumnDataHeaderMessage::index_length() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.index_length)
  return index_length_;
}
inline void ColumnDataHeaderMessage::set_index_length(::google::protobuf::uint64 value) {
  set_has_index_length();
  index_length_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.index_length)
}

// required uint64 data_length = 8;
inline bool ColumnDataHeaderMessage::has_data_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_data_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ColumnDataHeaderMessage::clear_has_data_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ColumnDataHeaderMessage::clear_data_length() {
  data_length_ = GOOGLE_ULONGLONG(0);
  clear_has_data_length();
}
inline ::google::protobuf::uint64 ColumnDataHeaderMessage::data_length() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.data_length)
  return data_length_;
}
inline void ColumnDataHeaderMessage::set_data_length(::google::protobuf::uint64 value) {
  set_has_data_length();
  data_length_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.data_length)
}

// required .palo.CompressKind compress_kind = 9 [default = COMPRESS_LZO];
inline bool ColumnDataHeaderMessage::has_compress_kind() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_compress_kind() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ColumnDataHeaderMessage::clear_has_compress_kind() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ColumnDataHeaderMessage::clear_compress_kind() {
  compress_kind_ = 1;
  clear_has_compress_kind();
}
inline ::palo::CompressKind ColumnDataHeaderMessage::compress_kind() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.compress_kind)
  return static_cast< ::palo::CompressKind >(compress_kind_);
}
inline void ColumnDataHeaderMessage::set_compress_kind(::palo::CompressKind value) {
  assert(::palo::CompressKind_IsValid(value));
  set_has_compress_kind();
  compress_kind_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.compress_kind)
}

// repeated .palo.column_file.StreamInfoMessage stream_info = 10;
inline int ColumnDataHeaderMessage::stream_info_size() const {
  return stream_info_.size();
}
inline void ColumnDataHeaderMessage::clear_stream_info() {
  stream_info_.Clear();
}
inline const ::palo::column_file::StreamInfoMessage& ColumnDataHeaderMessage::stream_info(int index) const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.stream_info)
  return stream_info_.Get(index);
}
inline ::palo::column_file::StreamInfoMessage* ColumnDataHeaderMessage::mutable_stream_info(int index) {
  // @@protoc_insertion_point(field_mutable:palo.column_file.ColumnDataHeaderMessage.stream_info)
  return stream_info_.Mutable(index);
}
inline ::palo::column_file::StreamInfoMessage* ColumnDataHeaderMessage::add_stream_info() {
  // @@protoc_insertion_point(field_add:palo.column_file.ColumnDataHeaderMessage.stream_info)
  return stream_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::palo::column_file::StreamInfoMessage >&
ColumnDataHeaderMessage::stream_info() const {
  // @@protoc_insertion_point(field_list:palo.column_file.ColumnDataHeaderMessage.stream_info)
  return stream_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::palo::column_file::StreamInfoMessage >*
ColumnDataHeaderMessage::mutable_stream_info() {
  // @@protoc_insertion_point(field_mutable_list:palo.column_file.ColumnDataHeaderMessage.stream_info)
  return &stream_info_;
}

// repeated .palo.column_file.ColumnEncodingMessage column_encoding = 11;
inline int ColumnDataHeaderMessage::column_encoding_size() const {
  return column_encoding_.size();
}
inline void ColumnDataHeaderMessage::clear_column_encoding() {
  column_encoding_.Clear();
}
inline const ::palo::column_file::ColumnEncodingMessage& ColumnDataHeaderMessage::column_encoding(int index) const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.column_encoding)
  return column_encoding_.Get(index);
}
inline ::palo::column_file::ColumnEncodingMessage* ColumnDataHeaderMessage::mutable_column_encoding(int index) {
  // @@protoc_insertion_point(field_mutable:palo.column_file.ColumnDataHeaderMessage.column_encoding)
  return column_encoding_.Mutable(index);
}
inline ::palo::column_file::ColumnEncodingMessage* ColumnDataHeaderMessage::add_column_encoding() {
  // @@protoc_insertion_point(field_add:palo.column_file.ColumnDataHeaderMessage.column_encoding)
  return column_encoding_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::palo::column_file::ColumnEncodingMessage >&
ColumnDataHeaderMessage::column_encoding() const {
  // @@protoc_insertion_point(field_list:palo.column_file.ColumnDataHeaderMessage.column_encoding)
  return column_encoding_;
}
inline ::google::protobuf::RepeatedPtrField< ::palo::column_file::ColumnEncodingMessage >*
ColumnDataHeaderMessage::mutable_column_encoding() {
  // @@protoc_insertion_point(field_mutable_list:palo.column_file.ColumnDataHeaderMessage.column_encoding)
  return &column_encoding_;
}

// required uint32 stream_buffer_size = 12;
inline bool ColumnDataHeaderMessage::has_stream_buffer_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_stream_buffer_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ColumnDataHeaderMessage::clear_has_stream_buffer_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ColumnDataHeaderMessage::clear_stream_buffer_size() {
  stream_buffer_size_ = 0u;
  clear_has_stream_buffer_size();
}
inline ::google::protobuf::uint32 ColumnDataHeaderMessage::stream_buffer_size() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.stream_buffer_size)
  return stream_buffer_size_;
}
inline void ColumnDataHeaderMessage::set_stream_buffer_size(::google::protobuf::uint32 value) {
  set_has_stream_buffer_size();
  stream_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.stream_buffer_size)
}

// optional uint32 num_rows_per_block = 13 [default = 0];
inline bool ColumnDataHeaderMessage::has_num_rows_per_block() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_num_rows_per_block() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ColumnDataHeaderMessage::clear_has_num_rows_per_block() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ColumnDataHeaderMessage::clear_num_rows_per_block() {
  num_rows_per_block_ = 0u;
  clear_has_num_rows_per_block();
}
inline ::google::protobuf::uint32 ColumnDataHeaderMessage::num_rows_per_block() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.num_rows_per_block)
  return num_rows_per_block_;
}
inline void ColumnDataHeaderMessage::set_num_rows_per_block(::google::protobuf::uint32 value) {
  set_has_num_rows_per_block();
  num_rows_per_block_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.num_rows_per_block)
}

// optional uint32 bf_hash_function_num = 14;
inline bool ColumnDataHeaderMessage::has_bf_hash_function_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_bf_hash_function_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ColumnDataHeaderMessage::clear_has_bf_hash_function_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ColumnDataHeaderMessage::clear_bf_hash_function_num() {
  bf_hash_function_num_ = 0u;
  clear_has_bf_hash_function_num();
}
inline ::google::protobuf::uint32 ColumnDataHeaderMessage::bf_hash_function_num() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.bf_hash_function_num)
  return bf_hash_function_num_;
}
inline void ColumnDataHeaderMessage::set_bf_hash_function_num(::google::protobuf::uint32 value) {
  set_has_bf_hash_function_num();
  bf_hash_function_num_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.bf_hash_function_num)
}

// optional uint32 bf_bit_num = 15;
inline bool ColumnDataHeaderMessage::has_bf_bit_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ColumnDataHeaderMessage::set_has_bf_bit_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ColumnDataHeaderMessage::clear_has_bf_bit_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ColumnDataHeaderMessage::clear_bf_bit_num() {
  bf_bit_num_ = 0u;
  clear_has_bf_bit_num();
}
inline ::google::protobuf::uint32 ColumnDataHeaderMessage::bf_bit_num() const {
  // @@protoc_insertion_point(field_get:palo.column_file.ColumnDataHeaderMessage.bf_bit_num)
  return bf_bit_num_;
}
inline void ColumnDataHeaderMessage::set_bf_bit_num(::google::protobuf::uint32 value) {
  set_has_bf_bit_num();
  bf_bit_num_ = value;
  // @@protoc_insertion_point(field_set:palo.column_file.ColumnDataHeaderMessage.bf_bit_num)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace column_file
}  // namespace palo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::palo::column_file::StreamInfoMessage_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palo::column_file::StreamInfoMessage_Kind>() {
  return ::palo::column_file::StreamInfoMessage_Kind_descriptor();
}
template <> struct is_proto_enum< ::palo::column_file::ColumnEncodingMessage_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palo::column_file::ColumnEncodingMessage_Kind>() {
  return ::palo::column_file::ColumnEncodingMessage_Kind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_column_5fdata_5ffile_2eproto__INCLUDED
