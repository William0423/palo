/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NetworkTest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace palotest {


ThriftDataParams::~ThriftDataParams() throw() {
}


void ThriftDataParams::__set_data(const std::string& val) {
  this->data = val;
}

uint32_t ThriftDataParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ThriftDataParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftDataParams");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftDataParams &a, ThriftDataParams &b) {
  using ::std::swap;
  swap(a.data, b.data);
}

ThriftDataParams::ThriftDataParams(const ThriftDataParams& other0) {
  data = other0.data;
}
ThriftDataParams& ThriftDataParams::operator=(const ThriftDataParams& other1) {
  data = other1.data;
  return *this;
}
void ThriftDataParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftDataParams(";
  out << "data=" << to_string(data);
  out << ")";
}


ThriftDataResult::~ThriftDataResult() throw() {
}


void ThriftDataResult::__set_bytes_received(const int64_t val) {
  this->bytes_received = val;
}

uint32_t ThriftDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_bytes_received = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytes_received);
          isset_bytes_received = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_bytes_received)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ThriftDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftDataResult");

  xfer += oprot->writeFieldBegin("bytes_received", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bytes_received);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftDataResult &a, ThriftDataResult &b) {
  using ::std::swap;
  swap(a.bytes_received, b.bytes_received);
}

ThriftDataResult::ThriftDataResult(const ThriftDataResult& other2) {
  bytes_received = other2.bytes_received;
}
ThriftDataResult& ThriftDataResult::operator=(const ThriftDataResult& other3) {
  bytes_received = other3.bytes_received;
  return *this;
}
void ThriftDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftDataResult(";
  out << "bytes_received=" << to_string(bytes_received);
  out << ")";
}

} // namespace
