/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FrontendService_TYPES_H
#define FrontendService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Status_types.h"
#include "Types_types.h"
#include "PaloInternalService_types.h"
#include "PlanNodes_types.h"
#include "Planner_types.h"
#include "Descriptors_types.h"
#include "Data_types.h"
#include "Exprs_types.h"
#include "RuntimeProfile_types.h"
#include "MasterService_types.h"
#include "AgentService_types.h"


namespace palo {

struct TFileFormat {
  enum type {
    PARQUETFILE = 0,
    RCFILE = 1,
    SEQUENCEFILE = 2,
    TEXTFILE = 3
  };
};

extern const std::map<int, const char*> _TFileFormat_VALUES_TO_NAMES;

struct TSetType {
  enum type {
    OPT_DEFAULT = 0,
    OPT_GLOBAL = 1,
    OPT_SESSION = 2
  };
};

extern const std::map<int, const char*> _TSetType_VALUES_TO_NAMES;

struct TDdlType {
  enum type {
    USE = 0,
    DESCRIBE = 1,
    SET = 2,
    EXPLAIN = 3,
    KILL = 4,
    COMMON = 5
  };
};

extern const std::map<int, const char*> _TDdlType_VALUES_TO_NAMES;

struct FrontendServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _FrontendServiceVersion_VALUES_TO_NAMES;

class TSetSessionParams;

class TAuthenticateParams;

class TColumnDesc;

class TColumnDef;

class TDescribeTableParams;

class TDescribeTableResult;

class TShowVariableRequest;

class TShowVariableResult;

class TTableRowFormat;

class TPartitionKeyValue;

class TSessionState;

class TClientRequest;

class TExplainParams;

class TSetVar;

class TSetParams;

class TKillParams;

class TCommonDdlParams;

class TUseDbParams;

class TResultSetMetadata;

class TQueryExecRequest;

class TDdlExecRequest;

class TExplainResult;

class TExecRequest;

class TGetDbsParams;

class TGetDbsResult;

class TGetTablesParams;

class TTableStatus;

class TListTableStatusResult;

class TGetTablesResult;

class TReportExecStatusResult;

class TReportExecStatusParams;

class TFeResult;

class TMiniLoadRequest;

class TUpdateMiniEtlTaskStatusRequest;

class TMasterOpRequest;

class TColumnDefinition;

class TShowResultSetMetaData;

class TShowResultSet;

class TMasterOpResult;

class TLoadCheckRequest;

class TUpdateExportTaskStatusRequest;


class TSetSessionParams {
 public:

  TSetSessionParams(const TSetSessionParams&);
  TSetSessionParams& operator=(const TSetSessionParams&);
  TSetSessionParams() : user() {
  }

  virtual ~TSetSessionParams() throw();
  std::string user;

  void __set_user(const std::string& val);

  bool operator == (const TSetSessionParams & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TSetSessionParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSetSessionParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSetSessionParams &a, TSetSessionParams &b);

inline std::ostream& operator<<(std::ostream& out, const TSetSessionParams& obj)
{
  obj.printTo(out);
  return out;
}


class TAuthenticateParams {
 public:

  TAuthenticateParams(const TAuthenticateParams&);
  TAuthenticateParams& operator=(const TAuthenticateParams&);
  TAuthenticateParams() : user(), passwd() {
  }

  virtual ~TAuthenticateParams() throw();
  std::string user;
  std::string passwd;

  void __set_user(const std::string& val);

  void __set_passwd(const std::string& val);

  bool operator == (const TAuthenticateParams & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    return true;
  }
  bool operator != (const TAuthenticateParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAuthenticateParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAuthenticateParams &a, TAuthenticateParams &b);

inline std::ostream& operator<<(std::ostream& out, const TAuthenticateParams& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TColumnDesc__isset {
  _TColumnDesc__isset() : columnLength(false), columnPrecision(false), columnScale(false) {}
  bool columnLength :1;
  bool columnPrecision :1;
  bool columnScale :1;
} _TColumnDesc__isset;

class TColumnDesc {
 public:

  TColumnDesc(const TColumnDesc&);
  TColumnDesc& operator=(const TColumnDesc&);
  TColumnDesc() : columnName(), columnType(( ::palo::TPrimitiveType::type)0), columnLength(0), columnPrecision(0), columnScale(0) {
  }

  virtual ~TColumnDesc() throw();
  std::string columnName;
   ::palo::TPrimitiveType::type columnType;
  int32_t columnLength;
  int32_t columnPrecision;
  int32_t columnScale;

  _TColumnDesc__isset __isset;

  void __set_columnName(const std::string& val);

  void __set_columnType(const  ::palo::TPrimitiveType::type val);

  void __set_columnLength(const int32_t val);

  void __set_columnPrecision(const int32_t val);

  void __set_columnScale(const int32_t val);

  bool operator == (const TColumnDesc & rhs) const
  {
    if (!(columnName == rhs.columnName))
      return false;
    if (!(columnType == rhs.columnType))
      return false;
    if (__isset.columnLength != rhs.__isset.columnLength)
      return false;
    else if (__isset.columnLength && !(columnLength == rhs.columnLength))
      return false;
    if (__isset.columnPrecision != rhs.__isset.columnPrecision)
      return false;
    else if (__isset.columnPrecision && !(columnPrecision == rhs.columnPrecision))
      return false;
    if (__isset.columnScale != rhs.__isset.columnScale)
      return false;
    else if (__isset.columnScale && !(columnScale == rhs.columnScale))
      return false;
    return true;
  }
  bool operator != (const TColumnDesc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnDesc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnDesc &a, TColumnDesc &b);

inline std::ostream& operator<<(std::ostream& out, const TColumnDesc& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TColumnDef__isset {
  _TColumnDef__isset() : comment(false) {}
  bool comment :1;
} _TColumnDef__isset;

class TColumnDef {
 public:

  TColumnDef(const TColumnDef&);
  TColumnDef& operator=(const TColumnDef&);
  TColumnDef() : comment() {
  }

  virtual ~TColumnDef() throw();
  TColumnDesc columnDesc;
  std::string comment;

  _TColumnDef__isset __isset;

  void __set_columnDesc(const TColumnDesc& val);

  void __set_comment(const std::string& val);

  bool operator == (const TColumnDef & rhs) const
  {
    if (!(columnDesc == rhs.columnDesc))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const TColumnDef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnDef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnDef &a, TColumnDef &b);

inline std::ostream& operator<<(std::ostream& out, const TColumnDef& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TDescribeTableParams__isset {
  _TDescribeTableParams__isset() : db(false), user(false) {}
  bool db :1;
  bool user :1;
} _TDescribeTableParams__isset;

class TDescribeTableParams {
 public:

  TDescribeTableParams(const TDescribeTableParams&);
  TDescribeTableParams& operator=(const TDescribeTableParams&);
  TDescribeTableParams() : db(), table_name(), user() {
  }

  virtual ~TDescribeTableParams() throw();
  std::string db;
  std::string table_name;
  std::string user;

  _TDescribeTableParams__isset __isset;

  void __set_db(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_user(const std::string& val);

  bool operator == (const TDescribeTableParams & rhs) const
  {
    if (__isset.db != rhs.__isset.db)
      return false;
    else if (__isset.db && !(db == rhs.db))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TDescribeTableParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDescribeTableParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDescribeTableParams &a, TDescribeTableParams &b);

inline std::ostream& operator<<(std::ostream& out, const TDescribeTableParams& obj)
{
  obj.printTo(out);
  return out;
}


class TDescribeTableResult {
 public:

  TDescribeTableResult(const TDescribeTableResult&);
  TDescribeTableResult& operator=(const TDescribeTableResult&);
  TDescribeTableResult() {
  }

  virtual ~TDescribeTableResult() throw();
  std::vector<TColumnDef>  columns;

  void __set_columns(const std::vector<TColumnDef> & val);

  bool operator == (const TDescribeTableResult & rhs) const
  {
    if (!(columns == rhs.columns))
      return false;
    return true;
  }
  bool operator != (const TDescribeTableResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDescribeTableResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDescribeTableResult &a, TDescribeTableResult &b);

inline std::ostream& operator<<(std::ostream& out, const TDescribeTableResult& obj)
{
  obj.printTo(out);
  return out;
}


class TShowVariableRequest {
 public:

  TShowVariableRequest(const TShowVariableRequest&);
  TShowVariableRequest& operator=(const TShowVariableRequest&);
  TShowVariableRequest() : threadId(0), varType(( ::palo::TVarType::type)0) {
  }

  virtual ~TShowVariableRequest() throw();
  int64_t threadId;
   ::palo::TVarType::type varType;

  void __set_threadId(const int64_t val);

  void __set_varType(const  ::palo::TVarType::type val);

  bool operator == (const TShowVariableRequest & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    if (!(varType == rhs.varType))
      return false;
    return true;
  }
  bool operator != (const TShowVariableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TShowVariableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TShowVariableRequest &a, TShowVariableRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TShowVariableRequest& obj)
{
  obj.printTo(out);
  return out;
}


class TShowVariableResult {
 public:

  TShowVariableResult(const TShowVariableResult&);
  TShowVariableResult& operator=(const TShowVariableResult&);
  TShowVariableResult() {
  }

  virtual ~TShowVariableResult() throw();
  std::map<std::string, std::string>  variables;

  void __set_variables(const std::map<std::string, std::string> & val);

  bool operator == (const TShowVariableResult & rhs) const
  {
    if (!(variables == rhs.variables))
      return false;
    return true;
  }
  bool operator != (const TShowVariableResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TShowVariableResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TShowVariableResult &a, TShowVariableResult &b);

inline std::ostream& operator<<(std::ostream& out, const TShowVariableResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TTableRowFormat__isset {
  _TTableRowFormat__isset() : field_terminator(false), line_terminator(false), escaped_by(false) {}
  bool field_terminator :1;
  bool line_terminator :1;
  bool escaped_by :1;
} _TTableRowFormat__isset;

class TTableRowFormat {
 public:

  TTableRowFormat(const TTableRowFormat&);
  TTableRowFormat& operator=(const TTableRowFormat&);
  TTableRowFormat() : field_terminator(), line_terminator(), escaped_by() {
  }

  virtual ~TTableRowFormat() throw();
  std::string field_terminator;
  std::string line_terminator;
  std::string escaped_by;

  _TTableRowFormat__isset __isset;

  void __set_field_terminator(const std::string& val);

  void __set_line_terminator(const std::string& val);

  void __set_escaped_by(const std::string& val);

  bool operator == (const TTableRowFormat & rhs) const
  {
    if (__isset.field_terminator != rhs.__isset.field_terminator)
      return false;
    else if (__isset.field_terminator && !(field_terminator == rhs.field_terminator))
      return false;
    if (__isset.line_terminator != rhs.__isset.line_terminator)
      return false;
    else if (__isset.line_terminator && !(line_terminator == rhs.line_terminator))
      return false;
    if (__isset.escaped_by != rhs.__isset.escaped_by)
      return false;
    else if (__isset.escaped_by && !(escaped_by == rhs.escaped_by))
      return false;
    return true;
  }
  bool operator != (const TTableRowFormat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableRowFormat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTableRowFormat &a, TTableRowFormat &b);

inline std::ostream& operator<<(std::ostream& out, const TTableRowFormat& obj)
{
  obj.printTo(out);
  return out;
}


class TPartitionKeyValue {
 public:

  TPartitionKeyValue(const TPartitionKeyValue&);
  TPartitionKeyValue& operator=(const TPartitionKeyValue&);
  TPartitionKeyValue() : name(), value() {
  }

  virtual ~TPartitionKeyValue() throw();
  std::string name;
  std::string value;

  void __set_name(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const TPartitionKeyValue & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TPartitionKeyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPartitionKeyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPartitionKeyValue &a, TPartitionKeyValue &b);

inline std::ostream& operator<<(std::ostream& out, const TPartitionKeyValue& obj)
{
  obj.printTo(out);
  return out;
}


class TSessionState {
 public:

  TSessionState(const TSessionState&);
  TSessionState& operator=(const TSessionState&);
  TSessionState() : database(), user(), connection_id(0) {
  }

  virtual ~TSessionState() throw();
  std::string database;
  std::string user;
  int64_t connection_id;

  void __set_database(const std::string& val);

  void __set_user(const std::string& val);

  void __set_connection_id(const int64_t val);

  bool operator == (const TSessionState & rhs) const
  {
    if (!(database == rhs.database))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    return true;
  }
  bool operator != (const TSessionState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSessionState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSessionState &a, TSessionState &b);

inline std::ostream& operator<<(std::ostream& out, const TSessionState& obj)
{
  obj.printTo(out);
  return out;
}


class TClientRequest {
 public:

  TClientRequest(const TClientRequest&);
  TClientRequest& operator=(const TClientRequest&);
  TClientRequest() : stmt() {
  }

  virtual ~TClientRequest() throw();
  std::string stmt;
   ::palo::TQueryOptions queryOptions;
  TSessionState sessionState;

  void __set_stmt(const std::string& val);

  void __set_queryOptions(const  ::palo::TQueryOptions& val);

  void __set_sessionState(const TSessionState& val);

  bool operator == (const TClientRequest & rhs) const
  {
    if (!(stmt == rhs.stmt))
      return false;
    if (!(queryOptions == rhs.queryOptions))
      return false;
    if (!(sessionState == rhs.sessionState))
      return false;
    return true;
  }
  bool operator != (const TClientRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TClientRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TClientRequest &a, TClientRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TClientRequest& obj)
{
  obj.printTo(out);
  return out;
}


class TExplainParams {
 public:

  TExplainParams(const TExplainParams&);
  TExplainParams& operator=(const TExplainParams&);
  TExplainParams() : explain() {
  }

  virtual ~TExplainParams() throw();
  std::string explain;

  void __set_explain(const std::string& val);

  bool operator == (const TExplainParams & rhs) const
  {
    if (!(explain == rhs.explain))
      return false;
    return true;
  }
  bool operator != (const TExplainParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExplainParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TExplainParams &a, TExplainParams &b);

inline std::ostream& operator<<(std::ostream& out, const TExplainParams& obj)
{
  obj.printTo(out);
  return out;
}


class TSetVar {
 public:

  TSetVar(const TSetVar&);
  TSetVar& operator=(const TSetVar&);
  TSetVar() : type((TSetType::type)0), variable() {
  }

  virtual ~TSetVar() throw();
  TSetType::type type;
  std::string variable;
   ::palo::TExpr value;

  void __set_type(const TSetType::type val);

  void __set_variable(const std::string& val);

  void __set_value(const  ::palo::TExpr& val);

  bool operator == (const TSetVar & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(variable == rhs.variable))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TSetVar &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSetVar & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSetVar &a, TSetVar &b);

inline std::ostream& operator<<(std::ostream& out, const TSetVar& obj)
{
  obj.printTo(out);
  return out;
}


class TSetParams {
 public:

  TSetParams(const TSetParams&);
  TSetParams& operator=(const TSetParams&);
  TSetParams() {
  }

  virtual ~TSetParams() throw();
  std::vector<TSetVar>  set_vars;

  void __set_set_vars(const std::vector<TSetVar> & val);

  bool operator == (const TSetParams & rhs) const
  {
    if (!(set_vars == rhs.set_vars))
      return false;
    return true;
  }
  bool operator != (const TSetParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSetParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSetParams &a, TSetParams &b);

inline std::ostream& operator<<(std::ostream& out, const TSetParams& obj)
{
  obj.printTo(out);
  return out;
}


class TKillParams {
 public:

  TKillParams(const TKillParams&);
  TKillParams& operator=(const TKillParams&);
  TKillParams() : is_kill_connection(0), connection_id(0) {
  }

  virtual ~TKillParams() throw();
  bool is_kill_connection;
  int64_t connection_id;

  void __set_is_kill_connection(const bool val);

  void __set_connection_id(const int64_t val);

  bool operator == (const TKillParams & rhs) const
  {
    if (!(is_kill_connection == rhs.is_kill_connection))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    return true;
  }
  bool operator != (const TKillParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKillParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TKillParams &a, TKillParams &b);

inline std::ostream& operator<<(std::ostream& out, const TKillParams& obj)
{
  obj.printTo(out);
  return out;
}


class TCommonDdlParams {
 public:

  TCommonDdlParams(const TCommonDdlParams&);
  TCommonDdlParams& operator=(const TCommonDdlParams&);
  TCommonDdlParams() {
  }

  virtual ~TCommonDdlParams() throw();

  bool operator == (const TCommonDdlParams & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TCommonDdlParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCommonDdlParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCommonDdlParams &a, TCommonDdlParams &b);

inline std::ostream& operator<<(std::ostream& out, const TCommonDdlParams& obj)
{
  obj.printTo(out);
  return out;
}


class TUseDbParams {
 public:

  TUseDbParams(const TUseDbParams&);
  TUseDbParams& operator=(const TUseDbParams&);
  TUseDbParams() : db() {
  }

  virtual ~TUseDbParams() throw();
  std::string db;

  void __set_db(const std::string& val);

  bool operator == (const TUseDbParams & rhs) const
  {
    if (!(db == rhs.db))
      return false;
    return true;
  }
  bool operator != (const TUseDbParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUseDbParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUseDbParams &a, TUseDbParams &b);

inline std::ostream& operator<<(std::ostream& out, const TUseDbParams& obj)
{
  obj.printTo(out);
  return out;
}


class TResultSetMetadata {
 public:

  TResultSetMetadata(const TResultSetMetadata&);
  TResultSetMetadata& operator=(const TResultSetMetadata&);
  TResultSetMetadata() {
  }

  virtual ~TResultSetMetadata() throw();
  std::vector<TColumnDesc>  columnDescs;

  void __set_columnDescs(const std::vector<TColumnDesc> & val);

  bool operator == (const TResultSetMetadata & rhs) const
  {
    if (!(columnDescs == rhs.columnDescs))
      return false;
    return true;
  }
  bool operator != (const TResultSetMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResultSetMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResultSetMetadata &a, TResultSetMetadata &b);

inline std::ostream& operator<<(std::ostream& out, const TResultSetMetadata& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TQueryExecRequest__isset {
  _TQueryExecRequest__isset() : desc_tbl(false), dest_fragment_idx(false), per_node_scan_ranges(false), result_set_metadata(false), is_block_query(false) {}
  bool desc_tbl :1;
  bool dest_fragment_idx :1;
  bool per_node_scan_ranges :1;
  bool result_set_metadata :1;
  bool is_block_query :1;
} _TQueryExecRequest__isset;

class TQueryExecRequest {
 public:

  TQueryExecRequest(const TQueryExecRequest&);
  TQueryExecRequest& operator=(const TQueryExecRequest&);
  TQueryExecRequest() : stmt_type(( ::palo::TStmtType::type)0), is_block_query(0) {
  }

  virtual ~TQueryExecRequest() throw();
   ::palo::TDescriptorTable desc_tbl;
  std::vector< ::palo::TPlanFragment>  fragments;
  std::vector<int32_t>  dest_fragment_idx;
  std::map< ::palo::TPlanNodeId, std::vector< ::palo::TScanRangeLocations> >  per_node_scan_ranges;
  TResultSetMetadata result_set_metadata;
   ::palo::TQueryGlobals query_globals;
   ::palo::TStmtType::type stmt_type;
  bool is_block_query;

  _TQueryExecRequest__isset __isset;

  void __set_desc_tbl(const  ::palo::TDescriptorTable& val);

  void __set_fragments(const std::vector< ::palo::TPlanFragment> & val);

  void __set_dest_fragment_idx(const std::vector<int32_t> & val);

  void __set_per_node_scan_ranges(const std::map< ::palo::TPlanNodeId, std::vector< ::palo::TScanRangeLocations> > & val);

  void __set_result_set_metadata(const TResultSetMetadata& val);

  void __set_query_globals(const  ::palo::TQueryGlobals& val);

  void __set_stmt_type(const  ::palo::TStmtType::type val);

  void __set_is_block_query(const bool val);

  bool operator == (const TQueryExecRequest & rhs) const
  {
    if (__isset.desc_tbl != rhs.__isset.desc_tbl)
      return false;
    else if (__isset.desc_tbl && !(desc_tbl == rhs.desc_tbl))
      return false;
    if (!(fragments == rhs.fragments))
      return false;
    if (__isset.dest_fragment_idx != rhs.__isset.dest_fragment_idx)
      return false;
    else if (__isset.dest_fragment_idx && !(dest_fragment_idx == rhs.dest_fragment_idx))
      return false;
    if (__isset.per_node_scan_ranges != rhs.__isset.per_node_scan_ranges)
      return false;
    else if (__isset.per_node_scan_ranges && !(per_node_scan_ranges == rhs.per_node_scan_ranges))
      return false;
    if (__isset.result_set_metadata != rhs.__isset.result_set_metadata)
      return false;
    else if (__isset.result_set_metadata && !(result_set_metadata == rhs.result_set_metadata))
      return false;
    if (!(query_globals == rhs.query_globals))
      return false;
    if (!(stmt_type == rhs.stmt_type))
      return false;
    if (__isset.is_block_query != rhs.__isset.is_block_query)
      return false;
    else if (__isset.is_block_query && !(is_block_query == rhs.is_block_query))
      return false;
    return true;
  }
  bool operator != (const TQueryExecRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TQueryExecRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TQueryExecRequest &a, TQueryExecRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TQueryExecRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TDdlExecRequest__isset {
  _TDdlExecRequest__isset() : use_db_params(false), describe_table_params(false), explain_params(false), set_params(false), kill_params(false) {}
  bool use_db_params :1;
  bool describe_table_params :1;
  bool explain_params :1;
  bool set_params :1;
  bool kill_params :1;
} _TDdlExecRequest__isset;

class TDdlExecRequest {
 public:

  TDdlExecRequest(const TDdlExecRequest&);
  TDdlExecRequest& operator=(const TDdlExecRequest&);
  TDdlExecRequest() : ddl_type((TDdlType::type)0) {
  }

  virtual ~TDdlExecRequest() throw();
  TDdlType::type ddl_type;
  TUseDbParams use_db_params;
  TDescribeTableParams describe_table_params;
  TExplainParams explain_params;
  TSetParams set_params;
  TKillParams kill_params;

  _TDdlExecRequest__isset __isset;

  void __set_ddl_type(const TDdlType::type val);

  void __set_use_db_params(const TUseDbParams& val);

  void __set_describe_table_params(const TDescribeTableParams& val);

  void __set_explain_params(const TExplainParams& val);

  void __set_set_params(const TSetParams& val);

  void __set_kill_params(const TKillParams& val);

  bool operator == (const TDdlExecRequest & rhs) const
  {
    if (!(ddl_type == rhs.ddl_type))
      return false;
    if (__isset.use_db_params != rhs.__isset.use_db_params)
      return false;
    else if (__isset.use_db_params && !(use_db_params == rhs.use_db_params))
      return false;
    if (__isset.describe_table_params != rhs.__isset.describe_table_params)
      return false;
    else if (__isset.describe_table_params && !(describe_table_params == rhs.describe_table_params))
      return false;
    if (__isset.explain_params != rhs.__isset.explain_params)
      return false;
    else if (__isset.explain_params && !(explain_params == rhs.explain_params))
      return false;
    if (__isset.set_params != rhs.__isset.set_params)
      return false;
    else if (__isset.set_params && !(set_params == rhs.set_params))
      return false;
    if (__isset.kill_params != rhs.__isset.kill_params)
      return false;
    else if (__isset.kill_params && !(kill_params == rhs.kill_params))
      return false;
    return true;
  }
  bool operator != (const TDdlExecRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDdlExecRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDdlExecRequest &a, TDdlExecRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TDdlExecRequest& obj)
{
  obj.printTo(out);
  return out;
}


class TExplainResult {
 public:

  TExplainResult(const TExplainResult&);
  TExplainResult& operator=(const TExplainResult&);
  TExplainResult() {
  }

  virtual ~TExplainResult() throw();
  std::vector< ::palo::TResultRow>  results;

  void __set_results(const std::vector< ::palo::TResultRow> & val);

  bool operator == (const TExplainResult & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const TExplainResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExplainResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TExplainResult &a, TExplainResult &b);

inline std::ostream& operator<<(std::ostream& out, const TExplainResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TExecRequest__isset {
  _TExecRequest__isset() : sql_stmt(false), query_exec_request(false), ddl_exec_request(false), result_set_metadata(false), explain_result(false) {}
  bool sql_stmt :1;
  bool query_exec_request :1;
  bool ddl_exec_request :1;
  bool result_set_metadata :1;
  bool explain_result :1;
} _TExecRequest__isset;

class TExecRequest {
 public:

  TExecRequest(const TExecRequest&);
  TExecRequest& operator=(const TExecRequest&);
  TExecRequest() : stmt_type(( ::palo::TStmtType::type)0), sql_stmt() {
  }

  virtual ~TExecRequest() throw();
   ::palo::TStmtType::type stmt_type;
  std::string sql_stmt;
   ::palo::TUniqueId request_id;
   ::palo::TQueryOptions query_options;
  TQueryExecRequest query_exec_request;
  TDdlExecRequest ddl_exec_request;
  TResultSetMetadata result_set_metadata;
  TExplainResult explain_result;

  _TExecRequest__isset __isset;

  void __set_stmt_type(const  ::palo::TStmtType::type val);

  void __set_sql_stmt(const std::string& val);

  void __set_request_id(const  ::palo::TUniqueId& val);

  void __set_query_options(const  ::palo::TQueryOptions& val);

  void __set_query_exec_request(const TQueryExecRequest& val);

  void __set_ddl_exec_request(const TDdlExecRequest& val);

  void __set_result_set_metadata(const TResultSetMetadata& val);

  void __set_explain_result(const TExplainResult& val);

  bool operator == (const TExecRequest & rhs) const
  {
    if (!(stmt_type == rhs.stmt_type))
      return false;
    if (__isset.sql_stmt != rhs.__isset.sql_stmt)
      return false;
    else if (__isset.sql_stmt && !(sql_stmt == rhs.sql_stmt))
      return false;
    if (!(request_id == rhs.request_id))
      return false;
    if (!(query_options == rhs.query_options))
      return false;
    if (__isset.query_exec_request != rhs.__isset.query_exec_request)
      return false;
    else if (__isset.query_exec_request && !(query_exec_request == rhs.query_exec_request))
      return false;
    if (__isset.ddl_exec_request != rhs.__isset.ddl_exec_request)
      return false;
    else if (__isset.ddl_exec_request && !(ddl_exec_request == rhs.ddl_exec_request))
      return false;
    if (__isset.result_set_metadata != rhs.__isset.result_set_metadata)
      return false;
    else if (__isset.result_set_metadata && !(result_set_metadata == rhs.result_set_metadata))
      return false;
    if (__isset.explain_result != rhs.__isset.explain_result)
      return false;
    else if (__isset.explain_result && !(explain_result == rhs.explain_result))
      return false;
    return true;
  }
  bool operator != (const TExecRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExecRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TExecRequest &a, TExecRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TExecRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetDbsParams__isset {
  _TGetDbsParams__isset() : pattern(false), user(false) {}
  bool pattern :1;
  bool user :1;
} _TGetDbsParams__isset;

class TGetDbsParams {
 public:

  TGetDbsParams(const TGetDbsParams&);
  TGetDbsParams& operator=(const TGetDbsParams&);
  TGetDbsParams() : pattern(), user() {
  }

  virtual ~TGetDbsParams() throw();
  std::string pattern;
  std::string user;

  _TGetDbsParams__isset __isset;

  void __set_pattern(const std::string& val);

  void __set_user(const std::string& val);

  bool operator == (const TGetDbsParams & rhs) const
  {
    if (__isset.pattern != rhs.__isset.pattern)
      return false;
    else if (__isset.pattern && !(pattern == rhs.pattern))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TGetDbsParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetDbsParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetDbsParams &a, TGetDbsParams &b);

inline std::ostream& operator<<(std::ostream& out, const TGetDbsParams& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetDbsResult__isset {
  _TGetDbsResult__isset() : dbs(false) {}
  bool dbs :1;
} _TGetDbsResult__isset;

class TGetDbsResult {
 public:

  TGetDbsResult(const TGetDbsResult&);
  TGetDbsResult& operator=(const TGetDbsResult&);
  TGetDbsResult() {
  }

  virtual ~TGetDbsResult() throw();
  std::vector<std::string>  dbs;

  _TGetDbsResult__isset __isset;

  void __set_dbs(const std::vector<std::string> & val);

  bool operator == (const TGetDbsResult & rhs) const
  {
    if (!(dbs == rhs.dbs))
      return false;
    return true;
  }
  bool operator != (const TGetDbsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetDbsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetDbsResult &a, TGetDbsResult &b);

inline std::ostream& operator<<(std::ostream& out, const TGetDbsResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetTablesParams__isset {
  _TGetTablesParams__isset() : db(false), pattern(false), user(false) {}
  bool db :1;
  bool pattern :1;
  bool user :1;
} _TGetTablesParams__isset;

class TGetTablesParams {
 public:

  TGetTablesParams(const TGetTablesParams&);
  TGetTablesParams& operator=(const TGetTablesParams&);
  TGetTablesParams() : db(), pattern(), user() {
  }

  virtual ~TGetTablesParams() throw();
  std::string db;
  std::string pattern;
  std::string user;

  _TGetTablesParams__isset __isset;

  void __set_db(const std::string& val);

  void __set_pattern(const std::string& val);

  void __set_user(const std::string& val);

  bool operator == (const TGetTablesParams & rhs) const
  {
    if (__isset.db != rhs.__isset.db)
      return false;
    else if (__isset.db && !(db == rhs.db))
      return false;
    if (__isset.pattern != rhs.__isset.pattern)
      return false;
    else if (__isset.pattern && !(pattern == rhs.pattern))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TGetTablesParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetTablesParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTablesParams &a, TGetTablesParams &b);

inline std::ostream& operator<<(std::ostream& out, const TGetTablesParams& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TTableStatus__isset {
  _TTableStatus__isset() : engine(false) {}
  bool engine :1;
} _TTableStatus__isset;

class TTableStatus {
 public:

  TTableStatus(const TTableStatus&);
  TTableStatus& operator=(const TTableStatus&);
  TTableStatus() : name(), type(), comment(), engine() {
  }

  virtual ~TTableStatus() throw();
  std::string name;
  std::string type;
  std::string comment;
  std::string engine;

  _TTableStatus__isset __isset;

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_engine(const std::string& val);

  bool operator == (const TTableStatus & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (__isset.engine != rhs.__isset.engine)
      return false;
    else if (__isset.engine && !(engine == rhs.engine))
      return false;
    return true;
  }
  bool operator != (const TTableStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTableStatus &a, TTableStatus &b);

inline std::ostream& operator<<(std::ostream& out, const TTableStatus& obj)
{
  obj.printTo(out);
  return out;
}


class TListTableStatusResult {
 public:

  TListTableStatusResult(const TListTableStatusResult&);
  TListTableStatusResult& operator=(const TListTableStatusResult&);
  TListTableStatusResult() {
  }

  virtual ~TListTableStatusResult() throw();
  std::vector<TTableStatus>  tables;

  void __set_tables(const std::vector<TTableStatus> & val);

  bool operator == (const TListTableStatusResult & rhs) const
  {
    if (!(tables == rhs.tables))
      return false;
    return true;
  }
  bool operator != (const TListTableStatusResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListTableStatusResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListTableStatusResult &a, TListTableStatusResult &b);

inline std::ostream& operator<<(std::ostream& out, const TListTableStatusResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetTablesResult__isset {
  _TGetTablesResult__isset() : tables(false) {}
  bool tables :1;
} _TGetTablesResult__isset;

class TGetTablesResult {
 public:

  TGetTablesResult(const TGetTablesResult&);
  TGetTablesResult& operator=(const TGetTablesResult&);
  TGetTablesResult() {
  }

  virtual ~TGetTablesResult() throw();
  std::vector<std::string>  tables;

  _TGetTablesResult__isset __isset;

  void __set_tables(const std::vector<std::string> & val);

  bool operator == (const TGetTablesResult & rhs) const
  {
    if (!(tables == rhs.tables))
      return false;
    return true;
  }
  bool operator != (const TGetTablesResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetTablesResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTablesResult &a, TGetTablesResult &b);

inline std::ostream& operator<<(std::ostream& out, const TGetTablesResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TReportExecStatusResult__isset {
  _TReportExecStatusResult__isset() : status(false) {}
  bool status :1;
} _TReportExecStatusResult__isset;

class TReportExecStatusResult {
 public:

  TReportExecStatusResult(const TReportExecStatusResult&);
  TReportExecStatusResult& operator=(const TReportExecStatusResult&);
  TReportExecStatusResult() {
  }

  virtual ~TReportExecStatusResult() throw();
   ::palo::TStatus status;

  _TReportExecStatusResult__isset __isset;

  void __set_status(const  ::palo::TStatus& val);

  bool operator == (const TReportExecStatusResult & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TReportExecStatusResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TReportExecStatusResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TReportExecStatusResult &a, TReportExecStatusResult &b);

inline std::ostream& operator<<(std::ostream& out, const TReportExecStatusResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TReportExecStatusParams__isset {
  _TReportExecStatusParams__isset() : query_id(false), backend_num(false), fragment_instance_id(false), status(false), done(false), profile(false), error_log(false), delta_urls(false), load_counters(false), tracking_url(false), export_files(false) {}
  bool query_id :1;
  bool backend_num :1;
  bool fragment_instance_id :1;
  bool status :1;
  bool done :1;
  bool profile :1;
  bool error_log :1;
  bool delta_urls :1;
  bool load_counters :1;
  bool tracking_url :1;
  bool export_files :1;
} _TReportExecStatusParams__isset;

class TReportExecStatusParams {
 public:

  TReportExecStatusParams(const TReportExecStatusParams&);
  TReportExecStatusParams& operator=(const TReportExecStatusParams&);
  TReportExecStatusParams() : protocol_version((FrontendServiceVersion::type)0), backend_num(0), done(0), tracking_url() {
  }

  virtual ~TReportExecStatusParams() throw();
  FrontendServiceVersion::type protocol_version;
   ::palo::TUniqueId query_id;
  int32_t backend_num;
   ::palo::TUniqueId fragment_instance_id;
   ::palo::TStatus status;
  bool done;
   ::palo::TRuntimeProfileTree profile;
  std::vector<std::string>  error_log;
  std::vector<std::string>  delta_urls;
  std::map<std::string, std::string>  load_counters;
  std::string tracking_url;
  std::vector<std::string>  export_files;

  _TReportExecStatusParams__isset __isset;

  void __set_protocol_version(const FrontendServiceVersion::type val);

  void __set_query_id(const  ::palo::TUniqueId& val);

  void __set_backend_num(const int32_t val);

  void __set_fragment_instance_id(const  ::palo::TUniqueId& val);

  void __set_status(const  ::palo::TStatus& val);

  void __set_done(const bool val);

  void __set_profile(const  ::palo::TRuntimeProfileTree& val);

  void __set_error_log(const std::vector<std::string> & val);

  void __set_delta_urls(const std::vector<std::string> & val);

  void __set_load_counters(const std::map<std::string, std::string> & val);

  void __set_tracking_url(const std::string& val);

  void __set_export_files(const std::vector<std::string> & val);

  bool operator == (const TReportExecStatusParams & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (__isset.query_id != rhs.__isset.query_id)
      return false;
    else if (__isset.query_id && !(query_id == rhs.query_id))
      return false;
    if (__isset.backend_num != rhs.__isset.backend_num)
      return false;
    else if (__isset.backend_num && !(backend_num == rhs.backend_num))
      return false;
    if (__isset.fragment_instance_id != rhs.__isset.fragment_instance_id)
      return false;
    else if (__isset.fragment_instance_id && !(fragment_instance_id == rhs.fragment_instance_id))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.done != rhs.__isset.done)
      return false;
    else if (__isset.done && !(done == rhs.done))
      return false;
    if (__isset.profile != rhs.__isset.profile)
      return false;
    else if (__isset.profile && !(profile == rhs.profile))
      return false;
    if (__isset.error_log != rhs.__isset.error_log)
      return false;
    else if (__isset.error_log && !(error_log == rhs.error_log))
      return false;
    if (__isset.delta_urls != rhs.__isset.delta_urls)
      return false;
    else if (__isset.delta_urls && !(delta_urls == rhs.delta_urls))
      return false;
    if (__isset.load_counters != rhs.__isset.load_counters)
      return false;
    else if (__isset.load_counters && !(load_counters == rhs.load_counters))
      return false;
    if (__isset.tracking_url != rhs.__isset.tracking_url)
      return false;
    else if (__isset.tracking_url && !(tracking_url == rhs.tracking_url))
      return false;
    if (__isset.export_files != rhs.__isset.export_files)
      return false;
    else if (__isset.export_files && !(export_files == rhs.export_files))
      return false;
    return true;
  }
  bool operator != (const TReportExecStatusParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TReportExecStatusParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TReportExecStatusParams &a, TReportExecStatusParams &b);

inline std::ostream& operator<<(std::ostream& out, const TReportExecStatusParams& obj)
{
  obj.printTo(out);
  return out;
}


class TFeResult {
 public:

  TFeResult(const TFeResult&);
  TFeResult& operator=(const TFeResult&);
  TFeResult() : protocolVersion((FrontendServiceVersion::type)0) {
  }

  virtual ~TFeResult() throw();
  FrontendServiceVersion::type protocolVersion;
   ::palo::TStatus status;

  void __set_protocolVersion(const FrontendServiceVersion::type val);

  void __set_status(const  ::palo::TStatus& val);

  bool operator == (const TFeResult & rhs) const
  {
    if (!(protocolVersion == rhs.protocolVersion))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TFeResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFeResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TFeResult &a, TFeResult &b);

inline std::ostream& operator<<(std::ostream& out, const TFeResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TMiniLoadRequest__isset {
  _TMiniLoadRequest__isset() : user(false), subLabel(false), cluster(false), timestamp(false) {}
  bool user :1;
  bool subLabel :1;
  bool cluster :1;
  bool timestamp :1;
} _TMiniLoadRequest__isset;

class TMiniLoadRequest {
 public:

  TMiniLoadRequest(const TMiniLoadRequest&);
  TMiniLoadRequest& operator=(const TMiniLoadRequest&);
  TMiniLoadRequest() : protocolVersion((FrontendServiceVersion::type)0), db(), tbl(), label(), user(), subLabel(), cluster(), timestamp(0) {
  }

  virtual ~TMiniLoadRequest() throw();
  FrontendServiceVersion::type protocolVersion;
  std::string db;
  std::string tbl;
  std::string label;
  std::string user;
   ::palo::TNetworkAddress backend;
  std::vector<std::string>  files;
  std::map<std::string, std::string>  properties;
  std::string subLabel;
  std::string cluster;
  int64_t timestamp;

  _TMiniLoadRequest__isset __isset;

  void __set_protocolVersion(const FrontendServiceVersion::type val);

  void __set_db(const std::string& val);

  void __set_tbl(const std::string& val);

  void __set_label(const std::string& val);

  void __set_user(const std::string& val);

  void __set_backend(const  ::palo::TNetworkAddress& val);

  void __set_files(const std::vector<std::string> & val);

  void __set_properties(const std::map<std::string, std::string> & val);

  void __set_subLabel(const std::string& val);

  void __set_cluster(const std::string& val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TMiniLoadRequest & rhs) const
  {
    if (!(protocolVersion == rhs.protocolVersion))
      return false;
    if (!(db == rhs.db))
      return false;
    if (!(tbl == rhs.tbl))
      return false;
    if (!(label == rhs.label))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (!(backend == rhs.backend))
      return false;
    if (!(files == rhs.files))
      return false;
    if (!(properties == rhs.properties))
      return false;
    if (__isset.subLabel != rhs.__isset.subLabel)
      return false;
    else if (__isset.subLabel && !(subLabel == rhs.subLabel))
      return false;
    if (__isset.cluster != rhs.__isset.cluster)
      return false;
    else if (__isset.cluster && !(cluster == rhs.cluster))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TMiniLoadRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMiniLoadRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMiniLoadRequest &a, TMiniLoadRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TMiniLoadRequest& obj)
{
  obj.printTo(out);
  return out;
}


class TUpdateMiniEtlTaskStatusRequest {
 public:

  TUpdateMiniEtlTaskStatusRequest(const TUpdateMiniEtlTaskStatusRequest&);
  TUpdateMiniEtlTaskStatusRequest& operator=(const TUpdateMiniEtlTaskStatusRequest&);
  TUpdateMiniEtlTaskStatusRequest() : protocolVersion((FrontendServiceVersion::type)0) {
  }

  virtual ~TUpdateMiniEtlTaskStatusRequest() throw();
  FrontendServiceVersion::type protocolVersion;
   ::palo::TUniqueId etlTaskId;
   ::palo::TMiniLoadEtlStatusResult etlTaskStatus;

  void __set_protocolVersion(const FrontendServiceVersion::type val);

  void __set_etlTaskId(const  ::palo::TUniqueId& val);

  void __set_etlTaskStatus(const  ::palo::TMiniLoadEtlStatusResult& val);

  bool operator == (const TUpdateMiniEtlTaskStatusRequest & rhs) const
  {
    if (!(protocolVersion == rhs.protocolVersion))
      return false;
    if (!(etlTaskId == rhs.etlTaskId))
      return false;
    if (!(etlTaskStatus == rhs.etlTaskStatus))
      return false;
    return true;
  }
  bool operator != (const TUpdateMiniEtlTaskStatusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateMiniEtlTaskStatusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUpdateMiniEtlTaskStatusRequest &a, TUpdateMiniEtlTaskStatusRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TUpdateMiniEtlTaskStatusRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TMasterOpRequest__isset {
  _TMasterOpRequest__isset() : resourceInfo(false), cluster(false), execMemLimit(false), queryTimeout(false) {}
  bool resourceInfo :1;
  bool cluster :1;
  bool execMemLimit :1;
  bool queryTimeout :1;
} _TMasterOpRequest__isset;

class TMasterOpRequest {
 public:

  TMasterOpRequest(const TMasterOpRequest&);
  TMasterOpRequest& operator=(const TMasterOpRequest&);
  TMasterOpRequest() : user(), db(), sql(), cluster(), execMemLimit(0), queryTimeout(0) {
  }

  virtual ~TMasterOpRequest() throw();
  std::string user;
  std::string db;
  std::string sql;
   ::palo::TResourceInfo resourceInfo;
  std::string cluster;
  int64_t execMemLimit;
  int32_t queryTimeout;

  _TMasterOpRequest__isset __isset;

  void __set_user(const std::string& val);

  void __set_db(const std::string& val);

  void __set_sql(const std::string& val);

  void __set_resourceInfo(const  ::palo::TResourceInfo& val);

  void __set_cluster(const std::string& val);

  void __set_execMemLimit(const int64_t val);

  void __set_queryTimeout(const int32_t val);

  bool operator == (const TMasterOpRequest & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(db == rhs.db))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (__isset.resourceInfo != rhs.__isset.resourceInfo)
      return false;
    else if (__isset.resourceInfo && !(resourceInfo == rhs.resourceInfo))
      return false;
    if (__isset.cluster != rhs.__isset.cluster)
      return false;
    else if (__isset.cluster && !(cluster == rhs.cluster))
      return false;
    if (__isset.execMemLimit != rhs.__isset.execMemLimit)
      return false;
    else if (__isset.execMemLimit && !(execMemLimit == rhs.execMemLimit))
      return false;
    if (__isset.queryTimeout != rhs.__isset.queryTimeout)
      return false;
    else if (__isset.queryTimeout && !(queryTimeout == rhs.queryTimeout))
      return false;
    return true;
  }
  bool operator != (const TMasterOpRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMasterOpRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMasterOpRequest &a, TMasterOpRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TMasterOpRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TColumnDefinition__isset {
  _TColumnDefinition__isset() : aggType(false), defaultValue(false) {}
  bool aggType :1;
  bool defaultValue :1;
} _TColumnDefinition__isset;

class TColumnDefinition {
 public:

  TColumnDefinition(const TColumnDefinition&);
  TColumnDefinition& operator=(const TColumnDefinition&);
  TColumnDefinition() : columnName(), aggType(( ::palo::TAggregationType::type)0), defaultValue() {
  }

  virtual ~TColumnDefinition() throw();
  std::string columnName;
   ::palo::TColumnType columnType;
   ::palo::TAggregationType::type aggType;
  std::string defaultValue;

  _TColumnDefinition__isset __isset;

  void __set_columnName(const std::string& val);

  void __set_columnType(const  ::palo::TColumnType& val);

  void __set_aggType(const  ::palo::TAggregationType::type val);

  void __set_defaultValue(const std::string& val);

  bool operator == (const TColumnDefinition & rhs) const
  {
    if (!(columnName == rhs.columnName))
      return false;
    if (!(columnType == rhs.columnType))
      return false;
    if (__isset.aggType != rhs.__isset.aggType)
      return false;
    else if (__isset.aggType && !(aggType == rhs.aggType))
      return false;
    if (__isset.defaultValue != rhs.__isset.defaultValue)
      return false;
    else if (__isset.defaultValue && !(defaultValue == rhs.defaultValue))
      return false;
    return true;
  }
  bool operator != (const TColumnDefinition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnDefinition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnDefinition &a, TColumnDefinition &b);

inline std::ostream& operator<<(std::ostream& out, const TColumnDefinition& obj)
{
  obj.printTo(out);
  return out;
}


class TShowResultSetMetaData {
 public:

  TShowResultSetMetaData(const TShowResultSetMetaData&);
  TShowResultSetMetaData& operator=(const TShowResultSetMetaData&);
  TShowResultSetMetaData() {
  }

  virtual ~TShowResultSetMetaData() throw();
  std::vector<TColumnDefinition>  columns;

  void __set_columns(const std::vector<TColumnDefinition> & val);

  bool operator == (const TShowResultSetMetaData & rhs) const
  {
    if (!(columns == rhs.columns))
      return false;
    return true;
  }
  bool operator != (const TShowResultSetMetaData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TShowResultSetMetaData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TShowResultSetMetaData &a, TShowResultSetMetaData &b);

inline std::ostream& operator<<(std::ostream& out, const TShowResultSetMetaData& obj)
{
  obj.printTo(out);
  return out;
}


class TShowResultSet {
 public:

  TShowResultSet(const TShowResultSet&);
  TShowResultSet& operator=(const TShowResultSet&);
  TShowResultSet() {
  }

  virtual ~TShowResultSet() throw();
  TShowResultSetMetaData metaData;
  std::vector<std::vector<std::string> >  resultRows;

  void __set_metaData(const TShowResultSetMetaData& val);

  void __set_resultRows(const std::vector<std::vector<std::string> > & val);

  bool operator == (const TShowResultSet & rhs) const
  {
    if (!(metaData == rhs.metaData))
      return false;
    if (!(resultRows == rhs.resultRows))
      return false;
    return true;
  }
  bool operator != (const TShowResultSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TShowResultSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TShowResultSet &a, TShowResultSet &b);

inline std::ostream& operator<<(std::ostream& out, const TShowResultSet& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TMasterOpResult__isset {
  _TMasterOpResult__isset() : resultSet(false) {}
  bool resultSet :1;
} _TMasterOpResult__isset;

class TMasterOpResult {
 public:

  TMasterOpResult(const TMasterOpResult&);
  TMasterOpResult& operator=(const TMasterOpResult&);
  TMasterOpResult() : maxJournalId(0), packet() {
  }

  virtual ~TMasterOpResult() throw();
  int64_t maxJournalId;
  std::string packet;
  TShowResultSet resultSet;

  _TMasterOpResult__isset __isset;

  void __set_maxJournalId(const int64_t val);

  void __set_packet(const std::string& val);

  void __set_resultSet(const TShowResultSet& val);

  bool operator == (const TMasterOpResult & rhs) const
  {
    if (!(maxJournalId == rhs.maxJournalId))
      return false;
    if (!(packet == rhs.packet))
      return false;
    if (__isset.resultSet != rhs.__isset.resultSet)
      return false;
    else if (__isset.resultSet && !(resultSet == rhs.resultSet))
      return false;
    return true;
  }
  bool operator != (const TMasterOpResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMasterOpResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMasterOpResult &a, TMasterOpResult &b);

inline std::ostream& operator<<(std::ostream& out, const TMasterOpResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TLoadCheckRequest__isset {
  _TLoadCheckRequest__isset() : label(false), cluster(false), timestamp(false) {}
  bool label :1;
  bool cluster :1;
  bool timestamp :1;
} _TLoadCheckRequest__isset;

class TLoadCheckRequest {
 public:

  TLoadCheckRequest(const TLoadCheckRequest&);
  TLoadCheckRequest& operator=(const TLoadCheckRequest&);
  TLoadCheckRequest() : protocolVersion((FrontendServiceVersion::type)0), user(), passwd(), db(), label(), cluster(), timestamp(0) {
  }

  virtual ~TLoadCheckRequest() throw();
  FrontendServiceVersion::type protocolVersion;
  std::string user;
  std::string passwd;
  std::string db;
  std::string label;
  std::string cluster;
  int64_t timestamp;

  _TLoadCheckRequest__isset __isset;

  void __set_protocolVersion(const FrontendServiceVersion::type val);

  void __set_user(const std::string& val);

  void __set_passwd(const std::string& val);

  void __set_db(const std::string& val);

  void __set_label(const std::string& val);

  void __set_cluster(const std::string& val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TLoadCheckRequest & rhs) const
  {
    if (!(protocolVersion == rhs.protocolVersion))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    if (!(db == rhs.db))
      return false;
    if (__isset.label != rhs.__isset.label)
      return false;
    else if (__isset.label && !(label == rhs.label))
      return false;
    if (__isset.cluster != rhs.__isset.cluster)
      return false;
    else if (__isset.cluster && !(cluster == rhs.cluster))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TLoadCheckRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLoadCheckRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TLoadCheckRequest &a, TLoadCheckRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TLoadCheckRequest& obj)
{
  obj.printTo(out);
  return out;
}


class TUpdateExportTaskStatusRequest {
 public:

  TUpdateExportTaskStatusRequest(const TUpdateExportTaskStatusRequest&);
  TUpdateExportTaskStatusRequest& operator=(const TUpdateExportTaskStatusRequest&);
  TUpdateExportTaskStatusRequest() : protocolVersion((FrontendServiceVersion::type)0) {
  }

  virtual ~TUpdateExportTaskStatusRequest() throw();
  FrontendServiceVersion::type protocolVersion;
   ::palo::TUniqueId taskId;
   ::palo::TExportStatusResult taskStatus;

  void __set_protocolVersion(const FrontendServiceVersion::type val);

  void __set_taskId(const  ::palo::TUniqueId& val);

  void __set_taskStatus(const  ::palo::TExportStatusResult& val);

  bool operator == (const TUpdateExportTaskStatusRequest & rhs) const
  {
    if (!(protocolVersion == rhs.protocolVersion))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    if (!(taskStatus == rhs.taskStatus))
      return false;
    return true;
  }
  bool operator != (const TUpdateExportTaskStatusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateExportTaskStatusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUpdateExportTaskStatusRequest &a, TUpdateExportTaskStatusRequest &b);

inline std::ostream& operator<<(std::ostream& out, const TUpdateExportTaskStatusRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
