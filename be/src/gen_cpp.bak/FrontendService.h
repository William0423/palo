/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FrontendService_H
#define FrontendService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "FrontendService_types.h"

namespace palo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FrontendServiceIf {
 public:
  virtual ~FrontendServiceIf() {}
  virtual void getDbNames(TGetDbsResult& _return, const TGetDbsParams& params) = 0;
  virtual void getTableNames(TGetTablesResult& _return, const TGetTablesParams& params) = 0;
  virtual void describeTable(TDescribeTableResult& _return, const TDescribeTableParams& params) = 0;
  virtual void showVariables(TShowVariableResult& _return, const TShowVariableRequest& params) = 0;
  virtual void reportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params) = 0;
  virtual void finishTask( ::palo::TMasterResult& _return, const  ::palo::TFinishTaskRequest& request) = 0;
  virtual void report( ::palo::TMasterResult& _return, const  ::palo::TReportRequest& request) = 0;
  virtual void fetchResource( ::palo::TFetchResourceResult& _return) = 0;
  virtual void miniLoad(TFeResult& _return, const TMiniLoadRequest& request) = 0;
  virtual void updateMiniEtlTaskStatus(TFeResult& _return, const TUpdateMiniEtlTaskStatusRequest& request) = 0;
  virtual void loadCheck(TFeResult& _return, const TLoadCheckRequest& request) = 0;
  virtual void forward(TMasterOpResult& _return, const TMasterOpRequest& params) = 0;
  virtual void listTableStatus(TListTableStatusResult& _return, const TGetTablesParams& params) = 0;
  virtual void updateExportTaskStatus(TFeResult& _return, const TUpdateExportTaskStatusRequest& request) = 0;
};

class FrontendServiceIfFactory {
 public:
  typedef FrontendServiceIf Handler;

  virtual ~FrontendServiceIfFactory() {}

  virtual FrontendServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FrontendServiceIf* /* handler */) = 0;
};

class FrontendServiceIfSingletonFactory : virtual public FrontendServiceIfFactory {
 public:
  FrontendServiceIfSingletonFactory(const boost::shared_ptr<FrontendServiceIf>& iface) : iface_(iface) {}
  virtual ~FrontendServiceIfSingletonFactory() {}

  virtual FrontendServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FrontendServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FrontendServiceIf> iface_;
};

class FrontendServiceNull : virtual public FrontendServiceIf {
 public:
  virtual ~FrontendServiceNull() {}
  void getDbNames(TGetDbsResult& /* _return */, const TGetDbsParams& /* params */) {
    return;
  }
  void getTableNames(TGetTablesResult& /* _return */, const TGetTablesParams& /* params */) {
    return;
  }
  void describeTable(TDescribeTableResult& /* _return */, const TDescribeTableParams& /* params */) {
    return;
  }
  void showVariables(TShowVariableResult& /* _return */, const TShowVariableRequest& /* params */) {
    return;
  }
  void reportExecStatus(TReportExecStatusResult& /* _return */, const TReportExecStatusParams& /* params */) {
    return;
  }
  void finishTask( ::palo::TMasterResult& /* _return */, const  ::palo::TFinishTaskRequest& /* request */) {
    return;
  }
  void report( ::palo::TMasterResult& /* _return */, const  ::palo::TReportRequest& /* request */) {
    return;
  }
  void fetchResource( ::palo::TFetchResourceResult& /* _return */) {
    return;
  }
  void miniLoad(TFeResult& /* _return */, const TMiniLoadRequest& /* request */) {
    return;
  }
  void updateMiniEtlTaskStatus(TFeResult& /* _return */, const TUpdateMiniEtlTaskStatusRequest& /* request */) {
    return;
  }
  void loadCheck(TFeResult& /* _return */, const TLoadCheckRequest& /* request */) {
    return;
  }
  void forward(TMasterOpResult& /* _return */, const TMasterOpRequest& /* params */) {
    return;
  }
  void listTableStatus(TListTableStatusResult& /* _return */, const TGetTablesParams& /* params */) {
    return;
  }
  void updateExportTaskStatus(TFeResult& /* _return */, const TUpdateExportTaskStatusRequest& /* request */) {
    return;
  }
};

typedef struct _FrontendService_getDbNames_args__isset {
  _FrontendService_getDbNames_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_getDbNames_args__isset;

class FrontendService_getDbNames_args {
 public:

  FrontendService_getDbNames_args(const FrontendService_getDbNames_args&);
  FrontendService_getDbNames_args& operator=(const FrontendService_getDbNames_args&);
  FrontendService_getDbNames_args() {
  }

  virtual ~FrontendService_getDbNames_args() throw();
  TGetDbsParams params;

  _FrontendService_getDbNames_args__isset __isset;

  void __set_params(const TGetDbsParams& val);

  bool operator == (const FrontendService_getDbNames_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_getDbNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_getDbNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_getDbNames_pargs {
 public:


  virtual ~FrontendService_getDbNames_pargs() throw();
  const TGetDbsParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_getDbNames_result__isset {
  _FrontendService_getDbNames_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_getDbNames_result__isset;

class FrontendService_getDbNames_result {
 public:

  FrontendService_getDbNames_result(const FrontendService_getDbNames_result&);
  FrontendService_getDbNames_result& operator=(const FrontendService_getDbNames_result&);
  FrontendService_getDbNames_result() {
  }

  virtual ~FrontendService_getDbNames_result() throw();
  TGetDbsResult success;

  _FrontendService_getDbNames_result__isset __isset;

  void __set_success(const TGetDbsResult& val);

  bool operator == (const FrontendService_getDbNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_getDbNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_getDbNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_getDbNames_presult__isset {
  _FrontendService_getDbNames_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_getDbNames_presult__isset;

class FrontendService_getDbNames_presult {
 public:


  virtual ~FrontendService_getDbNames_presult() throw();
  TGetDbsResult* success;

  _FrontendService_getDbNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_getTableNames_args__isset {
  _FrontendService_getTableNames_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_getTableNames_args__isset;

class FrontendService_getTableNames_args {
 public:

  FrontendService_getTableNames_args(const FrontendService_getTableNames_args&);
  FrontendService_getTableNames_args& operator=(const FrontendService_getTableNames_args&);
  FrontendService_getTableNames_args() {
  }

  virtual ~FrontendService_getTableNames_args() throw();
  TGetTablesParams params;

  _FrontendService_getTableNames_args__isset __isset;

  void __set_params(const TGetTablesParams& val);

  bool operator == (const FrontendService_getTableNames_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_getTableNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_getTableNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_getTableNames_pargs {
 public:


  virtual ~FrontendService_getTableNames_pargs() throw();
  const TGetTablesParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_getTableNames_result__isset {
  _FrontendService_getTableNames_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_getTableNames_result__isset;

class FrontendService_getTableNames_result {
 public:

  FrontendService_getTableNames_result(const FrontendService_getTableNames_result&);
  FrontendService_getTableNames_result& operator=(const FrontendService_getTableNames_result&);
  FrontendService_getTableNames_result() {
  }

  virtual ~FrontendService_getTableNames_result() throw();
  TGetTablesResult success;

  _FrontendService_getTableNames_result__isset __isset;

  void __set_success(const TGetTablesResult& val);

  bool operator == (const FrontendService_getTableNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_getTableNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_getTableNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_getTableNames_presult__isset {
  _FrontendService_getTableNames_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_getTableNames_presult__isset;

class FrontendService_getTableNames_presult {
 public:


  virtual ~FrontendService_getTableNames_presult() throw();
  TGetTablesResult* success;

  _FrontendService_getTableNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_describeTable_args__isset {
  _FrontendService_describeTable_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_describeTable_args__isset;

class FrontendService_describeTable_args {
 public:

  FrontendService_describeTable_args(const FrontendService_describeTable_args&);
  FrontendService_describeTable_args& operator=(const FrontendService_describeTable_args&);
  FrontendService_describeTable_args() {
  }

  virtual ~FrontendService_describeTable_args() throw();
  TDescribeTableParams params;

  _FrontendService_describeTable_args__isset __isset;

  void __set_params(const TDescribeTableParams& val);

  bool operator == (const FrontendService_describeTable_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_describeTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_describeTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_describeTable_pargs {
 public:


  virtual ~FrontendService_describeTable_pargs() throw();
  const TDescribeTableParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_describeTable_result__isset {
  _FrontendService_describeTable_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_describeTable_result__isset;

class FrontendService_describeTable_result {
 public:

  FrontendService_describeTable_result(const FrontendService_describeTable_result&);
  FrontendService_describeTable_result& operator=(const FrontendService_describeTable_result&);
  FrontendService_describeTable_result() {
  }

  virtual ~FrontendService_describeTable_result() throw();
  TDescribeTableResult success;

  _FrontendService_describeTable_result__isset __isset;

  void __set_success(const TDescribeTableResult& val);

  bool operator == (const FrontendService_describeTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_describeTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_describeTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_describeTable_presult__isset {
  _FrontendService_describeTable_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_describeTable_presult__isset;

class FrontendService_describeTable_presult {
 public:


  virtual ~FrontendService_describeTable_presult() throw();
  TDescribeTableResult* success;

  _FrontendService_describeTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_showVariables_args__isset {
  _FrontendService_showVariables_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_showVariables_args__isset;

class FrontendService_showVariables_args {
 public:

  FrontendService_showVariables_args(const FrontendService_showVariables_args&);
  FrontendService_showVariables_args& operator=(const FrontendService_showVariables_args&);
  FrontendService_showVariables_args() {
  }

  virtual ~FrontendService_showVariables_args() throw();
  TShowVariableRequest params;

  _FrontendService_showVariables_args__isset __isset;

  void __set_params(const TShowVariableRequest& val);

  bool operator == (const FrontendService_showVariables_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_showVariables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_showVariables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_showVariables_pargs {
 public:


  virtual ~FrontendService_showVariables_pargs() throw();
  const TShowVariableRequest* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_showVariables_result__isset {
  _FrontendService_showVariables_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_showVariables_result__isset;

class FrontendService_showVariables_result {
 public:

  FrontendService_showVariables_result(const FrontendService_showVariables_result&);
  FrontendService_showVariables_result& operator=(const FrontendService_showVariables_result&);
  FrontendService_showVariables_result() {
  }

  virtual ~FrontendService_showVariables_result() throw();
  TShowVariableResult success;

  _FrontendService_showVariables_result__isset __isset;

  void __set_success(const TShowVariableResult& val);

  bool operator == (const FrontendService_showVariables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_showVariables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_showVariables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_showVariables_presult__isset {
  _FrontendService_showVariables_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_showVariables_presult__isset;

class FrontendService_showVariables_presult {
 public:


  virtual ~FrontendService_showVariables_presult() throw();
  TShowVariableResult* success;

  _FrontendService_showVariables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_reportExecStatus_args__isset {
  _FrontendService_reportExecStatus_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_reportExecStatus_args__isset;

class FrontendService_reportExecStatus_args {
 public:

  FrontendService_reportExecStatus_args(const FrontendService_reportExecStatus_args&);
  FrontendService_reportExecStatus_args& operator=(const FrontendService_reportExecStatus_args&);
  FrontendService_reportExecStatus_args() {
  }

  virtual ~FrontendService_reportExecStatus_args() throw();
  TReportExecStatusParams params;

  _FrontendService_reportExecStatus_args__isset __isset;

  void __set_params(const TReportExecStatusParams& val);

  bool operator == (const FrontendService_reportExecStatus_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_reportExecStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_reportExecStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_reportExecStatus_pargs {
 public:


  virtual ~FrontendService_reportExecStatus_pargs() throw();
  const TReportExecStatusParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_reportExecStatus_result__isset {
  _FrontendService_reportExecStatus_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_reportExecStatus_result__isset;

class FrontendService_reportExecStatus_result {
 public:

  FrontendService_reportExecStatus_result(const FrontendService_reportExecStatus_result&);
  FrontendService_reportExecStatus_result& operator=(const FrontendService_reportExecStatus_result&);
  FrontendService_reportExecStatus_result() {
  }

  virtual ~FrontendService_reportExecStatus_result() throw();
  TReportExecStatusResult success;

  _FrontendService_reportExecStatus_result__isset __isset;

  void __set_success(const TReportExecStatusResult& val);

  bool operator == (const FrontendService_reportExecStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_reportExecStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_reportExecStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_reportExecStatus_presult__isset {
  _FrontendService_reportExecStatus_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_reportExecStatus_presult__isset;

class FrontendService_reportExecStatus_presult {
 public:


  virtual ~FrontendService_reportExecStatus_presult() throw();
  TReportExecStatusResult* success;

  _FrontendService_reportExecStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_finishTask_args__isset {
  _FrontendService_finishTask_args__isset() : request(false) {}
  bool request :1;
} _FrontendService_finishTask_args__isset;

class FrontendService_finishTask_args {
 public:

  FrontendService_finishTask_args(const FrontendService_finishTask_args&);
  FrontendService_finishTask_args& operator=(const FrontendService_finishTask_args&);
  FrontendService_finishTask_args() {
  }

  virtual ~FrontendService_finishTask_args() throw();
   ::palo::TFinishTaskRequest request;

  _FrontendService_finishTask_args__isset __isset;

  void __set_request(const  ::palo::TFinishTaskRequest& val);

  bool operator == (const FrontendService_finishTask_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const FrontendService_finishTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_finishTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_finishTask_pargs {
 public:


  virtual ~FrontendService_finishTask_pargs() throw();
  const  ::palo::TFinishTaskRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_finishTask_result__isset {
  _FrontendService_finishTask_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_finishTask_result__isset;

class FrontendService_finishTask_result {
 public:

  FrontendService_finishTask_result(const FrontendService_finishTask_result&);
  FrontendService_finishTask_result& operator=(const FrontendService_finishTask_result&);
  FrontendService_finishTask_result() {
  }

  virtual ~FrontendService_finishTask_result() throw();
   ::palo::TMasterResult success;

  _FrontendService_finishTask_result__isset __isset;

  void __set_success(const  ::palo::TMasterResult& val);

  bool operator == (const FrontendService_finishTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_finishTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_finishTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_finishTask_presult__isset {
  _FrontendService_finishTask_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_finishTask_presult__isset;

class FrontendService_finishTask_presult {
 public:


  virtual ~FrontendService_finishTask_presult() throw();
   ::palo::TMasterResult* success;

  _FrontendService_finishTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_report_args__isset {
  _FrontendService_report_args__isset() : request(false) {}
  bool request :1;
} _FrontendService_report_args__isset;

class FrontendService_report_args {
 public:

  FrontendService_report_args(const FrontendService_report_args&);
  FrontendService_report_args& operator=(const FrontendService_report_args&);
  FrontendService_report_args() {
  }

  virtual ~FrontendService_report_args() throw();
   ::palo::TReportRequest request;

  _FrontendService_report_args__isset __isset;

  void __set_request(const  ::palo::TReportRequest& val);

  bool operator == (const FrontendService_report_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const FrontendService_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_report_pargs {
 public:


  virtual ~FrontendService_report_pargs() throw();
  const  ::palo::TReportRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_report_result__isset {
  _FrontendService_report_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_report_result__isset;

class FrontendService_report_result {
 public:

  FrontendService_report_result(const FrontendService_report_result&);
  FrontendService_report_result& operator=(const FrontendService_report_result&);
  FrontendService_report_result() {
  }

  virtual ~FrontendService_report_result() throw();
   ::palo::TMasterResult success;

  _FrontendService_report_result__isset __isset;

  void __set_success(const  ::palo::TMasterResult& val);

  bool operator == (const FrontendService_report_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_report_presult__isset {
  _FrontendService_report_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_report_presult__isset;

class FrontendService_report_presult {
 public:


  virtual ~FrontendService_report_presult() throw();
   ::palo::TMasterResult* success;

  _FrontendService_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FrontendService_fetchResource_args {
 public:

  FrontendService_fetchResource_args(const FrontendService_fetchResource_args&);
  FrontendService_fetchResource_args& operator=(const FrontendService_fetchResource_args&);
  FrontendService_fetchResource_args() {
  }

  virtual ~FrontendService_fetchResource_args() throw();

  bool operator == (const FrontendService_fetchResource_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FrontendService_fetchResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_fetchResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_fetchResource_pargs {
 public:


  virtual ~FrontendService_fetchResource_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_fetchResource_result__isset {
  _FrontendService_fetchResource_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_fetchResource_result__isset;

class FrontendService_fetchResource_result {
 public:

  FrontendService_fetchResource_result(const FrontendService_fetchResource_result&);
  FrontendService_fetchResource_result& operator=(const FrontendService_fetchResource_result&);
  FrontendService_fetchResource_result() {
  }

  virtual ~FrontendService_fetchResource_result() throw();
   ::palo::TFetchResourceResult success;

  _FrontendService_fetchResource_result__isset __isset;

  void __set_success(const  ::palo::TFetchResourceResult& val);

  bool operator == (const FrontendService_fetchResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_fetchResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_fetchResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_fetchResource_presult__isset {
  _FrontendService_fetchResource_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_fetchResource_presult__isset;

class FrontendService_fetchResource_presult {
 public:


  virtual ~FrontendService_fetchResource_presult() throw();
   ::palo::TFetchResourceResult* success;

  _FrontendService_fetchResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_miniLoad_args__isset {
  _FrontendService_miniLoad_args__isset() : request(false) {}
  bool request :1;
} _FrontendService_miniLoad_args__isset;

class FrontendService_miniLoad_args {
 public:

  FrontendService_miniLoad_args(const FrontendService_miniLoad_args&);
  FrontendService_miniLoad_args& operator=(const FrontendService_miniLoad_args&);
  FrontendService_miniLoad_args() {
  }

  virtual ~FrontendService_miniLoad_args() throw();
  TMiniLoadRequest request;

  _FrontendService_miniLoad_args__isset __isset;

  void __set_request(const TMiniLoadRequest& val);

  bool operator == (const FrontendService_miniLoad_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const FrontendService_miniLoad_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_miniLoad_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_miniLoad_pargs {
 public:


  virtual ~FrontendService_miniLoad_pargs() throw();
  const TMiniLoadRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_miniLoad_result__isset {
  _FrontendService_miniLoad_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_miniLoad_result__isset;

class FrontendService_miniLoad_result {
 public:

  FrontendService_miniLoad_result(const FrontendService_miniLoad_result&);
  FrontendService_miniLoad_result& operator=(const FrontendService_miniLoad_result&);
  FrontendService_miniLoad_result() {
  }

  virtual ~FrontendService_miniLoad_result() throw();
  TFeResult success;

  _FrontendService_miniLoad_result__isset __isset;

  void __set_success(const TFeResult& val);

  bool operator == (const FrontendService_miniLoad_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_miniLoad_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_miniLoad_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_miniLoad_presult__isset {
  _FrontendService_miniLoad_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_miniLoad_presult__isset;

class FrontendService_miniLoad_presult {
 public:


  virtual ~FrontendService_miniLoad_presult() throw();
  TFeResult* success;

  _FrontendService_miniLoad_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_updateMiniEtlTaskStatus_args__isset {
  _FrontendService_updateMiniEtlTaskStatus_args__isset() : request(false) {}
  bool request :1;
} _FrontendService_updateMiniEtlTaskStatus_args__isset;

class FrontendService_updateMiniEtlTaskStatus_args {
 public:

  FrontendService_updateMiniEtlTaskStatus_args(const FrontendService_updateMiniEtlTaskStatus_args&);
  FrontendService_updateMiniEtlTaskStatus_args& operator=(const FrontendService_updateMiniEtlTaskStatus_args&);
  FrontendService_updateMiniEtlTaskStatus_args() {
  }

  virtual ~FrontendService_updateMiniEtlTaskStatus_args() throw();
  TUpdateMiniEtlTaskStatusRequest request;

  _FrontendService_updateMiniEtlTaskStatus_args__isset __isset;

  void __set_request(const TUpdateMiniEtlTaskStatusRequest& val);

  bool operator == (const FrontendService_updateMiniEtlTaskStatus_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const FrontendService_updateMiniEtlTaskStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_updateMiniEtlTaskStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_updateMiniEtlTaskStatus_pargs {
 public:


  virtual ~FrontendService_updateMiniEtlTaskStatus_pargs() throw();
  const TUpdateMiniEtlTaskStatusRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_updateMiniEtlTaskStatus_result__isset {
  _FrontendService_updateMiniEtlTaskStatus_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_updateMiniEtlTaskStatus_result__isset;

class FrontendService_updateMiniEtlTaskStatus_result {
 public:

  FrontendService_updateMiniEtlTaskStatus_result(const FrontendService_updateMiniEtlTaskStatus_result&);
  FrontendService_updateMiniEtlTaskStatus_result& operator=(const FrontendService_updateMiniEtlTaskStatus_result&);
  FrontendService_updateMiniEtlTaskStatus_result() {
  }

  virtual ~FrontendService_updateMiniEtlTaskStatus_result() throw();
  TFeResult success;

  _FrontendService_updateMiniEtlTaskStatus_result__isset __isset;

  void __set_success(const TFeResult& val);

  bool operator == (const FrontendService_updateMiniEtlTaskStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_updateMiniEtlTaskStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_updateMiniEtlTaskStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_updateMiniEtlTaskStatus_presult__isset {
  _FrontendService_updateMiniEtlTaskStatus_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_updateMiniEtlTaskStatus_presult__isset;

class FrontendService_updateMiniEtlTaskStatus_presult {
 public:


  virtual ~FrontendService_updateMiniEtlTaskStatus_presult() throw();
  TFeResult* success;

  _FrontendService_updateMiniEtlTaskStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_loadCheck_args__isset {
  _FrontendService_loadCheck_args__isset() : request(false) {}
  bool request :1;
} _FrontendService_loadCheck_args__isset;

class FrontendService_loadCheck_args {
 public:

  FrontendService_loadCheck_args(const FrontendService_loadCheck_args&);
  FrontendService_loadCheck_args& operator=(const FrontendService_loadCheck_args&);
  FrontendService_loadCheck_args() {
  }

  virtual ~FrontendService_loadCheck_args() throw();
  TLoadCheckRequest request;

  _FrontendService_loadCheck_args__isset __isset;

  void __set_request(const TLoadCheckRequest& val);

  bool operator == (const FrontendService_loadCheck_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const FrontendService_loadCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_loadCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_loadCheck_pargs {
 public:


  virtual ~FrontendService_loadCheck_pargs() throw();
  const TLoadCheckRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_loadCheck_result__isset {
  _FrontendService_loadCheck_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_loadCheck_result__isset;

class FrontendService_loadCheck_result {
 public:

  FrontendService_loadCheck_result(const FrontendService_loadCheck_result&);
  FrontendService_loadCheck_result& operator=(const FrontendService_loadCheck_result&);
  FrontendService_loadCheck_result() {
  }

  virtual ~FrontendService_loadCheck_result() throw();
  TFeResult success;

  _FrontendService_loadCheck_result__isset __isset;

  void __set_success(const TFeResult& val);

  bool operator == (const FrontendService_loadCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_loadCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_loadCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_loadCheck_presult__isset {
  _FrontendService_loadCheck_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_loadCheck_presult__isset;

class FrontendService_loadCheck_presult {
 public:


  virtual ~FrontendService_loadCheck_presult() throw();
  TFeResult* success;

  _FrontendService_loadCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_forward_args__isset {
  _FrontendService_forward_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_forward_args__isset;

class FrontendService_forward_args {
 public:

  FrontendService_forward_args(const FrontendService_forward_args&);
  FrontendService_forward_args& operator=(const FrontendService_forward_args&);
  FrontendService_forward_args() {
  }

  virtual ~FrontendService_forward_args() throw();
  TMasterOpRequest params;

  _FrontendService_forward_args__isset __isset;

  void __set_params(const TMasterOpRequest& val);

  bool operator == (const FrontendService_forward_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_forward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_forward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_forward_pargs {
 public:


  virtual ~FrontendService_forward_pargs() throw();
  const TMasterOpRequest* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_forward_result__isset {
  _FrontendService_forward_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_forward_result__isset;

class FrontendService_forward_result {
 public:

  FrontendService_forward_result(const FrontendService_forward_result&);
  FrontendService_forward_result& operator=(const FrontendService_forward_result&);
  FrontendService_forward_result() {
  }

  virtual ~FrontendService_forward_result() throw();
  TMasterOpResult success;

  _FrontendService_forward_result__isset __isset;

  void __set_success(const TMasterOpResult& val);

  bool operator == (const FrontendService_forward_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_forward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_forward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_forward_presult__isset {
  _FrontendService_forward_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_forward_presult__isset;

class FrontendService_forward_presult {
 public:


  virtual ~FrontendService_forward_presult() throw();
  TMasterOpResult* success;

  _FrontendService_forward_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_listTableStatus_args__isset {
  _FrontendService_listTableStatus_args__isset() : params(false) {}
  bool params :1;
} _FrontendService_listTableStatus_args__isset;

class FrontendService_listTableStatus_args {
 public:

  FrontendService_listTableStatus_args(const FrontendService_listTableStatus_args&);
  FrontendService_listTableStatus_args& operator=(const FrontendService_listTableStatus_args&);
  FrontendService_listTableStatus_args() {
  }

  virtual ~FrontendService_listTableStatus_args() throw();
  TGetTablesParams params;

  _FrontendService_listTableStatus_args__isset __isset;

  void __set_params(const TGetTablesParams& val);

  bool operator == (const FrontendService_listTableStatus_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const FrontendService_listTableStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_listTableStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_listTableStatus_pargs {
 public:


  virtual ~FrontendService_listTableStatus_pargs() throw();
  const TGetTablesParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_listTableStatus_result__isset {
  _FrontendService_listTableStatus_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_listTableStatus_result__isset;

class FrontendService_listTableStatus_result {
 public:

  FrontendService_listTableStatus_result(const FrontendService_listTableStatus_result&);
  FrontendService_listTableStatus_result& operator=(const FrontendService_listTableStatus_result&);
  FrontendService_listTableStatus_result() {
  }

  virtual ~FrontendService_listTableStatus_result() throw();
  TListTableStatusResult success;

  _FrontendService_listTableStatus_result__isset __isset;

  void __set_success(const TListTableStatusResult& val);

  bool operator == (const FrontendService_listTableStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_listTableStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_listTableStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_listTableStatus_presult__isset {
  _FrontendService_listTableStatus_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_listTableStatus_presult__isset;

class FrontendService_listTableStatus_presult {
 public:


  virtual ~FrontendService_listTableStatus_presult() throw();
  TListTableStatusResult* success;

  _FrontendService_listTableStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontendService_updateExportTaskStatus_args__isset {
  _FrontendService_updateExportTaskStatus_args__isset() : request(false) {}
  bool request :1;
} _FrontendService_updateExportTaskStatus_args__isset;

class FrontendService_updateExportTaskStatus_args {
 public:

  FrontendService_updateExportTaskStatus_args(const FrontendService_updateExportTaskStatus_args&);
  FrontendService_updateExportTaskStatus_args& operator=(const FrontendService_updateExportTaskStatus_args&);
  FrontendService_updateExportTaskStatus_args() {
  }

  virtual ~FrontendService_updateExportTaskStatus_args() throw();
  TUpdateExportTaskStatusRequest request;

  _FrontendService_updateExportTaskStatus_args__isset __isset;

  void __set_request(const TUpdateExportTaskStatusRequest& val);

  bool operator == (const FrontendService_updateExportTaskStatus_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const FrontendService_updateExportTaskStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_updateExportTaskStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontendService_updateExportTaskStatus_pargs {
 public:


  virtual ~FrontendService_updateExportTaskStatus_pargs() throw();
  const TUpdateExportTaskStatusRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_updateExportTaskStatus_result__isset {
  _FrontendService_updateExportTaskStatus_result__isset() : success(false) {}
  bool success :1;
} _FrontendService_updateExportTaskStatus_result__isset;

class FrontendService_updateExportTaskStatus_result {
 public:

  FrontendService_updateExportTaskStatus_result(const FrontendService_updateExportTaskStatus_result&);
  FrontendService_updateExportTaskStatus_result& operator=(const FrontendService_updateExportTaskStatus_result&);
  FrontendService_updateExportTaskStatus_result() {
  }

  virtual ~FrontendService_updateExportTaskStatus_result() throw();
  TFeResult success;

  _FrontendService_updateExportTaskStatus_result__isset __isset;

  void __set_success(const TFeResult& val);

  bool operator == (const FrontendService_updateExportTaskStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FrontendService_updateExportTaskStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontendService_updateExportTaskStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FrontendService_updateExportTaskStatus_presult__isset {
  _FrontendService_updateExportTaskStatus_presult__isset() : success(false) {}
  bool success :1;
} _FrontendService_updateExportTaskStatus_presult__isset;

class FrontendService_updateExportTaskStatus_presult {
 public:


  virtual ~FrontendService_updateExportTaskStatus_presult() throw();
  TFeResult* success;

  _FrontendService_updateExportTaskStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FrontendServiceClient : virtual public FrontendServiceIf {
 public:
  FrontendServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FrontendServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDbNames(TGetDbsResult& _return, const TGetDbsParams& params);
  void send_getDbNames(const TGetDbsParams& params);
  void recv_getDbNames(TGetDbsResult& _return);
  void getTableNames(TGetTablesResult& _return, const TGetTablesParams& params);
  void send_getTableNames(const TGetTablesParams& params);
  void recv_getTableNames(TGetTablesResult& _return);
  void describeTable(TDescribeTableResult& _return, const TDescribeTableParams& params);
  void send_describeTable(const TDescribeTableParams& params);
  void recv_describeTable(TDescribeTableResult& _return);
  void showVariables(TShowVariableResult& _return, const TShowVariableRequest& params);
  void send_showVariables(const TShowVariableRequest& params);
  void recv_showVariables(TShowVariableResult& _return);
  void reportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params);
  void send_reportExecStatus(const TReportExecStatusParams& params);
  void recv_reportExecStatus(TReportExecStatusResult& _return);
  void finishTask( ::palo::TMasterResult& _return, const  ::palo::TFinishTaskRequest& request);
  void send_finishTask(const  ::palo::TFinishTaskRequest& request);
  void recv_finishTask( ::palo::TMasterResult& _return);
  void report( ::palo::TMasterResult& _return, const  ::palo::TReportRequest& request);
  void send_report(const  ::palo::TReportRequest& request);
  void recv_report( ::palo::TMasterResult& _return);
  void fetchResource( ::palo::TFetchResourceResult& _return);
  void send_fetchResource();
  void recv_fetchResource( ::palo::TFetchResourceResult& _return);
  void miniLoad(TFeResult& _return, const TMiniLoadRequest& request);
  void send_miniLoad(const TMiniLoadRequest& request);
  void recv_miniLoad(TFeResult& _return);
  void updateMiniEtlTaskStatus(TFeResult& _return, const TUpdateMiniEtlTaskStatusRequest& request);
  void send_updateMiniEtlTaskStatus(const TUpdateMiniEtlTaskStatusRequest& request);
  void recv_updateMiniEtlTaskStatus(TFeResult& _return);
  void loadCheck(TFeResult& _return, const TLoadCheckRequest& request);
  void send_loadCheck(const TLoadCheckRequest& request);
  void recv_loadCheck(TFeResult& _return);
  void forward(TMasterOpResult& _return, const TMasterOpRequest& params);
  void send_forward(const TMasterOpRequest& params);
  void recv_forward(TMasterOpResult& _return);
  void listTableStatus(TListTableStatusResult& _return, const TGetTablesParams& params);
  void send_listTableStatus(const TGetTablesParams& params);
  void recv_listTableStatus(TListTableStatusResult& _return);
  void updateExportTaskStatus(TFeResult& _return, const TUpdateExportTaskStatusRequest& request);
  void send_updateExportTaskStatus(const TUpdateExportTaskStatusRequest& request);
  void recv_updateExportTaskStatus(TFeResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FrontendServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FrontendServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FrontendServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDbNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_describeTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_showVariables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportExecStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_finishTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_miniLoad(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateMiniEtlTaskStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listTableStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExportTaskStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FrontendServiceProcessor(boost::shared_ptr<FrontendServiceIf> iface) :
    iface_(iface) {
    processMap_["getDbNames"] = &FrontendServiceProcessor::process_getDbNames;
    processMap_["getTableNames"] = &FrontendServiceProcessor::process_getTableNames;
    processMap_["describeTable"] = &FrontendServiceProcessor::process_describeTable;
    processMap_["showVariables"] = &FrontendServiceProcessor::process_showVariables;
    processMap_["reportExecStatus"] = &FrontendServiceProcessor::process_reportExecStatus;
    processMap_["finishTask"] = &FrontendServiceProcessor::process_finishTask;
    processMap_["report"] = &FrontendServiceProcessor::process_report;
    processMap_["fetchResource"] = &FrontendServiceProcessor::process_fetchResource;
    processMap_["miniLoad"] = &FrontendServiceProcessor::process_miniLoad;
    processMap_["updateMiniEtlTaskStatus"] = &FrontendServiceProcessor::process_updateMiniEtlTaskStatus;
    processMap_["loadCheck"] = &FrontendServiceProcessor::process_loadCheck;
    processMap_["forward"] = &FrontendServiceProcessor::process_forward;
    processMap_["listTableStatus"] = &FrontendServiceProcessor::process_listTableStatus;
    processMap_["updateExportTaskStatus"] = &FrontendServiceProcessor::process_updateExportTaskStatus;
  }

  virtual ~FrontendServiceProcessor() {}
};

class FrontendServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FrontendServiceProcessorFactory(const ::boost::shared_ptr< FrontendServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FrontendServiceIfFactory > handlerFactory_;
};

class FrontendServiceMultiface : virtual public FrontendServiceIf {
 public:
  FrontendServiceMultiface(std::vector<boost::shared_ptr<FrontendServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FrontendServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FrontendServiceIf> > ifaces_;
  FrontendServiceMultiface() {}
  void add(boost::shared_ptr<FrontendServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDbNames(TGetDbsResult& _return, const TGetDbsParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDbNames(_return, params);
    }
    ifaces_[i]->getDbNames(_return, params);
    return;
  }

  void getTableNames(TGetTablesResult& _return, const TGetTablesParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableNames(_return, params);
    }
    ifaces_[i]->getTableNames(_return, params);
    return;
  }

  void describeTable(TDescribeTableResult& _return, const TDescribeTableParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->describeTable(_return, params);
    }
    ifaces_[i]->describeTable(_return, params);
    return;
  }

  void showVariables(TShowVariableResult& _return, const TShowVariableRequest& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->showVariables(_return, params);
    }
    ifaces_[i]->showVariables(_return, params);
    return;
  }

  void reportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportExecStatus(_return, params);
    }
    ifaces_[i]->reportExecStatus(_return, params);
    return;
  }

  void finishTask( ::palo::TMasterResult& _return, const  ::palo::TFinishTaskRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->finishTask(_return, request);
    }
    ifaces_[i]->finishTask(_return, request);
    return;
  }

  void report( ::palo::TMasterResult& _return, const  ::palo::TReportRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report(_return, request);
    }
    ifaces_[i]->report(_return, request);
    return;
  }

  void fetchResource( ::palo::TFetchResourceResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchResource(_return);
    }
    ifaces_[i]->fetchResource(_return);
    return;
  }

  void miniLoad(TFeResult& _return, const TMiniLoadRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->miniLoad(_return, request);
    }
    ifaces_[i]->miniLoad(_return, request);
    return;
  }

  void updateMiniEtlTaskStatus(TFeResult& _return, const TUpdateMiniEtlTaskStatusRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateMiniEtlTaskStatus(_return, request);
    }
    ifaces_[i]->updateMiniEtlTaskStatus(_return, request);
    return;
  }

  void loadCheck(TFeResult& _return, const TLoadCheckRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadCheck(_return, request);
    }
    ifaces_[i]->loadCheck(_return, request);
    return;
  }

  void forward(TMasterOpResult& _return, const TMasterOpRequest& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forward(_return, params);
    }
    ifaces_[i]->forward(_return, params);
    return;
  }

  void listTableStatus(TListTableStatusResult& _return, const TGetTablesParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listTableStatus(_return, params);
    }
    ifaces_[i]->listTableStatus(_return, params);
    return;
  }

  void updateExportTaskStatus(TFeResult& _return, const TUpdateExportTaskStatusRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExportTaskStatus(_return, request);
    }
    ifaces_[i]->updateExportTaskStatus(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FrontendServiceConcurrentClient : virtual public FrontendServiceIf {
 public:
  FrontendServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FrontendServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDbNames(TGetDbsResult& _return, const TGetDbsParams& params);
  int32_t send_getDbNames(const TGetDbsParams& params);
  void recv_getDbNames(TGetDbsResult& _return, const int32_t seqid);
  void getTableNames(TGetTablesResult& _return, const TGetTablesParams& params);
  int32_t send_getTableNames(const TGetTablesParams& params);
  void recv_getTableNames(TGetTablesResult& _return, const int32_t seqid);
  void describeTable(TDescribeTableResult& _return, const TDescribeTableParams& params);
  int32_t send_describeTable(const TDescribeTableParams& params);
  void recv_describeTable(TDescribeTableResult& _return, const int32_t seqid);
  void showVariables(TShowVariableResult& _return, const TShowVariableRequest& params);
  int32_t send_showVariables(const TShowVariableRequest& params);
  void recv_showVariables(TShowVariableResult& _return, const int32_t seqid);
  void reportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params);
  int32_t send_reportExecStatus(const TReportExecStatusParams& params);
  void recv_reportExecStatus(TReportExecStatusResult& _return, const int32_t seqid);
  void finishTask( ::palo::TMasterResult& _return, const  ::palo::TFinishTaskRequest& request);
  int32_t send_finishTask(const  ::palo::TFinishTaskRequest& request);
  void recv_finishTask( ::palo::TMasterResult& _return, const int32_t seqid);
  void report( ::palo::TMasterResult& _return, const  ::palo::TReportRequest& request);
  int32_t send_report(const  ::palo::TReportRequest& request);
  void recv_report( ::palo::TMasterResult& _return, const int32_t seqid);
  void fetchResource( ::palo::TFetchResourceResult& _return);
  int32_t send_fetchResource();
  void recv_fetchResource( ::palo::TFetchResourceResult& _return, const int32_t seqid);
  void miniLoad(TFeResult& _return, const TMiniLoadRequest& request);
  int32_t send_miniLoad(const TMiniLoadRequest& request);
  void recv_miniLoad(TFeResult& _return, const int32_t seqid);
  void updateMiniEtlTaskStatus(TFeResult& _return, const TUpdateMiniEtlTaskStatusRequest& request);
  int32_t send_updateMiniEtlTaskStatus(const TUpdateMiniEtlTaskStatusRequest& request);
  void recv_updateMiniEtlTaskStatus(TFeResult& _return, const int32_t seqid);
  void loadCheck(TFeResult& _return, const TLoadCheckRequest& request);
  int32_t send_loadCheck(const TLoadCheckRequest& request);
  void recv_loadCheck(TFeResult& _return, const int32_t seqid);
  void forward(TMasterOpResult& _return, const TMasterOpRequest& params);
  int32_t send_forward(const TMasterOpRequest& params);
  void recv_forward(TMasterOpResult& _return, const int32_t seqid);
  void listTableStatus(TListTableStatusResult& _return, const TGetTablesParams& params);
  int32_t send_listTableStatus(const TGetTablesParams& params);
  void recv_listTableStatus(TListTableStatusResult& _return, const int32_t seqid);
  void updateExportTaskStatus(TFeResult& _return, const TUpdateExportTaskStatusRequest& request);
  int32_t send_updateExportTaskStatus(const TUpdateExportTaskStatusRequest& request);
  void recv_updateExportTaskStatus(TFeResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
