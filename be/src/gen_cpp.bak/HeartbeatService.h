/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HeartbeatService_H
#define HeartbeatService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "HeartbeatService_types.h"

namespace palo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HeartbeatServiceIf {
 public:
  virtual ~HeartbeatServiceIf() {}
  virtual void heartbeat(THeartbeatResult& _return, const TMasterInfo& master_info) = 0;
};

class HeartbeatServiceIfFactory {
 public:
  typedef HeartbeatServiceIf Handler;

  virtual ~HeartbeatServiceIfFactory() {}

  virtual HeartbeatServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HeartbeatServiceIf* /* handler */) = 0;
};

class HeartbeatServiceIfSingletonFactory : virtual public HeartbeatServiceIfFactory {
 public:
  HeartbeatServiceIfSingletonFactory(const boost::shared_ptr<HeartbeatServiceIf>& iface) : iface_(iface) {}
  virtual ~HeartbeatServiceIfSingletonFactory() {}

  virtual HeartbeatServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HeartbeatServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HeartbeatServiceIf> iface_;
};

class HeartbeatServiceNull : virtual public HeartbeatServiceIf {
 public:
  virtual ~HeartbeatServiceNull() {}
  void heartbeat(THeartbeatResult& /* _return */, const TMasterInfo& /* master_info */) {
    return;
  }
};

typedef struct _HeartbeatService_heartbeat_args__isset {
  _HeartbeatService_heartbeat_args__isset() : master_info(false) {}
  bool master_info :1;
} _HeartbeatService_heartbeat_args__isset;

class HeartbeatService_heartbeat_args {
 public:

  HeartbeatService_heartbeat_args(const HeartbeatService_heartbeat_args&);
  HeartbeatService_heartbeat_args& operator=(const HeartbeatService_heartbeat_args&);
  HeartbeatService_heartbeat_args() {
  }

  virtual ~HeartbeatService_heartbeat_args() throw();
  TMasterInfo master_info;

  _HeartbeatService_heartbeat_args__isset __isset;

  void __set_master_info(const TMasterInfo& val);

  bool operator == (const HeartbeatService_heartbeat_args & rhs) const
  {
    if (!(master_info == rhs.master_info))
      return false;
    return true;
  }
  bool operator != (const HeartbeatService_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartbeatService_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HeartbeatService_heartbeat_pargs {
 public:


  virtual ~HeartbeatService_heartbeat_pargs() throw();
  const TMasterInfo* master_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeartbeatService_heartbeat_result__isset {
  _HeartbeatService_heartbeat_result__isset() : success(false) {}
  bool success :1;
} _HeartbeatService_heartbeat_result__isset;

class HeartbeatService_heartbeat_result {
 public:

  HeartbeatService_heartbeat_result(const HeartbeatService_heartbeat_result&);
  HeartbeatService_heartbeat_result& operator=(const HeartbeatService_heartbeat_result&);
  HeartbeatService_heartbeat_result() {
  }

  virtual ~HeartbeatService_heartbeat_result() throw();
  THeartbeatResult success;

  _HeartbeatService_heartbeat_result__isset __isset;

  void __set_success(const THeartbeatResult& val);

  bool operator == (const HeartbeatService_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HeartbeatService_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartbeatService_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeartbeatService_heartbeat_presult__isset {
  _HeartbeatService_heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _HeartbeatService_heartbeat_presult__isset;

class HeartbeatService_heartbeat_presult {
 public:


  virtual ~HeartbeatService_heartbeat_presult() throw();
  THeartbeatResult* success;

  _HeartbeatService_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HeartbeatServiceClient : virtual public HeartbeatServiceIf {
 public:
  HeartbeatServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HeartbeatServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void heartbeat(THeartbeatResult& _return, const TMasterInfo& master_info);
  void send_heartbeat(const TMasterInfo& master_info);
  void recv_heartbeat(THeartbeatResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HeartbeatServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HeartbeatServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HeartbeatServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HeartbeatServiceProcessor(boost::shared_ptr<HeartbeatServiceIf> iface) :
    iface_(iface) {
    processMap_["heartbeat"] = &HeartbeatServiceProcessor::process_heartbeat;
  }

  virtual ~HeartbeatServiceProcessor() {}
};

class HeartbeatServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HeartbeatServiceProcessorFactory(const ::boost::shared_ptr< HeartbeatServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HeartbeatServiceIfFactory > handlerFactory_;
};

class HeartbeatServiceMultiface : virtual public HeartbeatServiceIf {
 public:
  HeartbeatServiceMultiface(std::vector<boost::shared_ptr<HeartbeatServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HeartbeatServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HeartbeatServiceIf> > ifaces_;
  HeartbeatServiceMultiface() {}
  void add(boost::shared_ptr<HeartbeatServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void heartbeat(THeartbeatResult& _return, const TMasterInfo& master_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(_return, master_info);
    }
    ifaces_[i]->heartbeat(_return, master_info);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HeartbeatServiceConcurrentClient : virtual public HeartbeatServiceIf {
 public:
  HeartbeatServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HeartbeatServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void heartbeat(THeartbeatResult& _return, const TMasterInfo& master_info);
  int32_t send_heartbeat(const TMasterInfo& master_info);
  void recv_heartbeat(THeartbeatResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
