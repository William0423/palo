// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: olap_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "olap_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace palo {

namespace {

const ::google::protobuf::Descriptor* ColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CompressKind_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_olap_5fcommon_2eproto() {
  protobuf_AddDesc_olap_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "olap_common.proto");
  GOOGLE_CHECK(file != NULL);
  ColumnMessage_descriptor_ = file->message_type(0);
  static const int ColumnMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, aggregation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, is_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, referenced_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, index_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, frac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, is_allow_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, sub_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, is_root_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, is_bf_column_),
  };
  ColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnMessage_descriptor_,
      ColumnMessage::default_instance_,
      ColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnMessage));
  CompressKind_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_olap_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnMessage_descriptor_, &ColumnMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_olap_5fcommon_2eproto() {
  delete ColumnMessage::default_instance_;
  delete ColumnMessage_reflection_;
}

void protobuf_AddDesc_olap_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021olap_common.proto\022\004palo\"\321\002\n\rColumnMess"
    "age\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\023\n\013aggre"
    "gation\030\003 \002(\t\022\016\n\006length\030\004 \002(\r\022\016\n\006is_key\030\005"
    " \002(\010\022\025\n\rdefault_value\030\006 \001(\t\022\031\n\021reference"
    "d_column\030\007 \001(\t\022\024\n\014index_length\030\010 \001(\r\022\025\n\t"
    "precision\030\t \001(\r:\00227\022\017\n\004frac\030\n \001(\r:\0019\022\034\n\r"
    "is_allow_null\030\013 \001(\010:\005false\022\021\n\tunique_id\030"
    "\014 \001(\r\022\022\n\nsub_column\030\r \003(\r\022\035\n\016is_root_col"
    "umn\030\016 \001(\010:\005false\022\033\n\014is_bf_column\030\017 \001(\010:\005"
    "false*E\n\014CompressKind\022\021\n\rCOMPRESS_NONE\020\000"
    "\022\020\n\014COMPRESS_LZO\020\001\022\020\n\014COMPRESS_LZ4\020\002", 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "olap_common.proto", &protobuf_RegisterTypes);
  ColumnMessage::default_instance_ = new ColumnMessage();
  ColumnMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_olap_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_olap_5fcommon_2eproto {
  StaticDescriptorInitializer_olap_5fcommon_2eproto() {
    protobuf_AddDesc_olap_5fcommon_2eproto();
  }
} static_descriptor_initializer_olap_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* CompressKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressKind_descriptor_;
}
bool CompressKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnMessage::kNameFieldNumber;
const int ColumnMessage::kTypeFieldNumber;
const int ColumnMessage::kAggregationFieldNumber;
const int ColumnMessage::kLengthFieldNumber;
const int ColumnMessage::kIsKeyFieldNumber;
const int ColumnMessage::kDefaultValueFieldNumber;
const int ColumnMessage::kReferencedColumnFieldNumber;
const int ColumnMessage::kIndexLengthFieldNumber;
const int ColumnMessage::kPrecisionFieldNumber;
const int ColumnMessage::kFracFieldNumber;
const int ColumnMessage::kIsAllowNullFieldNumber;
const int ColumnMessage::kUniqueIdFieldNumber;
const int ColumnMessage::kSubColumnFieldNumber;
const int ColumnMessage::kIsRootColumnFieldNumber;
const int ColumnMessage::kIsBfColumnFieldNumber;
#endif  // !_MSC_VER

ColumnMessage::ColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.ColumnMessage)
}

void ColumnMessage::InitAsDefaultInstance() {
}

ColumnMessage::ColumnMessage(const ColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.ColumnMessage)
}

void ColumnMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aggregation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0u;
  is_key_ = false;
  default_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referenced_column_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_length_ = 0u;
  precision_ = 27u;
  frac_ = 9u;
  is_allow_null_ = false;
  unique_id_ = 0u;
  is_root_column_ = false;
  is_bf_column_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnMessage::~ColumnMessage() {
  // @@protoc_insertion_point(destructor:palo.ColumnMessage)
  SharedDtor();
}

void ColumnMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (aggregation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aggregation_;
  }
  if (default_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete default_value_;
  }
  if (referenced_column_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referenced_column_;
  }
  if (this != default_instance_) {
  }
}

void ColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnMessage_descriptor_;
}

const ColumnMessage& ColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5fcommon_2eproto();
  return *default_instance_;
}

ColumnMessage* ColumnMessage::default_instance_ = NULL;

ColumnMessage* ColumnMessage::New() const {
  return new ColumnMessage;
}

void ColumnMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(length_, index_length_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_aggregation()) {
      if (aggregation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        aggregation_->clear();
      }
    }
    is_key_ = false;
    if (has_default_value()) {
      if (default_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        default_value_->clear();
      }
    }
    if (has_referenced_column()) {
      if (referenced_column_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        referenced_column_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 28416) {
    ZR_(is_allow_null_, unique_id_);
    precision_ = 27u;
    frac_ = 9u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sub_column_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.ColumnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_aggregation;
        break;
      }

      // required string aggregation = 3;
      case 3: {
        if (tag == 26) {
         parse_aggregation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aggregation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aggregation().data(), this->aggregation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "aggregation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // required uint32 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_key;
        break;
      }

      // required bool is_key = 5;
      case 5: {
        if (tag == 40) {
         parse_is_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_key_)));
          set_has_is_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_default_value;
        break;
      }

      // optional string default_value = 6;
      case 6: {
        if (tag == 50) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_value().data(), this->default_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "default_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_referenced_column;
        break;
      }

      // optional string referenced_column = 7;
      case 7: {
        if (tag == 58) {
         parse_referenced_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenced_column()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referenced_column().data(), this->referenced_column().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "referenced_column");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_index_length;
        break;
      }

      // optional uint32 index_length = 8;
      case 8: {
        if (tag == 64) {
         parse_index_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_length_)));
          set_has_index_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_precision;
        break;
      }

      // optional uint32 precision = 9 [default = 27];
      case 9: {
        if (tag == 72) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_frac;
        break;
      }

      // optional uint32 frac = 10 [default = 9];
      case 10: {
        if (tag == 80) {
         parse_frac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frac_)));
          set_has_frac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_allow_null;
        break;
      }

      // optional bool is_allow_null = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_is_allow_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_allow_null_)));
          set_has_is_allow_null();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_unique_id;
        break;
      }

      // optional uint32 unique_id = 12;
      case 12: {
        if (tag == 96) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_sub_column;
        break;
      }

      // repeated uint32 sub_column = 13;
      case 13: {
        if (tag == 104) {
         parse_sub_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_sub_column())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sub_column())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_sub_column;
        if (input->ExpectTag(112)) goto parse_is_root_column;
        break;
      }

      // optional bool is_root_column = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_is_root_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_column_)));
          set_has_is_root_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_bf_column;
        break;
      }

      // optional bool is_bf_column = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_is_bf_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bf_column_)));
          set_has_is_bf_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.ColumnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.ColumnMessage)
  return false;
#undef DO_
}

void ColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.ColumnMessage)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required string aggregation = 3;
  if (has_aggregation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aggregation().data(), this->aggregation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aggregation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->aggregation(), output);
  }

  // required uint32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->length(), output);
  }

  // required bool is_key = 5;
  if (has_is_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_key(), output);
  }

  // optional string default_value = 6;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "default_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->default_value(), output);
  }

  // optional string referenced_column = 7;
  if (has_referenced_column()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referenced_column().data(), this->referenced_column().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "referenced_column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->referenced_column(), output);
  }

  // optional uint32 index_length = 8;
  if (has_index_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->index_length(), output);
  }

  // optional uint32 precision = 9 [default = 27];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->precision(), output);
  }

  // optional uint32 frac = 10 [default = 9];
  if (has_frac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->frac(), output);
  }

  // optional bool is_allow_null = 11 [default = false];
  if (has_is_allow_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_allow_null(), output);
  }

  // optional uint32 unique_id = 12;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->unique_id(), output);
  }

  // repeated uint32 sub_column = 13;
  for (int i = 0; i < this->sub_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->sub_column(i), output);
  }

  // optional bool is_root_column = 14 [default = false];
  if (has_is_root_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_root_column(), output);
  }

  // optional bool is_bf_column = 15 [default = false];
  if (has_is_bf_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_bf_column(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.ColumnMessage)
}

::google::protobuf::uint8* ColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.ColumnMessage)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string aggregation = 3;
  if (has_aggregation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aggregation().data(), this->aggregation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aggregation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aggregation(), target);
  }

  // required uint32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->length(), target);
  }

  // required bool is_key = 5;
  if (has_is_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_key(), target);
  }

  // optional string default_value = 6;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "default_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->default_value(), target);
  }

  // optional string referenced_column = 7;
  if (has_referenced_column()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referenced_column().data(), this->referenced_column().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "referenced_column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->referenced_column(), target);
  }

  // optional uint32 index_length = 8;
  if (has_index_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->index_length(), target);
  }

  // optional uint32 precision = 9 [default = 27];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->precision(), target);
  }

  // optional uint32 frac = 10 [default = 9];
  if (has_frac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->frac(), target);
  }

  // optional bool is_allow_null = 11 [default = false];
  if (has_is_allow_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_allow_null(), target);
  }

  // optional uint32 unique_id = 12;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->unique_id(), target);
  }

  // repeated uint32 sub_column = 13;
  for (int i = 0; i < this->sub_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->sub_column(i), target);
  }

  // optional bool is_root_column = 14 [default = false];
  if (has_is_root_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_root_column(), target);
  }

  // optional bool is_bf_column = 15 [default = false];
  if (has_is_bf_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_bf_column(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.ColumnMessage)
  return target;
}

int ColumnMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string aggregation = 3;
    if (has_aggregation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aggregation());
    }

    // required uint32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required bool is_key = 5;
    if (has_is_key()) {
      total_size += 1 + 1;
    }

    // optional string default_value = 6;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_value());
    }

    // optional string referenced_column = 7;
    if (has_referenced_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referenced_column());
    }

    // optional uint32 index_length = 8;
    if (has_index_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index_length());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 precision = 9 [default = 27];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precision());
    }

    // optional uint32 frac = 10 [default = 9];
    if (has_frac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frac());
    }

    // optional bool is_allow_null = 11 [default = false];
    if (has_is_allow_null()) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_id = 12;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

    // optional bool is_root_column = 14 [default = false];
    if (has_is_root_column()) {
      total_size += 1 + 1;
    }

    // optional bool is_bf_column = 15 [default = false];
    if (has_is_bf_column()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 sub_column = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->sub_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sub_column(i));
    }
    total_size += 1 * this->sub_column_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnMessage::MergeFrom(const ColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_column_.MergeFrom(from.sub_column_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_aggregation()) {
      set_aggregation(from.aggregation());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_is_key()) {
      set_is_key(from.is_key());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
    if (from.has_referenced_column()) {
      set_referenced_column(from.referenced_column());
    }
    if (from.has_index_length()) {
      set_index_length(from.index_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_frac()) {
      set_frac(from.frac());
    }
    if (from.has_is_allow_null()) {
      set_is_allow_null(from.is_allow_null());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_is_root_column()) {
      set_is_root_column(from.is_root_column());
    }
    if (from.has_is_bf_column()) {
      set_is_bf_column(from.is_bf_column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMessage::CopyFrom(const ColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ColumnMessage::Swap(ColumnMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(aggregation_, other->aggregation_);
    std::swap(length_, other->length_);
    std::swap(is_key_, other->is_key_);
    std::swap(default_value_, other->default_value_);
    std::swap(referenced_column_, other->referenced_column_);
    std::swap(index_length_, other->index_length_);
    std::swap(precision_, other->precision_);
    std::swap(frac_, other->frac_);
    std::swap(is_allow_null_, other->is_allow_null_);
    std::swap(unique_id_, other->unique_id_);
    sub_column_.Swap(&other->sub_column_);
    std::swap(is_root_column_, other->is_root_column_);
    std::swap(is_bf_column_, other->is_bf_column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnMessage_descriptor_;
  metadata.reflection = ColumnMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace palo

// @@protoc_insertion_point(global_scope)
