/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HeartbeatService_TYPES_H
#define HeartbeatService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Status_types.h"
#include "Types_types.h"


namespace palo {

class TMasterInfo;

class TBackendInfo;

class THeartbeatResult;

typedef struct _TMasterInfo__isset {
  _TMasterInfo__isset() : token(false) {}
  bool token :1;
} _TMasterInfo__isset;

class TMasterInfo {
 public:

  TMasterInfo(const TMasterInfo&);
  TMasterInfo& operator=(const TMasterInfo&);
  TMasterInfo() : cluster_id(0), epoch(0), token() {
  }

  virtual ~TMasterInfo() throw();
   ::palo::TNetworkAddress network_address;
   ::palo::TClusterId cluster_id;
   ::palo::TEpoch epoch;
  std::string token;

  _TMasterInfo__isset __isset;

  void __set_network_address(const  ::palo::TNetworkAddress& val);

  void __set_cluster_id(const  ::palo::TClusterId val);

  void __set_epoch(const  ::palo::TEpoch val);

  void __set_token(const std::string& val);

  bool operator == (const TMasterInfo & rhs) const
  {
    if (!(network_address == rhs.network_address))
      return false;
    if (!(cluster_id == rhs.cluster_id))
      return false;
    if (!(epoch == rhs.epoch))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const TMasterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMasterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMasterInfo &a, TMasterInfo &b);

inline std::ostream& operator<<(std::ostream& out, const TMasterInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TBackendInfo__isset {
  _TBackendInfo__isset() : be_rpc_port(false) {}
  bool be_rpc_port :1;
} _TBackendInfo__isset;

class TBackendInfo {
 public:

  TBackendInfo(const TBackendInfo&);
  TBackendInfo& operator=(const TBackendInfo&);
  TBackendInfo() : be_port(0), http_port(0), be_rpc_port(0) {
  }

  virtual ~TBackendInfo() throw();
   ::palo::TPort be_port;
   ::palo::TPort http_port;
   ::palo::TPort be_rpc_port;

  _TBackendInfo__isset __isset;

  void __set_be_port(const  ::palo::TPort val);

  void __set_http_port(const  ::palo::TPort val);

  void __set_be_rpc_port(const  ::palo::TPort val);

  bool operator == (const TBackendInfo & rhs) const
  {
    if (!(be_port == rhs.be_port))
      return false;
    if (!(http_port == rhs.http_port))
      return false;
    if (__isset.be_rpc_port != rhs.__isset.be_rpc_port)
      return false;
    else if (__isset.be_rpc_port && !(be_rpc_port == rhs.be_rpc_port))
      return false;
    return true;
  }
  bool operator != (const TBackendInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBackendInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBackendInfo &a, TBackendInfo &b);

inline std::ostream& operator<<(std::ostream& out, const TBackendInfo& obj)
{
  obj.printTo(out);
  return out;
}


class THeartbeatResult {
 public:

  THeartbeatResult(const THeartbeatResult&);
  THeartbeatResult& operator=(const THeartbeatResult&);
  THeartbeatResult() {
  }

  virtual ~THeartbeatResult() throw();
   ::palo::TStatus status;
  TBackendInfo backend_info;

  void __set_status(const  ::palo::TStatus& val);

  void __set_backend_info(const TBackendInfo& val);

  bool operator == (const THeartbeatResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(backend_info == rhs.backend_info))
      return false;
    return true;
  }
  bool operator != (const THeartbeatResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THeartbeatResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(THeartbeatResult &a, THeartbeatResult &b);

inline std::ostream& operator<<(std::ostream& out, const THeartbeatResult& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
