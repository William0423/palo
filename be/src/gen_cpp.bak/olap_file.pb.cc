// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: olap_file.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "olap_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace palo {

namespace {

const ::google::protobuf::Descriptor* ColumnPruning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnPruning_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeltaPruning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeltaPruning_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileVersionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileVersionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaChangeStatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaChangeStatusMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDataConditionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDataConditionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OLAPHeaderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OLAPHeaderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OLAPIndexHeaderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OLAPIndexHeaderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OLAPDataHeaderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OLAPDataHeaderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OLAPRawDeltaHeaderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OLAPRawDeltaHeaderMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeysType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_olap_5ffile_2eproto() {
  protobuf_AddDesc_olap_5ffile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "olap_file.proto");
  GOOGLE_CHECK(file != NULL);
  ColumnPruning_descriptor_ = file->message_type(0);
  static const int ColumnPruning_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnPruning, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnPruning, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnPruning, null_flag_),
  };
  ColumnPruning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnPruning_descriptor_,
      ColumnPruning::default_instance_,
      ColumnPruning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnPruning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnPruning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnPruning));
  DeltaPruning_descriptor_ = file->message_type(1);
  static const int DeltaPruning_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaPruning, column_pruning_),
  };
  DeltaPruning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeltaPruning_descriptor_,
      DeltaPruning::default_instance_,
      DeltaPruning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaPruning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaPruning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeltaPruning));
  FileVersionMessage_descriptor_ = file->message_type(2);
  static const int FileVersionMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, num_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, end_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, version_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, max_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, index_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, delta_pruning_),
  };
  FileVersionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileVersionMessage_descriptor_,
      FileVersionMessage::default_instance_,
      FileVersionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileVersionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileVersionMessage));
  SchemaChangeStatusMessage_descriptor_ = file->message_type(3);
  static const int SchemaChangeStatusMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaChangeStatusMessage, related_tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaChangeStatusMessage, related_schema_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaChangeStatusMessage, versions_to_be_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaChangeStatusMessage, schema_change_type_),
  };
  SchemaChangeStatusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaChangeStatusMessage_descriptor_,
      SchemaChangeStatusMessage::default_instance_,
      SchemaChangeStatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaChangeStatusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaChangeStatusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaChangeStatusMessage));
  DeleteDataConditionMessage_descriptor_ = file->message_type(4);
  static const int DeleteDataConditionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataConditionMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataConditionMessage, sub_conditions_),
  };
  DeleteDataConditionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteDataConditionMessage_descriptor_,
      DeleteDataConditionMessage::default_instance_,
      DeleteDataConditionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataConditionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataConditionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteDataConditionMessage));
  OLAPHeaderMessage_descriptor_ = file->message_type(5);
  static const int OLAPHeaderMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, num_rows_per_data_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, cumulative_layer_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, num_short_key_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, selectivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, schema_change_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, data_file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, next_column_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, compress_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, segment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, delete_data_conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, bf_fpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, keys_type_),
  };
  OLAPHeaderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OLAPHeaderMessage_descriptor_,
      OLAPHeaderMessage::default_instance_,
      OLAPHeaderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPHeaderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OLAPHeaderMessage));
  OLAPIndexHeaderMessage_descriptor_ = file->message_type(6);
  static const int OLAPIndexHeaderMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, end_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, cumulative_version_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, num_rows_per_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, null_supported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, delete_flag_),
  };
  OLAPIndexHeaderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OLAPIndexHeaderMessage_descriptor_,
      OLAPIndexHeaderMessage::default_instance_,
      OLAPIndexHeaderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPIndexHeaderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OLAPIndexHeaderMessage));
  OLAPDataHeaderMessage_descriptor_ = file->message_type(7);
  static const int OLAPDataHeaderMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPDataHeaderMessage, segment_),
  };
  OLAPDataHeaderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OLAPDataHeaderMessage_descriptor_,
      OLAPDataHeaderMessage::default_instance_,
      OLAPDataHeaderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPDataHeaderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPDataHeaderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OLAPDataHeaderMessage));
  OLAPRawDeltaHeaderMessage_descriptor_ = file->message_type(8);
  static const int OLAPRawDeltaHeaderMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPRawDeltaHeaderMessage, schema_hash_),
  };
  OLAPRawDeltaHeaderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OLAPRawDeltaHeaderMessage_descriptor_,
      OLAPRawDeltaHeaderMessage::default_instance_,
      OLAPRawDeltaHeaderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPRawDeltaHeaderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLAPRawDeltaHeaderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OLAPRawDeltaHeaderMessage));
  DataFileType_descriptor_ = file->enum_type(0);
  KeysType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_olap_5ffile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnPruning_descriptor_, &ColumnPruning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeltaPruning_descriptor_, &DeltaPruning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileVersionMessage_descriptor_, &FileVersionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaChangeStatusMessage_descriptor_, &SchemaChangeStatusMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteDataConditionMessage_descriptor_, &DeleteDataConditionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OLAPHeaderMessage_descriptor_, &OLAPHeaderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OLAPIndexHeaderMessage_descriptor_, &OLAPIndexHeaderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OLAPDataHeaderMessage_descriptor_, &OLAPDataHeaderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OLAPRawDeltaHeaderMessage_descriptor_, &OLAPRawDeltaHeaderMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_olap_5ffile_2eproto() {
  delete ColumnPruning::default_instance_;
  delete ColumnPruning_reflection_;
  delete DeltaPruning::default_instance_;
  delete DeltaPruning_reflection_;
  delete FileVersionMessage::default_instance_;
  delete FileVersionMessage_reflection_;
  delete SchemaChangeStatusMessage::default_instance_;
  delete SchemaChangeStatusMessage_reflection_;
  delete DeleteDataConditionMessage::default_instance_;
  delete DeleteDataConditionMessage_reflection_;
  delete OLAPHeaderMessage::default_instance_;
  delete OLAPHeaderMessage_reflection_;
  delete OLAPIndexHeaderMessage::default_instance_;
  delete OLAPIndexHeaderMessage_reflection_;
  delete OLAPDataHeaderMessage::default_instance_;
  delete OLAPDataHeaderMessage_reflection_;
  delete OLAPRawDeltaHeaderMessage::default_instance_;
  delete OLAPRawDeltaHeaderMessage_reflection_;
}

void protobuf_AddDesc_olap_5ffile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::palo::protobuf_AddDesc_olap_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017olap_file.proto\022\004palo\032\021olap_common.pro"
    "to\"<\n\rColumnPruning\022\013\n\003min\030\001 \002(\014\022\013\n\003max\030"
    "\002 \002(\014\022\021\n\tnull_flag\030\003 \001(\010\";\n\014DeltaPruning"
    "\022+\n\016column_pruning\030\001 \003(\0132\023.palo.ColumnPr"
    "uning\"\223\002\n\022FileVersionMessage\022\027\n\014num_segm"
    "ents\030\001 \002(\r:\0010\022\025\n\rstart_version\030\002 \002(\005\022\023\n\013"
    "end_version\030\003 \002(\005\022\027\n\014version_hash\030\004 \002(\003:"
    "\0010\022\030\n\rmax_timestamp\030\005 \002(\003:\0010\022\025\n\nindex_si"
    "ze\030\006 \002(\003:\0010\022\024\n\tdata_size\030\007 \002(\003:\0010\022\023\n\010num"
    "_rows\030\010 \001(\003:\0010\022\030\n\rcreation_time\030\t \002(\003:\0010"
    "\022)\n\rdelta_pruning\030\n \001(\0132\022.palo.DeltaPrun"
    "ing\"\251\001\n\031SchemaChangeStatusMessage\022\031\n\021rel"
    "ated_tablet_id\030\001 \002(\003\022\033\n\023related_schema_h"
    "ash\030\002 \002(\005\0228\n\026versions_to_be_changed\030\003 \003("
    "\0132\030.palo.FileVersionMessage\022\032\n\022schema_ch"
    "ange_type\030\004 \002(\005\"E\n\032DeleteDataConditionMe"
    "ssage\022\017\n\007version\030\001 \002(\005\022\026\n\016sub_conditions"
    "\030\002 \003(\t\"\340\004\n\021OLAPHeaderMessage\022\037\n\027num_rows"
    "_per_data_block\030\001 \002(\r\022.\n\014file_version\030\002 "
    "\003(\0132\030.palo.FileVersionMessage\022\036\n\026cumulat"
    "ive_layer_point\030\003 \002(\005\022\034\n\024num_short_key_f"
    "ields\030\004 \002(\r\022#\n\006column\030\005 \003(\0132\023.palo.Colum"
    "nMessage\022\025\n\rcreation_time\030\006 \002(\003\022\023\n\013selec"
    "tivity\030\007 \003(\005\022=\n\024schema_change_status\030\010 \001"
    "(\0132\037.palo.SchemaChangeStatusMessage\022:\n\016d"
    "ata_file_type\030\t \001(\0162\022.palo.DataFileType:"
    "\016OLAP_DATA_FILE\022 \n\025next_column_unique_id"
    "\030\n \001(\r:\0010\0227\n\rcompress_kind\030\013 \001(\0162\022.palo."
    "CompressKind:\014COMPRESS_LZO\022 \n\014segment_si"
    "ze\030\014 \001(\r:\n4292870144\022@\n\026delete_data_cond"
    "itions\030\r \003(\0132 .palo.DeleteDataConditionM"
    "essage\022\016\n\006bf_fpp\030\016 \001(\001\022!\n\tkeys_type\030\017 \001("
    "\0162\016.palo.KeysType\"\277\001\n\026OLAPIndexHeaderMes"
    "sage\022\025\n\rstart_version\030\001 \002(\005\022\023\n\013end_versi"
    "on\030\002 \002(\005\022\037\n\027cumulative_version_hash\030\003 \002("
    "\003\022\017\n\007segment\030\004 \002(\r\022\032\n\022num_rows_per_block"
    "\030\005 \002(\r\022\026\n\016null_supported\030\006 \001(\010\022\023\n\013delete"
    "_flag\030\007 \001(\010\"(\n\025OLAPDataHeaderMessage\022\017\n\007"
    "segment\030\002 \002(\r\"0\n\031OLAPRawDeltaHeaderMessa"
    "ge\022\023\n\013schema_hash\030\002 \002(\005*<\n\014DataFileType\022"
    "\022\n\016OLAP_DATA_FILE\020\000\022\030\n\024COLUMN_ORIENTED_F"
    "ILE\020\001*7\n\010KeysType\022\014\n\010DUP_KEYS\020\000\022\017\n\013UNIQU"
    "E_KEYS\020\001\022\014\n\010AGG_KEYS\020\002", 1702);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "olap_file.proto", &protobuf_RegisterTypes);
  ColumnPruning::default_instance_ = new ColumnPruning();
  DeltaPruning::default_instance_ = new DeltaPruning();
  FileVersionMessage::default_instance_ = new FileVersionMessage();
  SchemaChangeStatusMessage::default_instance_ = new SchemaChangeStatusMessage();
  DeleteDataConditionMessage::default_instance_ = new DeleteDataConditionMessage();
  OLAPHeaderMessage::default_instance_ = new OLAPHeaderMessage();
  OLAPIndexHeaderMessage::default_instance_ = new OLAPIndexHeaderMessage();
  OLAPDataHeaderMessage::default_instance_ = new OLAPDataHeaderMessage();
  OLAPRawDeltaHeaderMessage::default_instance_ = new OLAPRawDeltaHeaderMessage();
  ColumnPruning::default_instance_->InitAsDefaultInstance();
  DeltaPruning::default_instance_->InitAsDefaultInstance();
  FileVersionMessage::default_instance_->InitAsDefaultInstance();
  SchemaChangeStatusMessage::default_instance_->InitAsDefaultInstance();
  DeleteDataConditionMessage::default_instance_->InitAsDefaultInstance();
  OLAPHeaderMessage::default_instance_->InitAsDefaultInstance();
  OLAPIndexHeaderMessage::default_instance_->InitAsDefaultInstance();
  OLAPDataHeaderMessage::default_instance_->InitAsDefaultInstance();
  OLAPRawDeltaHeaderMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_olap_5ffile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_olap_5ffile_2eproto {
  StaticDescriptorInitializer_olap_5ffile_2eproto() {
    protobuf_AddDesc_olap_5ffile_2eproto();
  }
} static_descriptor_initializer_olap_5ffile_2eproto_;
const ::google::protobuf::EnumDescriptor* DataFileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFileType_descriptor_;
}
bool DataFileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeysType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeysType_descriptor_;
}
bool KeysType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnPruning::kMinFieldNumber;
const int ColumnPruning::kMaxFieldNumber;
const int ColumnPruning::kNullFlagFieldNumber;
#endif  // !_MSC_VER

ColumnPruning::ColumnPruning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.ColumnPruning)
}

void ColumnPruning::InitAsDefaultInstance() {
}

ColumnPruning::ColumnPruning(const ColumnPruning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.ColumnPruning)
}

void ColumnPruning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  min_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  null_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnPruning::~ColumnPruning() {
  // @@protoc_insertion_point(destructor:palo.ColumnPruning)
  SharedDtor();
}

void ColumnPruning::SharedDtor() {
  if (min_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete min_;
  }
  if (max_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_;
  }
  if (this != default_instance_) {
  }
}

void ColumnPruning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnPruning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnPruning_descriptor_;
}

const ColumnPruning& ColumnPruning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

ColumnPruning* ColumnPruning::default_instance_ = NULL;

ColumnPruning* ColumnPruning::New() const {
  return new ColumnPruning;
}

void ColumnPruning::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_min()) {
      if (min_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        min_->clear();
      }
    }
    if (has_max()) {
      if (max_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_->clear();
      }
    }
    null_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnPruning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.ColumnPruning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes min = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_min()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_max;
        break;
      }

      // required bytes max = 2;
      case 2: {
        if (tag == 18) {
         parse_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_null_flag;
        break;
      }

      // optional bool null_flag = 3;
      case 3: {
        if (tag == 24) {
         parse_null_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &null_flag_)));
          set_has_null_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.ColumnPruning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.ColumnPruning)
  return false;
#undef DO_
}

void ColumnPruning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.ColumnPruning)
  // required bytes min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->min(), output);
  }

  // required bytes max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->max(), output);
  }

  // optional bool null_flag = 3;
  if (has_null_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->null_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.ColumnPruning)
}

::google::protobuf::uint8* ColumnPruning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.ColumnPruning)
  // required bytes min = 1;
  if (has_min()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->min(), target);
  }

  // required bytes max = 2;
  if (has_max()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->max(), target);
  }

  // optional bool null_flag = 3;
  if (has_null_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->null_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.ColumnPruning)
  return target;
}

int ColumnPruning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->min());
    }

    // required bytes max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->max());
    }

    // optional bool null_flag = 3;
    if (has_null_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnPruning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnPruning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnPruning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnPruning::MergeFrom(const ColumnPruning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_null_flag()) {
      set_null_flag(from.null_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnPruning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnPruning::CopyFrom(const ColumnPruning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnPruning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ColumnPruning::Swap(ColumnPruning* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(null_flag_, other->null_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnPruning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnPruning_descriptor_;
  metadata.reflection = ColumnPruning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeltaPruning::kColumnPruningFieldNumber;
#endif  // !_MSC_VER

DeltaPruning::DeltaPruning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.DeltaPruning)
}

void DeltaPruning::InitAsDefaultInstance() {
}

DeltaPruning::DeltaPruning(const DeltaPruning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.DeltaPruning)
}

void DeltaPruning::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaPruning::~DeltaPruning() {
  // @@protoc_insertion_point(destructor:palo.DeltaPruning)
  SharedDtor();
}

void DeltaPruning::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeltaPruning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaPruning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaPruning_descriptor_;
}

const DeltaPruning& DeltaPruning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

DeltaPruning* DeltaPruning::default_instance_ = NULL;

DeltaPruning* DeltaPruning::New() const {
  return new DeltaPruning;
}

void DeltaPruning::Clear() {
  column_pruning_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeltaPruning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.DeltaPruning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .palo.ColumnPruning column_pruning = 1;
      case 1: {
        if (tag == 10) {
         parse_column_pruning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column_pruning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_column_pruning;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.DeltaPruning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.DeltaPruning)
  return false;
#undef DO_
}

void DeltaPruning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.DeltaPruning)
  // repeated .palo.ColumnPruning column_pruning = 1;
  for (int i = 0; i < this->column_pruning_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column_pruning(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.DeltaPruning)
}

::google::protobuf::uint8* DeltaPruning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.DeltaPruning)
  // repeated .palo.ColumnPruning column_pruning = 1;
  for (int i = 0; i < this->column_pruning_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column_pruning(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.DeltaPruning)
  return target;
}

int DeltaPruning::ByteSize() const {
  int total_size = 0;

  // repeated .palo.ColumnPruning column_pruning = 1;
  total_size += 1 * this->column_pruning_size();
  for (int i = 0; i < this->column_pruning_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_pruning(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaPruning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeltaPruning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeltaPruning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeltaPruning::MergeFrom(const DeltaPruning& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_pruning_.MergeFrom(from.column_pruning_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeltaPruning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaPruning::CopyFrom(const DeltaPruning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaPruning::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->column_pruning())) return false;
  return true;
}

void DeltaPruning::Swap(DeltaPruning* other) {
  if (other != this) {
    column_pruning_.Swap(&other->column_pruning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeltaPruning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeltaPruning_descriptor_;
  metadata.reflection = DeltaPruning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileVersionMessage::kNumSegmentsFieldNumber;
const int FileVersionMessage::kStartVersionFieldNumber;
const int FileVersionMessage::kEndVersionFieldNumber;
const int FileVersionMessage::kVersionHashFieldNumber;
const int FileVersionMessage::kMaxTimestampFieldNumber;
const int FileVersionMessage::kIndexSizeFieldNumber;
const int FileVersionMessage::kDataSizeFieldNumber;
const int FileVersionMessage::kNumRowsFieldNumber;
const int FileVersionMessage::kCreationTimeFieldNumber;
const int FileVersionMessage::kDeltaPruningFieldNumber;
#endif  // !_MSC_VER

FileVersionMessage::FileVersionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.FileVersionMessage)
}

void FileVersionMessage::InitAsDefaultInstance() {
  delta_pruning_ = const_cast< ::palo::DeltaPruning*>(&::palo::DeltaPruning::default_instance());
}

FileVersionMessage::FileVersionMessage(const FileVersionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.FileVersionMessage)
}

void FileVersionMessage::SharedCtor() {
  _cached_size_ = 0;
  num_segments_ = 0u;
  start_version_ = 0;
  end_version_ = 0;
  version_hash_ = GOOGLE_LONGLONG(0);
  max_timestamp_ = GOOGLE_LONGLONG(0);
  index_size_ = GOOGLE_LONGLONG(0);
  data_size_ = GOOGLE_LONGLONG(0);
  num_rows_ = GOOGLE_LONGLONG(0);
  creation_time_ = GOOGLE_LONGLONG(0);
  delta_pruning_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileVersionMessage::~FileVersionMessage() {
  // @@protoc_insertion_point(destructor:palo.FileVersionMessage)
  SharedDtor();
}

void FileVersionMessage::SharedDtor() {
  if (this != default_instance_) {
    delete delta_pruning_;
  }
}

void FileVersionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileVersionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileVersionMessage_descriptor_;
}

const FileVersionMessage& FileVersionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

FileVersionMessage* FileVersionMessage::default_instance_ = NULL;

FileVersionMessage* FileVersionMessage::New() const {
  return new FileVersionMessage;
}

void FileVersionMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileVersionMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(num_segments_, num_rows_);
    end_version_ = 0;
  }
  if (_has_bits_[8 / 32] & 768) {
    creation_time_ = GOOGLE_LONGLONG(0);
    if (has_delta_pruning()) {
      if (delta_pruning_ != NULL) delta_pruning_->::palo::DeltaPruning::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileVersionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.FileVersionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_segments = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_segments_)));
          set_has_num_segments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_version;
        break;
      }

      // required int32 start_version = 2;
      case 2: {
        if (tag == 16) {
         parse_start_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_version;
        break;
      }

      // required int32 end_version = 3;
      case 3: {
        if (tag == 24) {
         parse_end_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_version_)));
          set_has_end_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version_hash;
        break;
      }

      // required int64 version_hash = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_version_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_hash_)));
          set_has_version_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_timestamp;
        break;
      }

      // required int64 max_timestamp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_max_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_timestamp_)));
          set_has_max_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index_size;
        break;
      }

      // required int64 index_size = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_index_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_size_)));
          set_has_index_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data_size;
        break;
      }

      // required int64 data_size = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_rows;
        break;
      }

      // optional int64 num_rows = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_num_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
          set_has_num_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_creation_time;
        break;
      }

      // required int64 creation_time = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_delta_pruning;
        break;
      }

      // optional .palo.DeltaPruning delta_pruning = 10;
      case 10: {
        if (tag == 82) {
         parse_delta_pruning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delta_pruning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.FileVersionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.FileVersionMessage)
  return false;
#undef DO_
}

void FileVersionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.FileVersionMessage)
  // required uint32 num_segments = 1 [default = 0];
  if (has_num_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_segments(), output);
  }

  // required int32 start_version = 2;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_version(), output);
  }

  // required int32 end_version = 3;
  if (has_end_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_version(), output);
  }

  // required int64 version_hash = 4 [default = 0];
  if (has_version_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version_hash(), output);
  }

  // required int64 max_timestamp = 5 [default = 0];
  if (has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_timestamp(), output);
  }

  // required int64 index_size = 6 [default = 0];
  if (has_index_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->index_size(), output);
  }

  // required int64 data_size = 7 [default = 0];
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->data_size(), output);
  }

  // optional int64 num_rows = 8 [default = 0];
  if (has_num_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_rows(), output);
  }

  // required int64 creation_time = 9 [default = 0];
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->creation_time(), output);
  }

  // optional .palo.DeltaPruning delta_pruning = 10;
  if (has_delta_pruning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->delta_pruning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.FileVersionMessage)
}

::google::protobuf::uint8* FileVersionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.FileVersionMessage)
  // required uint32 num_segments = 1 [default = 0];
  if (has_num_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_segments(), target);
  }

  // required int32 start_version = 2;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_version(), target);
  }

  // required int32 end_version = 3;
  if (has_end_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_version(), target);
  }

  // required int64 version_hash = 4 [default = 0];
  if (has_version_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->version_hash(), target);
  }

  // required int64 max_timestamp = 5 [default = 0];
  if (has_max_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_timestamp(), target);
  }

  // required int64 index_size = 6 [default = 0];
  if (has_index_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->index_size(), target);
  }

  // required int64 data_size = 7 [default = 0];
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->data_size(), target);
  }

  // optional int64 num_rows = 8 [default = 0];
  if (has_num_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->num_rows(), target);
  }

  // required int64 creation_time = 9 [default = 0];
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->creation_time(), target);
  }

  // optional .palo.DeltaPruning delta_pruning = 10;
  if (has_delta_pruning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->delta_pruning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.FileVersionMessage)
  return target;
}

int FileVersionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_segments = 1 [default = 0];
    if (has_num_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_segments());
    }

    // required int32 start_version = 2;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_version());
    }

    // required int32 end_version = 3;
    if (has_end_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_version());
    }

    // required int64 version_hash = 4 [default = 0];
    if (has_version_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version_hash());
    }

    // required int64 max_timestamp = 5 [default = 0];
    if (has_max_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_timestamp());
    }

    // required int64 index_size = 6 [default = 0];
    if (has_index_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index_size());
    }

    // required int64 data_size = 7 [default = 0];
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_size());
    }

    // optional int64 num_rows = 8 [default = 0];
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_rows());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 creation_time = 9 [default = 0];
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_time());
    }

    // optional .palo.DeltaPruning delta_pruning = 10;
    if (has_delta_pruning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delta_pruning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileVersionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileVersionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileVersionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileVersionMessage::MergeFrom(const FileVersionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_segments()) {
      set_num_segments(from.num_segments());
    }
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_end_version()) {
      set_end_version(from.end_version());
    }
    if (from.has_version_hash()) {
      set_version_hash(from.version_hash());
    }
    if (from.has_max_timestamp()) {
      set_max_timestamp(from.max_timestamp());
    }
    if (from.has_index_size()) {
      set_index_size(from.index_size());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
    if (from.has_num_rows()) {
      set_num_rows(from.num_rows());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_delta_pruning()) {
      mutable_delta_pruning()->::palo::DeltaPruning::MergeFrom(from.delta_pruning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileVersionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileVersionMessage::CopyFrom(const FileVersionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileVersionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;

  if (has_delta_pruning()) {
    if (!this->delta_pruning().IsInitialized()) return false;
  }
  return true;
}

void FileVersionMessage::Swap(FileVersionMessage* other) {
  if (other != this) {
    std::swap(num_segments_, other->num_segments_);
    std::swap(start_version_, other->start_version_);
    std::swap(end_version_, other->end_version_);
    std::swap(version_hash_, other->version_hash_);
    std::swap(max_timestamp_, other->max_timestamp_);
    std::swap(index_size_, other->index_size_);
    std::swap(data_size_, other->data_size_);
    std::swap(num_rows_, other->num_rows_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(delta_pruning_, other->delta_pruning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileVersionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileVersionMessage_descriptor_;
  metadata.reflection = FileVersionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SchemaChangeStatusMessage::kRelatedTabletIdFieldNumber;
const int SchemaChangeStatusMessage::kRelatedSchemaHashFieldNumber;
const int SchemaChangeStatusMessage::kVersionsToBeChangedFieldNumber;
const int SchemaChangeStatusMessage::kSchemaChangeTypeFieldNumber;
#endif  // !_MSC_VER

SchemaChangeStatusMessage::SchemaChangeStatusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.SchemaChangeStatusMessage)
}

void SchemaChangeStatusMessage::InitAsDefaultInstance() {
}

SchemaChangeStatusMessage::SchemaChangeStatusMessage(const SchemaChangeStatusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.SchemaChangeStatusMessage)
}

void SchemaChangeStatusMessage::SharedCtor() {
  _cached_size_ = 0;
  related_tablet_id_ = GOOGLE_LONGLONG(0);
  related_schema_hash_ = 0;
  schema_change_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaChangeStatusMessage::~SchemaChangeStatusMessage() {
  // @@protoc_insertion_point(destructor:palo.SchemaChangeStatusMessage)
  SharedDtor();
}

void SchemaChangeStatusMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaChangeStatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaChangeStatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaChangeStatusMessage_descriptor_;
}

const SchemaChangeStatusMessage& SchemaChangeStatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

SchemaChangeStatusMessage* SchemaChangeStatusMessage::default_instance_ = NULL;

SchemaChangeStatusMessage* SchemaChangeStatusMessage::New() const {
  return new SchemaChangeStatusMessage;
}

void SchemaChangeStatusMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SchemaChangeStatusMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(related_schema_hash_, schema_change_type_);
    related_tablet_id_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  versions_to_be_changed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaChangeStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.SchemaChangeStatusMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 related_tablet_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &related_tablet_id_)));
          set_has_related_tablet_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_related_schema_hash;
        break;
      }

      // required int32 related_schema_hash = 2;
      case 2: {
        if (tag == 16) {
         parse_related_schema_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &related_schema_hash_)));
          set_has_related_schema_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_versions_to_be_changed;
        break;
      }

      // repeated .palo.FileVersionMessage versions_to_be_changed = 3;
      case 3: {
        if (tag == 26) {
         parse_versions_to_be_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions_to_be_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_versions_to_be_changed;
        if (input->ExpectTag(32)) goto parse_schema_change_type;
        break;
      }

      // required int32 schema_change_type = 4;
      case 4: {
        if (tag == 32) {
         parse_schema_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_change_type_)));
          set_has_schema_change_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.SchemaChangeStatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.SchemaChangeStatusMessage)
  return false;
#undef DO_
}

void SchemaChangeStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.SchemaChangeStatusMessage)
  // required int64 related_tablet_id = 1;
  if (has_related_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->related_tablet_id(), output);
  }

  // required int32 related_schema_hash = 2;
  if (has_related_schema_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->related_schema_hash(), output);
  }

  // repeated .palo.FileVersionMessage versions_to_be_changed = 3;
  for (int i = 0; i < this->versions_to_be_changed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->versions_to_be_changed(i), output);
  }

  // required int32 schema_change_type = 4;
  if (has_schema_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->schema_change_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.SchemaChangeStatusMessage)
}

::google::protobuf::uint8* SchemaChangeStatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.SchemaChangeStatusMessage)
  // required int64 related_tablet_id = 1;
  if (has_related_tablet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->related_tablet_id(), target);
  }

  // required int32 related_schema_hash = 2;
  if (has_related_schema_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->related_schema_hash(), target);
  }

  // repeated .palo.FileVersionMessage versions_to_be_changed = 3;
  for (int i = 0; i < this->versions_to_be_changed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->versions_to_be_changed(i), target);
  }

  // required int32 schema_change_type = 4;
  if (has_schema_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->schema_change_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.SchemaChangeStatusMessage)
  return target;
}

int SchemaChangeStatusMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 related_tablet_id = 1;
    if (has_related_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->related_tablet_id());
    }

    // required int32 related_schema_hash = 2;
    if (has_related_schema_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->related_schema_hash());
    }

    // required int32 schema_change_type = 4;
    if (has_schema_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schema_change_type());
    }

  }
  // repeated .palo.FileVersionMessage versions_to_be_changed = 3;
  total_size += 1 * this->versions_to_be_changed_size();
  for (int i = 0; i < this->versions_to_be_changed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versions_to_be_changed(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaChangeStatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaChangeStatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaChangeStatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaChangeStatusMessage::MergeFrom(const SchemaChangeStatusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_to_be_changed_.MergeFrom(from.versions_to_be_changed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_related_tablet_id()) {
      set_related_tablet_id(from.related_tablet_id());
    }
    if (from.has_related_schema_hash()) {
      set_related_schema_hash(from.related_schema_hash());
    }
    if (from.has_schema_change_type()) {
      set_schema_change_type(from.schema_change_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaChangeStatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaChangeStatusMessage::CopyFrom(const SchemaChangeStatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaChangeStatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->versions_to_be_changed())) return false;
  return true;
}

void SchemaChangeStatusMessage::Swap(SchemaChangeStatusMessage* other) {
  if (other != this) {
    std::swap(related_tablet_id_, other->related_tablet_id_);
    std::swap(related_schema_hash_, other->related_schema_hash_);
    versions_to_be_changed_.Swap(&other->versions_to_be_changed_);
    std::swap(schema_change_type_, other->schema_change_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaChangeStatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaChangeStatusMessage_descriptor_;
  metadata.reflection = SchemaChangeStatusMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteDataConditionMessage::kVersionFieldNumber;
const int DeleteDataConditionMessage::kSubConditionsFieldNumber;
#endif  // !_MSC_VER

DeleteDataConditionMessage::DeleteDataConditionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.DeleteDataConditionMessage)
}

void DeleteDataConditionMessage::InitAsDefaultInstance() {
}

DeleteDataConditionMessage::DeleteDataConditionMessage(const DeleteDataConditionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.DeleteDataConditionMessage)
}

void DeleteDataConditionMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteDataConditionMessage::~DeleteDataConditionMessage() {
  // @@protoc_insertion_point(destructor:palo.DeleteDataConditionMessage)
  SharedDtor();
}

void DeleteDataConditionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteDataConditionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDataConditionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDataConditionMessage_descriptor_;
}

const DeleteDataConditionMessage& DeleteDataConditionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

DeleteDataConditionMessage* DeleteDataConditionMessage::default_instance_ = NULL;

DeleteDataConditionMessage* DeleteDataConditionMessage::New() const {
  return new DeleteDataConditionMessage;
}

void DeleteDataConditionMessage::Clear() {
  version_ = 0;
  sub_conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteDataConditionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.DeleteDataConditionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_conditions;
        break;
      }

      // repeated string sub_conditions = 2;
      case 2: {
        if (tag == 18) {
         parse_sub_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sub_conditions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_conditions(this->sub_conditions_size() - 1).data(),
            this->sub_conditions(this->sub_conditions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sub_conditions");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_conditions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.DeleteDataConditionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.DeleteDataConditionMessage)
  return false;
#undef DO_
}

void DeleteDataConditionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.DeleteDataConditionMessage)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated string sub_conditions = 2;
  for (int i = 0; i < this->sub_conditions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->sub_conditions(i).data(), this->sub_conditions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "sub_conditions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sub_conditions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.DeleteDataConditionMessage)
}

::google::protobuf::uint8* DeleteDataConditionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.DeleteDataConditionMessage)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated string sub_conditions = 2;
  for (int i = 0; i < this->sub_conditions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_conditions(i).data(), this->sub_conditions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub_conditions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->sub_conditions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.DeleteDataConditionMessage)
  return target;
}

int DeleteDataConditionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  // repeated string sub_conditions = 2;
  total_size += 1 * this->sub_conditions_size();
  for (int i = 0; i < this->sub_conditions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sub_conditions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDataConditionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteDataConditionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteDataConditionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteDataConditionMessage::MergeFrom(const DeleteDataConditionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_conditions_.MergeFrom(from.sub_conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteDataConditionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDataConditionMessage::CopyFrom(const DeleteDataConditionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDataConditionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteDataConditionMessage::Swap(DeleteDataConditionMessage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    sub_conditions_.Swap(&other->sub_conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteDataConditionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDataConditionMessage_descriptor_;
  metadata.reflection = DeleteDataConditionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OLAPHeaderMessage::kNumRowsPerDataBlockFieldNumber;
const int OLAPHeaderMessage::kFileVersionFieldNumber;
const int OLAPHeaderMessage::kCumulativeLayerPointFieldNumber;
const int OLAPHeaderMessage::kNumShortKeyFieldsFieldNumber;
const int OLAPHeaderMessage::kColumnFieldNumber;
const int OLAPHeaderMessage::kCreationTimeFieldNumber;
const int OLAPHeaderMessage::kSelectivityFieldNumber;
const int OLAPHeaderMessage::kSchemaChangeStatusFieldNumber;
const int OLAPHeaderMessage::kDataFileTypeFieldNumber;
const int OLAPHeaderMessage::kNextColumnUniqueIdFieldNumber;
const int OLAPHeaderMessage::kCompressKindFieldNumber;
const int OLAPHeaderMessage::kSegmentSizeFieldNumber;
const int OLAPHeaderMessage::kDeleteDataConditionsFieldNumber;
const int OLAPHeaderMessage::kBfFppFieldNumber;
const int OLAPHeaderMessage::kKeysTypeFieldNumber;
#endif  // !_MSC_VER

OLAPHeaderMessage::OLAPHeaderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.OLAPHeaderMessage)
}

void OLAPHeaderMessage::InitAsDefaultInstance() {
  schema_change_status_ = const_cast< ::palo::SchemaChangeStatusMessage*>(&::palo::SchemaChangeStatusMessage::default_instance());
}

OLAPHeaderMessage::OLAPHeaderMessage(const OLAPHeaderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.OLAPHeaderMessage)
}

void OLAPHeaderMessage::SharedCtor() {
  _cached_size_ = 0;
  num_rows_per_data_block_ = 0u;
  cumulative_layer_point_ = 0;
  num_short_key_fields_ = 0u;
  creation_time_ = GOOGLE_LONGLONG(0);
  schema_change_status_ = NULL;
  data_file_type_ = 0;
  next_column_unique_id_ = 0u;
  compress_kind_ = 1;
  segment_size_ = 4292870144u;
  bf_fpp_ = 0;
  keys_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OLAPHeaderMessage::~OLAPHeaderMessage() {
  // @@protoc_insertion_point(destructor:palo.OLAPHeaderMessage)
  SharedDtor();
}

void OLAPHeaderMessage::SharedDtor() {
  if (this != default_instance_) {
    delete schema_change_status_;
  }
}

void OLAPHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OLAPHeaderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OLAPHeaderMessage_descriptor_;
}

const OLAPHeaderMessage& OLAPHeaderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

OLAPHeaderMessage* OLAPHeaderMessage::default_instance_ = NULL;

OLAPHeaderMessage* OLAPHeaderMessage::New() const {
  return new OLAPHeaderMessage;
}

void OLAPHeaderMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OLAPHeaderMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 173) {
    ZR_(num_rows_per_data_block_, cumulative_layer_point_);
    ZR_(creation_time_, num_short_key_fields_);
    if (has_schema_change_status()) {
      if (schema_change_status_ != NULL) schema_change_status_->::palo::SchemaChangeStatusMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 28416) {
    ZR_(keys_type_, bf_fpp_);
    data_file_type_ = 0;
    next_column_unique_id_ = 0u;
    compress_kind_ = 1;
    segment_size_ = 4292870144u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  file_version_.Clear();
  column_.Clear();
  selectivity_.Clear();
  delete_data_conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OLAPHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.OLAPHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_rows_per_data_block = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rows_per_data_block_)));
          set_has_num_rows_per_data_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_version;
        break;
      }

      // repeated .palo.FileVersionMessage file_version = 2;
      case 2: {
        if (tag == 18) {
         parse_file_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_version;
        if (input->ExpectTag(24)) goto parse_cumulative_layer_point;
        break;
      }

      // required int32 cumulative_layer_point = 3;
      case 3: {
        if (tag == 24) {
         parse_cumulative_layer_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_layer_point_)));
          set_has_cumulative_layer_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_short_key_fields;
        break;
      }

      // required uint32 num_short_key_fields = 4;
      case 4: {
        if (tag == 32) {
         parse_num_short_key_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_short_key_fields_)));
          set_has_num_short_key_fields();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_column;
        break;
      }

      // repeated .palo.ColumnMessage column = 5;
      case 5: {
        if (tag == 42) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_column;
        if (input->ExpectTag(48)) goto parse_creation_time;
        break;
      }

      // required int64 creation_time = 6;
      case 6: {
        if (tag == 48) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_selectivity;
        break;
      }

      // repeated int32 selectivity = 7;
      case 7: {
        if (tag == 56) {
         parse_selectivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_selectivity())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_selectivity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_selectivity;
        if (input->ExpectTag(66)) goto parse_schema_change_status;
        break;
      }

      // optional .palo.SchemaChangeStatusMessage schema_change_status = 8;
      case 8: {
        if (tag == 66) {
         parse_schema_change_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema_change_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_data_file_type;
        break;
      }

      // optional .palo.DataFileType data_file_type = 9 [default = OLAP_DATA_FILE];
      case 9: {
        if (tag == 72) {
         parse_data_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::palo::DataFileType_IsValid(value)) {
            set_data_file_type(static_cast< ::palo::DataFileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_next_column_unique_id;
        break;
      }

      // optional uint32 next_column_unique_id = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_next_column_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_column_unique_id_)));
          set_has_next_column_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_compress_kind;
        break;
      }

      // optional .palo.CompressKind compress_kind = 11 [default = COMPRESS_LZO];
      case 11: {
        if (tag == 88) {
         parse_compress_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::palo::CompressKind_IsValid(value)) {
            set_compress_kind(static_cast< ::palo::CompressKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_segment_size;
        break;
      }

      // optional uint32 segment_size = 12 [default = 4292870144];
      case 12: {
        if (tag == 96) {
         parse_segment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segment_size_)));
          set_has_segment_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_delete_data_conditions;
        break;
      }

      // repeated .palo.DeleteDataConditionMessage delete_data_conditions = 13;
      case 13: {
        if (tag == 106) {
         parse_delete_data_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delete_data_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_delete_data_conditions;
        if (input->ExpectTag(113)) goto parse_bf_fpp;
        break;
      }

      // optional double bf_fpp = 14;
      case 14: {
        if (tag == 113) {
         parse_bf_fpp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bf_fpp_)));
          set_has_bf_fpp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_keys_type;
        break;
      }

      // optional .palo.KeysType keys_type = 15;
      case 15: {
        if (tag == 120) {
         parse_keys_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::palo::KeysType_IsValid(value)) {
            set_keys_type(static_cast< ::palo::KeysType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.OLAPHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.OLAPHeaderMessage)
  return false;
#undef DO_
}

void OLAPHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.OLAPHeaderMessage)
  // required uint32 num_rows_per_data_block = 1;
  if (has_num_rows_per_data_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_rows_per_data_block(), output);
  }

  // repeated .palo.FileVersionMessage file_version = 2;
  for (int i = 0; i < this->file_version_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->file_version(i), output);
  }

  // required int32 cumulative_layer_point = 3;
  if (has_cumulative_layer_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cumulative_layer_point(), output);
  }

  // required uint32 num_short_key_fields = 4;
  if (has_num_short_key_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_short_key_fields(), output);
  }

  // repeated .palo.ColumnMessage column = 5;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->column(i), output);
  }

  // required int64 creation_time = 6;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->creation_time(), output);
  }

  // repeated int32 selectivity = 7;
  for (int i = 0; i < this->selectivity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->selectivity(i), output);
  }

  // optional .palo.SchemaChangeStatusMessage schema_change_status = 8;
  if (has_schema_change_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->schema_change_status(), output);
  }

  // optional .palo.DataFileType data_file_type = 9 [default = OLAP_DATA_FILE];
  if (has_data_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->data_file_type(), output);
  }

  // optional uint32 next_column_unique_id = 10 [default = 0];
  if (has_next_column_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->next_column_unique_id(), output);
  }

  // optional .palo.CompressKind compress_kind = 11 [default = COMPRESS_LZO];
  if (has_compress_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->compress_kind(), output);
  }

  // optional uint32 segment_size = 12 [default = 4292870144];
  if (has_segment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->segment_size(), output);
  }

  // repeated .palo.DeleteDataConditionMessage delete_data_conditions = 13;
  for (int i = 0; i < this->delete_data_conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->delete_data_conditions(i), output);
  }

  // optional double bf_fpp = 14;
  if (has_bf_fpp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->bf_fpp(), output);
  }

  // optional .palo.KeysType keys_type = 15;
  if (has_keys_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->keys_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.OLAPHeaderMessage)
}

::google::protobuf::uint8* OLAPHeaderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.OLAPHeaderMessage)
  // required uint32 num_rows_per_data_block = 1;
  if (has_num_rows_per_data_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_rows_per_data_block(), target);
  }

  // repeated .palo.FileVersionMessage file_version = 2;
  for (int i = 0; i < this->file_version_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->file_version(i), target);
  }

  // required int32 cumulative_layer_point = 3;
  if (has_cumulative_layer_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cumulative_layer_point(), target);
  }

  // required uint32 num_short_key_fields = 4;
  if (has_num_short_key_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_short_key_fields(), target);
  }

  // repeated .palo.ColumnMessage column = 5;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->column(i), target);
  }

  // required int64 creation_time = 6;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->creation_time(), target);
  }

  // repeated int32 selectivity = 7;
  for (int i = 0; i < this->selectivity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->selectivity(i), target);
  }

  // optional .palo.SchemaChangeStatusMessage schema_change_status = 8;
  if (has_schema_change_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->schema_change_status(), target);
  }

  // optional .palo.DataFileType data_file_type = 9 [default = OLAP_DATA_FILE];
  if (has_data_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->data_file_type(), target);
  }

  // optional uint32 next_column_unique_id = 10 [default = 0];
  if (has_next_column_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->next_column_unique_id(), target);
  }

  // optional .palo.CompressKind compress_kind = 11 [default = COMPRESS_LZO];
  if (has_compress_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->compress_kind(), target);
  }

  // optional uint32 segment_size = 12 [default = 4292870144];
  if (has_segment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->segment_size(), target);
  }

  // repeated .palo.DeleteDataConditionMessage delete_data_conditions = 13;
  for (int i = 0; i < this->delete_data_conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->delete_data_conditions(i), target);
  }

  // optional double bf_fpp = 14;
  if (has_bf_fpp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->bf_fpp(), target);
  }

  // optional .palo.KeysType keys_type = 15;
  if (has_keys_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->keys_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.OLAPHeaderMessage)
  return target;
}

int OLAPHeaderMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_rows_per_data_block = 1;
    if (has_num_rows_per_data_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rows_per_data_block());
    }

    // required int32 cumulative_layer_point = 3;
    if (has_cumulative_layer_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_layer_point());
    }

    // required uint32 num_short_key_fields = 4;
    if (has_num_short_key_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_short_key_fields());
    }

    // required int64 creation_time = 6;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_time());
    }

    // optional .palo.SchemaChangeStatusMessage schema_change_status = 8;
    if (has_schema_change_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema_change_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .palo.DataFileType data_file_type = 9 [default = OLAP_DATA_FILE];
    if (has_data_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_file_type());
    }

    // optional uint32 next_column_unique_id = 10 [default = 0];
    if (has_next_column_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_column_unique_id());
    }

    // optional .palo.CompressKind compress_kind = 11 [default = COMPRESS_LZO];
    if (has_compress_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_kind());
    }

    // optional uint32 segment_size = 12 [default = 4292870144];
    if (has_segment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segment_size());
    }

    // optional double bf_fpp = 14;
    if (has_bf_fpp()) {
      total_size += 1 + 8;
    }

    // optional .palo.KeysType keys_type = 15;
    if (has_keys_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->keys_type());
    }

  }
  // repeated .palo.FileVersionMessage file_version = 2;
  total_size += 1 * this->file_version_size();
  for (int i = 0; i < this->file_version_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_version(i));
  }

  // repeated .palo.ColumnMessage column = 5;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  // repeated int32 selectivity = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->selectivity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->selectivity(i));
    }
    total_size += 1 * this->selectivity_size() + data_size;
  }

  // repeated .palo.DeleteDataConditionMessage delete_data_conditions = 13;
  total_size += 1 * this->delete_data_conditions_size();
  for (int i = 0; i < this->delete_data_conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delete_data_conditions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OLAPHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OLAPHeaderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OLAPHeaderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OLAPHeaderMessage::MergeFrom(const OLAPHeaderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_version_.MergeFrom(from.file_version_);
  column_.MergeFrom(from.column_);
  selectivity_.MergeFrom(from.selectivity_);
  delete_data_conditions_.MergeFrom(from.delete_data_conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_rows_per_data_block()) {
      set_num_rows_per_data_block(from.num_rows_per_data_block());
    }
    if (from.has_cumulative_layer_point()) {
      set_cumulative_layer_point(from.cumulative_layer_point());
    }
    if (from.has_num_short_key_fields()) {
      set_num_short_key_fields(from.num_short_key_fields());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_schema_change_status()) {
      mutable_schema_change_status()->::palo::SchemaChangeStatusMessage::MergeFrom(from.schema_change_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data_file_type()) {
      set_data_file_type(from.data_file_type());
    }
    if (from.has_next_column_unique_id()) {
      set_next_column_unique_id(from.next_column_unique_id());
    }
    if (from.has_compress_kind()) {
      set_compress_kind(from.compress_kind());
    }
    if (from.has_segment_size()) {
      set_segment_size(from.segment_size());
    }
    if (from.has_bf_fpp()) {
      set_bf_fpp(from.bf_fpp());
    }
    if (from.has_keys_type()) {
      set_keys_type(from.keys_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OLAPHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OLAPHeaderMessage::CopyFrom(const OLAPHeaderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OLAPHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002d) != 0x0000002d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->file_version())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->column())) return false;
  if (has_schema_change_status()) {
    if (!this->schema_change_status().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->delete_data_conditions())) return false;
  return true;
}

void OLAPHeaderMessage::Swap(OLAPHeaderMessage* other) {
  if (other != this) {
    std::swap(num_rows_per_data_block_, other->num_rows_per_data_block_);
    file_version_.Swap(&other->file_version_);
    std::swap(cumulative_layer_point_, other->cumulative_layer_point_);
    std::swap(num_short_key_fields_, other->num_short_key_fields_);
    column_.Swap(&other->column_);
    std::swap(creation_time_, other->creation_time_);
    selectivity_.Swap(&other->selectivity_);
    std::swap(schema_change_status_, other->schema_change_status_);
    std::swap(data_file_type_, other->data_file_type_);
    std::swap(next_column_unique_id_, other->next_column_unique_id_);
    std::swap(compress_kind_, other->compress_kind_);
    std::swap(segment_size_, other->segment_size_);
    delete_data_conditions_.Swap(&other->delete_data_conditions_);
    std::swap(bf_fpp_, other->bf_fpp_);
    std::swap(keys_type_, other->keys_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OLAPHeaderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OLAPHeaderMessage_descriptor_;
  metadata.reflection = OLAPHeaderMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OLAPIndexHeaderMessage::kStartVersionFieldNumber;
const int OLAPIndexHeaderMessage::kEndVersionFieldNumber;
const int OLAPIndexHeaderMessage::kCumulativeVersionHashFieldNumber;
const int OLAPIndexHeaderMessage::kSegmentFieldNumber;
const int OLAPIndexHeaderMessage::kNumRowsPerBlockFieldNumber;
const int OLAPIndexHeaderMessage::kNullSupportedFieldNumber;
const int OLAPIndexHeaderMessage::kDeleteFlagFieldNumber;
#endif  // !_MSC_VER

OLAPIndexHeaderMessage::OLAPIndexHeaderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.OLAPIndexHeaderMessage)
}

void OLAPIndexHeaderMessage::InitAsDefaultInstance() {
}

OLAPIndexHeaderMessage::OLAPIndexHeaderMessage(const OLAPIndexHeaderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.OLAPIndexHeaderMessage)
}

void OLAPIndexHeaderMessage::SharedCtor() {
  _cached_size_ = 0;
  start_version_ = 0;
  end_version_ = 0;
  cumulative_version_hash_ = GOOGLE_LONGLONG(0);
  segment_ = 0u;
  num_rows_per_block_ = 0u;
  null_supported_ = false;
  delete_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OLAPIndexHeaderMessage::~OLAPIndexHeaderMessage() {
  // @@protoc_insertion_point(destructor:palo.OLAPIndexHeaderMessage)
  SharedDtor();
}

void OLAPIndexHeaderMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OLAPIndexHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OLAPIndexHeaderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OLAPIndexHeaderMessage_descriptor_;
}

const OLAPIndexHeaderMessage& OLAPIndexHeaderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

OLAPIndexHeaderMessage* OLAPIndexHeaderMessage::default_instance_ = NULL;

OLAPIndexHeaderMessage* OLAPIndexHeaderMessage::New() const {
  return new OLAPIndexHeaderMessage;
}

void OLAPIndexHeaderMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OLAPIndexHeaderMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(start_version_, delete_flag_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OLAPIndexHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.OLAPIndexHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_version;
        break;
      }

      // required int32 end_version = 2;
      case 2: {
        if (tag == 16) {
         parse_end_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_version_)));
          set_has_end_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cumulative_version_hash;
        break;
      }

      // required int64 cumulative_version_hash = 3;
      case 3: {
        if (tag == 24) {
         parse_cumulative_version_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cumulative_version_hash_)));
          set_has_cumulative_version_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_segment;
        break;
      }

      // required uint32 segment = 4;
      case 4: {
        if (tag == 32) {
         parse_segment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segment_)));
          set_has_segment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_rows_per_block;
        break;
      }

      // required uint32 num_rows_per_block = 5;
      case 5: {
        if (tag == 40) {
         parse_num_rows_per_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rows_per_block_)));
          set_has_num_rows_per_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_null_supported;
        break;
      }

      // optional bool null_supported = 6;
      case 6: {
        if (tag == 48) {
         parse_null_supported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &null_supported_)));
          set_has_null_supported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_delete_flag;
        break;
      }

      // optional bool delete_flag = 7;
      case 7: {
        if (tag == 56) {
         parse_delete_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_flag_)));
          set_has_delete_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.OLAPIndexHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.OLAPIndexHeaderMessage)
  return false;
#undef DO_
}

void OLAPIndexHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.OLAPIndexHeaderMessage)
  // required int32 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_version(), output);
  }

  // required int32 end_version = 2;
  if (has_end_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_version(), output);
  }

  // required int64 cumulative_version_hash = 3;
  if (has_cumulative_version_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cumulative_version_hash(), output);
  }

  // required uint32 segment = 4;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->segment(), output);
  }

  // required uint32 num_rows_per_block = 5;
  if (has_num_rows_per_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_rows_per_block(), output);
  }

  // optional bool null_supported = 6;
  if (has_null_supported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->null_supported(), output);
  }

  // optional bool delete_flag = 7;
  if (has_delete_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->delete_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.OLAPIndexHeaderMessage)
}

::google::protobuf::uint8* OLAPIndexHeaderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.OLAPIndexHeaderMessage)
  // required int32 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_version(), target);
  }

  // required int32 end_version = 2;
  if (has_end_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_version(), target);
  }

  // required int64 cumulative_version_hash = 3;
  if (has_cumulative_version_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cumulative_version_hash(), target);
  }

  // required uint32 segment = 4;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->segment(), target);
  }

  // required uint32 num_rows_per_block = 5;
  if (has_num_rows_per_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_rows_per_block(), target);
  }

  // optional bool null_supported = 6;
  if (has_null_supported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->null_supported(), target);
  }

  // optional bool delete_flag = 7;
  if (has_delete_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->delete_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.OLAPIndexHeaderMessage)
  return target;
}

int OLAPIndexHeaderMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 start_version = 1;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_version());
    }

    // required int32 end_version = 2;
    if (has_end_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_version());
    }

    // required int64 cumulative_version_hash = 3;
    if (has_cumulative_version_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cumulative_version_hash());
    }

    // required uint32 segment = 4;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segment());
    }

    // required uint32 num_rows_per_block = 5;
    if (has_num_rows_per_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rows_per_block());
    }

    // optional bool null_supported = 6;
    if (has_null_supported()) {
      total_size += 1 + 1;
    }

    // optional bool delete_flag = 7;
    if (has_delete_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OLAPIndexHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OLAPIndexHeaderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OLAPIndexHeaderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OLAPIndexHeaderMessage::MergeFrom(const OLAPIndexHeaderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_end_version()) {
      set_end_version(from.end_version());
    }
    if (from.has_cumulative_version_hash()) {
      set_cumulative_version_hash(from.cumulative_version_hash());
    }
    if (from.has_segment()) {
      set_segment(from.segment());
    }
    if (from.has_num_rows_per_block()) {
      set_num_rows_per_block(from.num_rows_per_block());
    }
    if (from.has_null_supported()) {
      set_null_supported(from.null_supported());
    }
    if (from.has_delete_flag()) {
      set_delete_flag(from.delete_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OLAPIndexHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OLAPIndexHeaderMessage::CopyFrom(const OLAPIndexHeaderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OLAPIndexHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void OLAPIndexHeaderMessage::Swap(OLAPIndexHeaderMessage* other) {
  if (other != this) {
    std::swap(start_version_, other->start_version_);
    std::swap(end_version_, other->end_version_);
    std::swap(cumulative_version_hash_, other->cumulative_version_hash_);
    std::swap(segment_, other->segment_);
    std::swap(num_rows_per_block_, other->num_rows_per_block_);
    std::swap(null_supported_, other->null_supported_);
    std::swap(delete_flag_, other->delete_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OLAPIndexHeaderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OLAPIndexHeaderMessage_descriptor_;
  metadata.reflection = OLAPIndexHeaderMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OLAPDataHeaderMessage::kSegmentFieldNumber;
#endif  // !_MSC_VER

OLAPDataHeaderMessage::OLAPDataHeaderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.OLAPDataHeaderMessage)
}

void OLAPDataHeaderMessage::InitAsDefaultInstance() {
}

OLAPDataHeaderMessage::OLAPDataHeaderMessage(const OLAPDataHeaderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.OLAPDataHeaderMessage)
}

void OLAPDataHeaderMessage::SharedCtor() {
  _cached_size_ = 0;
  segment_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OLAPDataHeaderMessage::~OLAPDataHeaderMessage() {
  // @@protoc_insertion_point(destructor:palo.OLAPDataHeaderMessage)
  SharedDtor();
}

void OLAPDataHeaderMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OLAPDataHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OLAPDataHeaderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OLAPDataHeaderMessage_descriptor_;
}

const OLAPDataHeaderMessage& OLAPDataHeaderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

OLAPDataHeaderMessage* OLAPDataHeaderMessage::default_instance_ = NULL;

OLAPDataHeaderMessage* OLAPDataHeaderMessage::New() const {
  return new OLAPDataHeaderMessage;
}

void OLAPDataHeaderMessage::Clear() {
  segment_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OLAPDataHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.OLAPDataHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 segment = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segment_)));
          set_has_segment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.OLAPDataHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.OLAPDataHeaderMessage)
  return false;
#undef DO_
}

void OLAPDataHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.OLAPDataHeaderMessage)
  // required uint32 segment = 2;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->segment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.OLAPDataHeaderMessage)
}

::google::protobuf::uint8* OLAPDataHeaderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.OLAPDataHeaderMessage)
  // required uint32 segment = 2;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->segment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.OLAPDataHeaderMessage)
  return target;
}

int OLAPDataHeaderMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 segment = 2;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OLAPDataHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OLAPDataHeaderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OLAPDataHeaderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OLAPDataHeaderMessage::MergeFrom(const OLAPDataHeaderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segment()) {
      set_segment(from.segment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OLAPDataHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OLAPDataHeaderMessage::CopyFrom(const OLAPDataHeaderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OLAPDataHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OLAPDataHeaderMessage::Swap(OLAPDataHeaderMessage* other) {
  if (other != this) {
    std::swap(segment_, other->segment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OLAPDataHeaderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OLAPDataHeaderMessage_descriptor_;
  metadata.reflection = OLAPDataHeaderMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OLAPRawDeltaHeaderMessage::kSchemaHashFieldNumber;
#endif  // !_MSC_VER

OLAPRawDeltaHeaderMessage::OLAPRawDeltaHeaderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.OLAPRawDeltaHeaderMessage)
}

void OLAPRawDeltaHeaderMessage::InitAsDefaultInstance() {
}

OLAPRawDeltaHeaderMessage::OLAPRawDeltaHeaderMessage(const OLAPRawDeltaHeaderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.OLAPRawDeltaHeaderMessage)
}

void OLAPRawDeltaHeaderMessage::SharedCtor() {
  _cached_size_ = 0;
  schema_hash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OLAPRawDeltaHeaderMessage::~OLAPRawDeltaHeaderMessage() {
  // @@protoc_insertion_point(destructor:palo.OLAPRawDeltaHeaderMessage)
  SharedDtor();
}

void OLAPRawDeltaHeaderMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OLAPRawDeltaHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OLAPRawDeltaHeaderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OLAPRawDeltaHeaderMessage_descriptor_;
}

const OLAPRawDeltaHeaderMessage& OLAPRawDeltaHeaderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_olap_5ffile_2eproto();
  return *default_instance_;
}

OLAPRawDeltaHeaderMessage* OLAPRawDeltaHeaderMessage::default_instance_ = NULL;

OLAPRawDeltaHeaderMessage* OLAPRawDeltaHeaderMessage::New() const {
  return new OLAPRawDeltaHeaderMessage;
}

void OLAPRawDeltaHeaderMessage::Clear() {
  schema_hash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OLAPRawDeltaHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.OLAPRawDeltaHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 schema_hash = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_hash_)));
          set_has_schema_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.OLAPRawDeltaHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.OLAPRawDeltaHeaderMessage)
  return false;
#undef DO_
}

void OLAPRawDeltaHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.OLAPRawDeltaHeaderMessage)
  // required int32 schema_hash = 2;
  if (has_schema_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->schema_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.OLAPRawDeltaHeaderMessage)
}

::google::protobuf::uint8* OLAPRawDeltaHeaderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.OLAPRawDeltaHeaderMessage)
  // required int32 schema_hash = 2;
  if (has_schema_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->schema_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.OLAPRawDeltaHeaderMessage)
  return target;
}

int OLAPRawDeltaHeaderMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 schema_hash = 2;
    if (has_schema_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schema_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OLAPRawDeltaHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OLAPRawDeltaHeaderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OLAPRawDeltaHeaderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OLAPRawDeltaHeaderMessage::MergeFrom(const OLAPRawDeltaHeaderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema_hash()) {
      set_schema_hash(from.schema_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OLAPRawDeltaHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OLAPRawDeltaHeaderMessage::CopyFrom(const OLAPRawDeltaHeaderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OLAPRawDeltaHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OLAPRawDeltaHeaderMessage::Swap(OLAPRawDeltaHeaderMessage* other) {
  if (other != this) {
    std::swap(schema_hash_, other->schema_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OLAPRawDeltaHeaderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OLAPRawDeltaHeaderMessage_descriptor_;
  metadata.reflection = OLAPRawDeltaHeaderMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace palo

// @@protoc_insertion_point(global_scope)
