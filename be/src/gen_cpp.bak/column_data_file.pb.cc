// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: column_data_file.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "column_data_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace palo {
namespace column_file {

namespace {

const ::google::protobuf::Descriptor* StreamInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamInfoMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamInfoMessage_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnEncodingMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnEncodingMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnEncodingMessage_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnDataHeaderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnDataHeaderMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_column_5fdata_5ffile_2eproto() {
  protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "column_data_file.proto");
  GOOGLE_CHECK(file != NULL);
  StreamInfoMessage_descriptor_ = file->message_type(0);
  static const int StreamInfoMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfoMessage, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfoMessage, column_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfoMessage, length_),
  };
  StreamInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamInfoMessage_descriptor_,
      StreamInfoMessage::default_instance_,
      StreamInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamInfoMessage));
  StreamInfoMessage_Kind_descriptor_ = StreamInfoMessage_descriptor_->enum_type(0);
  ColumnEncodingMessage_descriptor_ = file->message_type(1);
  static const int ColumnEncodingMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncodingMessage, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncodingMessage, dictionary_size_),
  };
  ColumnEncodingMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnEncodingMessage_descriptor_,
      ColumnEncodingMessage::default_instance_,
      ColumnEncodingMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncodingMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncodingMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnEncodingMessage));
  ColumnEncodingMessage_Kind_descriptor_ = ColumnEncodingMessage_descriptor_->enum_type(0);
  ColumnDataHeaderMessage_descriptor_ = file->message_type(2);
  static const int ColumnDataHeaderMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, magic_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, number_of_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, index_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, data_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, compress_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, stream_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, column_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, stream_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, num_rows_per_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, bf_hash_function_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, bf_bit_num_),
  };
  ColumnDataHeaderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnDataHeaderMessage_descriptor_,
      ColumnDataHeaderMessage::default_instance_,
      ColumnDataHeaderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDataHeaderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnDataHeaderMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_column_5fdata_5ffile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamInfoMessage_descriptor_, &StreamInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnEncodingMessage_descriptor_, &ColumnEncodingMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnDataHeaderMessage_descriptor_, &ColumnDataHeaderMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_column_5fdata_5ffile_2eproto() {
  delete StreamInfoMessage::default_instance_;
  delete StreamInfoMessage_reflection_;
  delete ColumnEncodingMessage::default_instance_;
  delete ColumnEncodingMessage_reflection_;
  delete ColumnDataHeaderMessage::default_instance_;
  delete ColumnDataHeaderMessage_reflection_;
  delete ColumnDataHeaderMessage::_default_magic_string_;
}

void protobuf_AddDesc_column_5fdata_5ffile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::palo::protobuf_AddDesc_olap_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026column_data_file.proto\022\020palo.column_fi"
    "le\032\021olap_common.proto\"\377\001\n\021StreamInfoMess"
    "age\0226\n\004kind\030\001 \002(\0162(.palo.column_file.Str"
    "eamInfoMessage.Kind\022\030\n\020column_unique_id\030"
    "\002 \002(\r\022\016\n\006length\030\003 \002(\004\"\207\001\n\004Kind\022\r\n\tROW_IN"
    "DEX\020\000\022\013\n\007PRESENT\020\001\022\010\n\004DATA\020\002\022\n\n\006LENGTH\020\003"
    "\022\023\n\017DICTIONARY_DATA\020\004\022\r\n\tSECONDARY\020\005\022\027\n\023"
    "ROW_INDEX_STATISTIC\020\006\022\020\n\014BLOOM_FILTER\020\007\""
    "\220\001\n\025ColumnEncodingMessage\022:\n\004kind\030\001 \001(\0162"
    ",.palo.column_file.ColumnEncodingMessage"
    ".Kind\022\027\n\017dictionary_size\030\002 \001(\r\"\"\n\004Kind\022\n"
    "\n\006DIRECT\020\000\022\016\n\nDICTIONARY\020\001\"\332\003\n\027ColumnDat"
    "aHeaderMessage\022!\n\014magic_string\030\001 \002(\t:\013CO"
    "LUMN DATA\022\022\n\007version\030\002 \002(\r:\0011\022\026\n\016number_"
    "of_rows\030\004 \002(\004\022#\n\006column\030\005 \003(\0132\023.palo.Col"
    "umnMessage\022\024\n\014index_length\030\007 \002(\004\022\023\n\013data"
    "_length\030\010 \002(\004\0227\n\rcompress_kind\030\t \002(\0162\022.p"
    "alo.CompressKind:\014COMPRESS_LZO\0228\n\013stream"
    "_info\030\n \003(\0132#.palo.column_file.StreamInf"
    "oMessage\022@\n\017column_encoding\030\013 \003(\0132\'.palo"
    ".column_file.ColumnEncodingMessage\022\032\n\022st"
    "ream_buffer_size\030\014 \002(\r\022\035\n\022num_rows_per_b"
    "lock\030\r \001(\r:\0010\022\034\n\024bf_hash_function_num\030\016 "
    "\001(\r\022\022\n\nbf_bit_num\030\017 \001(\r", 943);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "column_data_file.proto", &protobuf_RegisterTypes);
  StreamInfoMessage::default_instance_ = new StreamInfoMessage();
  ColumnEncodingMessage::default_instance_ = new ColumnEncodingMessage();
  ColumnDataHeaderMessage::_default_magic_string_ =
      new ::std::string("COLUMN DATA", 11);
  ColumnDataHeaderMessage::default_instance_ = new ColumnDataHeaderMessage();
  StreamInfoMessage::default_instance_->InitAsDefaultInstance();
  ColumnEncodingMessage::default_instance_->InitAsDefaultInstance();
  ColumnDataHeaderMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_column_5fdata_5ffile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_column_5fdata_5ffile_2eproto {
  StaticDescriptorInitializer_column_5fdata_5ffile_2eproto() {
    protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  }
} static_descriptor_initializer_column_5fdata_5ffile_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StreamInfoMessage_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamInfoMessage_Kind_descriptor_;
}
bool StreamInfoMessage_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StreamInfoMessage_Kind StreamInfoMessage::ROW_INDEX;
const StreamInfoMessage_Kind StreamInfoMessage::PRESENT;
const StreamInfoMessage_Kind StreamInfoMessage::DATA;
const StreamInfoMessage_Kind StreamInfoMessage::LENGTH;
const StreamInfoMessage_Kind StreamInfoMessage::DICTIONARY_DATA;
const StreamInfoMessage_Kind StreamInfoMessage::SECONDARY;
const StreamInfoMessage_Kind StreamInfoMessage::ROW_INDEX_STATISTIC;
const StreamInfoMessage_Kind StreamInfoMessage::BLOOM_FILTER;
const StreamInfoMessage_Kind StreamInfoMessage::Kind_MIN;
const StreamInfoMessage_Kind StreamInfoMessage::Kind_MAX;
const int StreamInfoMessage::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StreamInfoMessage::kKindFieldNumber;
const int StreamInfoMessage::kColumnUniqueIdFieldNumber;
const int StreamInfoMessage::kLengthFieldNumber;
#endif  // !_MSC_VER

StreamInfoMessage::StreamInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.column_file.StreamInfoMessage)
}

void StreamInfoMessage::InitAsDefaultInstance() {
}

StreamInfoMessage::StreamInfoMessage(const StreamInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.column_file.StreamInfoMessage)
}

void StreamInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  column_unique_id_ = 0u;
  length_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamInfoMessage::~StreamInfoMessage() {
  // @@protoc_insertion_point(destructor:palo.column_file.StreamInfoMessage)
  SharedDtor();
}

void StreamInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamInfoMessage_descriptor_;
}

const StreamInfoMessage& StreamInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  return *default_instance_;
}

StreamInfoMessage* StreamInfoMessage::default_instance_ = NULL;

StreamInfoMessage* StreamInfoMessage::New() const {
  return new StreamInfoMessage;
}

void StreamInfoMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamInfoMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kind_, length_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.column_file.StreamInfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .palo.column_file.StreamInfoMessage.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::palo::column_file::StreamInfoMessage_Kind_IsValid(value)) {
            set_kind(static_cast< ::palo::column_file::StreamInfoMessage_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column_unique_id;
        break;
      }

      // required uint32 column_unique_id = 2;
      case 2: {
        if (tag == 16) {
         parse_column_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_unique_id_)));
          set_has_column_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint64 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.column_file.StreamInfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.column_file.StreamInfoMessage)
  return false;
#undef DO_
}

void StreamInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.column_file.StreamInfoMessage)
  // required .palo.column_file.StreamInfoMessage.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // required uint32 column_unique_id = 2;
  if (has_column_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column_unique_id(), output);
  }

  // required uint64 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.column_file.StreamInfoMessage)
}

::google::protobuf::uint8* StreamInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.column_file.StreamInfoMessage)
  // required .palo.column_file.StreamInfoMessage.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // required uint32 column_unique_id = 2;
  if (has_column_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column_unique_id(), target);
  }

  // required uint64 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.column_file.StreamInfoMessage)
  return target;
}

int StreamInfoMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .palo.column_file.StreamInfoMessage.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // required uint32 column_unique_id = 2;
    if (has_column_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_unique_id());
    }

    // required uint64 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamInfoMessage::MergeFrom(const StreamInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_column_unique_id()) {
      set_column_unique_id(from.column_unique_id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInfoMessage::CopyFrom(const StreamInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfoMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StreamInfoMessage::Swap(StreamInfoMessage* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(column_unique_id_, other->column_unique_id_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamInfoMessage_descriptor_;
  metadata.reflection = StreamInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ColumnEncodingMessage_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnEncodingMessage_Kind_descriptor_;
}
bool ColumnEncodingMessage_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ColumnEncodingMessage_Kind ColumnEncodingMessage::DIRECT;
const ColumnEncodingMessage_Kind ColumnEncodingMessage::DICTIONARY;
const ColumnEncodingMessage_Kind ColumnEncodingMessage::Kind_MIN;
const ColumnEncodingMessage_Kind ColumnEncodingMessage::Kind_MAX;
const int ColumnEncodingMessage::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ColumnEncodingMessage::kKindFieldNumber;
const int ColumnEncodingMessage::kDictionarySizeFieldNumber;
#endif  // !_MSC_VER

ColumnEncodingMessage::ColumnEncodingMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.column_file.ColumnEncodingMessage)
}

void ColumnEncodingMessage::InitAsDefaultInstance() {
}

ColumnEncodingMessage::ColumnEncodingMessage(const ColumnEncodingMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.column_file.ColumnEncodingMessage)
}

void ColumnEncodingMessage::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  dictionary_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnEncodingMessage::~ColumnEncodingMessage() {
  // @@protoc_insertion_point(destructor:palo.column_file.ColumnEncodingMessage)
  SharedDtor();
}

void ColumnEncodingMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnEncodingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnEncodingMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnEncodingMessage_descriptor_;
}

const ColumnEncodingMessage& ColumnEncodingMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  return *default_instance_;
}

ColumnEncodingMessage* ColumnEncodingMessage::default_instance_ = NULL;

ColumnEncodingMessage* ColumnEncodingMessage::New() const {
  return new ColumnEncodingMessage;
}

void ColumnEncodingMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnEncodingMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kind_, dictionary_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnEncodingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.column_file.ColumnEncodingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .palo.column_file.ColumnEncodingMessage.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::palo::column_file::ColumnEncodingMessage_Kind_IsValid(value)) {
            set_kind(static_cast< ::palo::column_file::ColumnEncodingMessage_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dictionary_size;
        break;
      }

      // optional uint32 dictionary_size = 2;
      case 2: {
        if (tag == 16) {
         parse_dictionary_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dictionary_size_)));
          set_has_dictionary_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.column_file.ColumnEncodingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.column_file.ColumnEncodingMessage)
  return false;
#undef DO_
}

void ColumnEncodingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.column_file.ColumnEncodingMessage)
  // optional .palo.column_file.ColumnEncodingMessage.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional uint32 dictionary_size = 2;
  if (has_dictionary_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dictionary_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.column_file.ColumnEncodingMessage)
}

::google::protobuf::uint8* ColumnEncodingMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.column_file.ColumnEncodingMessage)
  // optional .palo.column_file.ColumnEncodingMessage.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional uint32 dictionary_size = 2;
  if (has_dictionary_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dictionary_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.column_file.ColumnEncodingMessage)
  return target;
}

int ColumnEncodingMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .palo.column_file.ColumnEncodingMessage.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint32 dictionary_size = 2;
    if (has_dictionary_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dictionary_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnEncodingMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnEncodingMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnEncodingMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnEncodingMessage::MergeFrom(const ColumnEncodingMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_dictionary_size()) {
      set_dictionary_size(from.dictionary_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnEncodingMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnEncodingMessage::CopyFrom(const ColumnEncodingMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnEncodingMessage::IsInitialized() const {

  return true;
}

void ColumnEncodingMessage::Swap(ColumnEncodingMessage* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(dictionary_size_, other->dictionary_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnEncodingMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnEncodingMessage_descriptor_;
  metadata.reflection = ColumnEncodingMessage_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ColumnDataHeaderMessage::_default_magic_string_ = NULL;
#ifndef _MSC_VER
const int ColumnDataHeaderMessage::kMagicStringFieldNumber;
const int ColumnDataHeaderMessage::kVersionFieldNumber;
const int ColumnDataHeaderMessage::kNumberOfRowsFieldNumber;
const int ColumnDataHeaderMessage::kColumnFieldNumber;
const int ColumnDataHeaderMessage::kIndexLengthFieldNumber;
const int ColumnDataHeaderMessage::kDataLengthFieldNumber;
const int ColumnDataHeaderMessage::kCompressKindFieldNumber;
const int ColumnDataHeaderMessage::kStreamInfoFieldNumber;
const int ColumnDataHeaderMessage::kColumnEncodingFieldNumber;
const int ColumnDataHeaderMessage::kStreamBufferSizeFieldNumber;
const int ColumnDataHeaderMessage::kNumRowsPerBlockFieldNumber;
const int ColumnDataHeaderMessage::kBfHashFunctionNumFieldNumber;
const int ColumnDataHeaderMessage::kBfBitNumFieldNumber;
#endif  // !_MSC_VER

ColumnDataHeaderMessage::ColumnDataHeaderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:palo.column_file.ColumnDataHeaderMessage)
}

void ColumnDataHeaderMessage::InitAsDefaultInstance() {
}

ColumnDataHeaderMessage::ColumnDataHeaderMessage(const ColumnDataHeaderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:palo.column_file.ColumnDataHeaderMessage)
}

void ColumnDataHeaderMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  magic_string_ = const_cast< ::std::string*>(_default_magic_string_);
  version_ = 1u;
  number_of_rows_ = GOOGLE_ULONGLONG(0);
  index_length_ = GOOGLE_ULONGLONG(0);
  data_length_ = GOOGLE_ULONGLONG(0);
  compress_kind_ = 1;
  stream_buffer_size_ = 0u;
  num_rows_per_block_ = 0u;
  bf_hash_function_num_ = 0u;
  bf_bit_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnDataHeaderMessage::~ColumnDataHeaderMessage() {
  // @@protoc_insertion_point(destructor:palo.column_file.ColumnDataHeaderMessage)
  SharedDtor();
}

void ColumnDataHeaderMessage::SharedDtor() {
  if (magic_string_ != _default_magic_string_) {
    delete magic_string_;
  }
  if (this != default_instance_) {
  }
}

void ColumnDataHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnDataHeaderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnDataHeaderMessage_descriptor_;
}

const ColumnDataHeaderMessage& ColumnDataHeaderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_5fdata_5ffile_2eproto();
  return *default_instance_;
}

ColumnDataHeaderMessage* ColumnDataHeaderMessage::default_instance_ = NULL;

ColumnDataHeaderMessage* ColumnDataHeaderMessage::New() const {
  return new ColumnDataHeaderMessage;
}

void ColumnDataHeaderMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnDataHeaderMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(index_length_, data_length_);
    if (has_magic_string()) {
      if (magic_string_ != _default_magic_string_) {
        magic_string_->assign(*_default_magic_string_);
      }
    }
    version_ = 1u;
    number_of_rows_ = GOOGLE_ULONGLONG(0);
    compress_kind_ = 1;
  }
  ZR_(stream_buffer_size_, bf_bit_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  column_.Clear();
  stream_info_.Clear();
  column_encoding_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnDataHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:palo.column_file.ColumnDataHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string magic_string = 1 [default = "COLUMN DATA"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magic_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magic_string().data(), this->magic_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "magic_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_number_of_rows;
        break;
      }

      // required uint64 number_of_rows = 4;
      case 4: {
        if (tag == 32) {
         parse_number_of_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_of_rows_)));
          set_has_number_of_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_column;
        break;
      }

      // repeated .palo.ColumnMessage column = 5;
      case 5: {
        if (tag == 42) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_column;
        if (input->ExpectTag(56)) goto parse_index_length;
        break;
      }

      // required uint64 index_length = 7;
      case 7: {
        if (tag == 56) {
         parse_index_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_length_)));
          set_has_index_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_data_length;
        break;
      }

      // required uint64 data_length = 8;
      case 8: {
        if (tag == 64) {
         parse_data_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_length_)));
          set_has_data_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_compress_kind;
        break;
      }

      // required .palo.CompressKind compress_kind = 9 [default = COMPRESS_LZO];
      case 9: {
        if (tag == 72) {
         parse_compress_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::palo::CompressKind_IsValid(value)) {
            set_compress_kind(static_cast< ::palo::CompressKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stream_info;
        break;
      }

      // repeated .palo.column_file.StreamInfoMessage stream_info = 10;
      case 10: {
        if (tag == 82) {
         parse_stream_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stream_info;
        if (input->ExpectTag(90)) goto parse_column_encoding;
        break;
      }

      // repeated .palo.column_file.ColumnEncodingMessage column_encoding = 11;
      case 11: {
        if (tag == 90) {
         parse_column_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column_encoding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_column_encoding;
        if (input->ExpectTag(96)) goto parse_stream_buffer_size;
        break;
      }

      // required uint32 stream_buffer_size = 12;
      case 12: {
        if (tag == 96) {
         parse_stream_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_buffer_size_)));
          set_has_stream_buffer_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_num_rows_per_block;
        break;
      }

      // optional uint32 num_rows_per_block = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_num_rows_per_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rows_per_block_)));
          set_has_num_rows_per_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bf_hash_function_num;
        break;
      }

      // optional uint32 bf_hash_function_num = 14;
      case 14: {
        if (tag == 112) {
         parse_bf_hash_function_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bf_hash_function_num_)));
          set_has_bf_hash_function_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_bf_bit_num;
        break;
      }

      // optional uint32 bf_bit_num = 15;
      case 15: {
        if (tag == 120) {
         parse_bf_bit_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bf_bit_num_)));
          set_has_bf_bit_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:palo.column_file.ColumnDataHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:palo.column_file.ColumnDataHeaderMessage)
  return false;
#undef DO_
}

void ColumnDataHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:palo.column_file.ColumnDataHeaderMessage)
  // required string magic_string = 1 [default = "COLUMN DATA"];
  if (has_magic_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magic_string().data(), this->magic_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "magic_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->magic_string(), output);
  }

  // required uint32 version = 2 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // required uint64 number_of_rows = 4;
  if (has_number_of_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->number_of_rows(), output);
  }

  // repeated .palo.ColumnMessage column = 5;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->column(i), output);
  }

  // required uint64 index_length = 7;
  if (has_index_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->index_length(), output);
  }

  // required uint64 data_length = 8;
  if (has_data_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->data_length(), output);
  }

  // required .palo.CompressKind compress_kind = 9 [default = COMPRESS_LZO];
  if (has_compress_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->compress_kind(), output);
  }

  // repeated .palo.column_file.StreamInfoMessage stream_info = 10;
  for (int i = 0; i < this->stream_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stream_info(i), output);
  }

  // repeated .palo.column_file.ColumnEncodingMessage column_encoding = 11;
  for (int i = 0; i < this->column_encoding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->column_encoding(i), output);
  }

  // required uint32 stream_buffer_size = 12;
  if (has_stream_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stream_buffer_size(), output);
  }

  // optional uint32 num_rows_per_block = 13 [default = 0];
  if (has_num_rows_per_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->num_rows_per_block(), output);
  }

  // optional uint32 bf_hash_function_num = 14;
  if (has_bf_hash_function_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bf_hash_function_num(), output);
  }

  // optional uint32 bf_bit_num = 15;
  if (has_bf_bit_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bf_bit_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:palo.column_file.ColumnDataHeaderMessage)
}

::google::protobuf::uint8* ColumnDataHeaderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:palo.column_file.ColumnDataHeaderMessage)
  // required string magic_string = 1 [default = "COLUMN DATA"];
  if (has_magic_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magic_string().data(), this->magic_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "magic_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->magic_string(), target);
  }

  // required uint32 version = 2 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // required uint64 number_of_rows = 4;
  if (has_number_of_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->number_of_rows(), target);
  }

  // repeated .palo.ColumnMessage column = 5;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->column(i), target);
  }

  // required uint64 index_length = 7;
  if (has_index_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->index_length(), target);
  }

  // required uint64 data_length = 8;
  if (has_data_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->data_length(), target);
  }

  // required .palo.CompressKind compress_kind = 9 [default = COMPRESS_LZO];
  if (has_compress_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->compress_kind(), target);
  }

  // repeated .palo.column_file.StreamInfoMessage stream_info = 10;
  for (int i = 0; i < this->stream_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->stream_info(i), target);
  }

  // repeated .palo.column_file.ColumnEncodingMessage column_encoding = 11;
  for (int i = 0; i < this->column_encoding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->column_encoding(i), target);
  }

  // required uint32 stream_buffer_size = 12;
  if (has_stream_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stream_buffer_size(), target);
  }

  // optional uint32 num_rows_per_block = 13 [default = 0];
  if (has_num_rows_per_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->num_rows_per_block(), target);
  }

  // optional uint32 bf_hash_function_num = 14;
  if (has_bf_hash_function_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bf_hash_function_num(), target);
  }

  // optional uint32 bf_bit_num = 15;
  if (has_bf_bit_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bf_bit_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palo.column_file.ColumnDataHeaderMessage)
  return target;
}

int ColumnDataHeaderMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string magic_string = 1 [default = "COLUMN DATA"];
    if (has_magic_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magic_string());
    }

    // required uint32 version = 2 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint64 number_of_rows = 4;
    if (has_number_of_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->number_of_rows());
    }

    // required uint64 index_length = 7;
    if (has_index_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_length());
    }

    // required uint64 data_length = 8;
    if (has_data_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_length());
    }

    // required .palo.CompressKind compress_kind = 9 [default = COMPRESS_LZO];
    if (has_compress_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_kind());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 stream_buffer_size = 12;
    if (has_stream_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_buffer_size());
    }

    // optional uint32 num_rows_per_block = 13 [default = 0];
    if (has_num_rows_per_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rows_per_block());
    }

    // optional uint32 bf_hash_function_num = 14;
    if (has_bf_hash_function_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bf_hash_function_num());
    }

    // optional uint32 bf_bit_num = 15;
    if (has_bf_bit_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bf_bit_num());
    }

  }
  // repeated .palo.ColumnMessage column = 5;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  // repeated .palo.column_file.StreamInfoMessage stream_info = 10;
  total_size += 1 * this->stream_info_size();
  for (int i = 0; i < this->stream_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream_info(i));
  }

  // repeated .palo.column_file.ColumnEncodingMessage column_encoding = 11;
  total_size += 1 * this->column_encoding_size();
  for (int i = 0; i < this->column_encoding_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_encoding(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnDataHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnDataHeaderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnDataHeaderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnDataHeaderMessage::MergeFrom(const ColumnDataHeaderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  stream_info_.MergeFrom(from.stream_info_);
  column_encoding_.MergeFrom(from.column_encoding_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic_string()) {
      set_magic_string(from.magic_string());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_number_of_rows()) {
      set_number_of_rows(from.number_of_rows());
    }
    if (from.has_index_length()) {
      set_index_length(from.index_length());
    }
    if (from.has_data_length()) {
      set_data_length(from.data_length());
    }
    if (from.has_compress_kind()) {
      set_compress_kind(from.compress_kind());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_stream_buffer_size()) {
      set_stream_buffer_size(from.stream_buffer_size());
    }
    if (from.has_num_rows_per_block()) {
      set_num_rows_per_block(from.num_rows_per_block());
    }
    if (from.has_bf_hash_function_num()) {
      set_bf_hash_function_num(from.bf_hash_function_num());
    }
    if (from.has_bf_bit_num()) {
      set_bf_bit_num(from.bf_bit_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnDataHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnDataHeaderMessage::CopyFrom(const ColumnDataHeaderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDataHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000277) != 0x00000277) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->column())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stream_info())) return false;
  return true;
}

void ColumnDataHeaderMessage::Swap(ColumnDataHeaderMessage* other) {
  if (other != this) {
    std::swap(magic_string_, other->magic_string_);
    std::swap(version_, other->version_);
    std::swap(number_of_rows_, other->number_of_rows_);
    column_.Swap(&other->column_);
    std::swap(index_length_, other->index_length_);
    std::swap(data_length_, other->data_length_);
    std::swap(compress_kind_, other->compress_kind_);
    stream_info_.Swap(&other->stream_info_);
    column_encoding_.Swap(&other->column_encoding_);
    std::swap(stream_buffer_size_, other->stream_buffer_size_);
    std::swap(num_rows_per_block_, other->num_rows_per_block_);
    std::swap(bf_hash_function_num_, other->bf_hash_function_num_);
    std::swap(bf_bit_num_, other->bf_bit_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnDataHeaderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnDataHeaderMessage_descriptor_;
  metadata.reflection = ColumnDataHeaderMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace column_file
}  // namespace palo

// @@protoc_insertion_point(global_scope)
