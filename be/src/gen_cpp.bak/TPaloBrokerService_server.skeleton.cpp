// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TPaloBrokerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::palo;

class TPaloBrokerServiceHandler : virtual public TPaloBrokerServiceIf {
 public:
  TPaloBrokerServiceHandler() {
    // Your initialization goes here
  }

  void listPath(TBrokerListResponse& _return, const TBrokerListPathRequest& request) {
    // Your implementation goes here
    printf("listPath\n");
  }

  void deletePath(TBrokerOperationStatus& _return, const TBrokerDeletePathRequest& request) {
    // Your implementation goes here
    printf("deletePath\n");
  }

  void renamePath(TBrokerOperationStatus& _return, const TBrokerRenamePathRequest& request) {
    // Your implementation goes here
    printf("renamePath\n");
  }

  void checkPathExist(TBrokerCheckPathExistResponse& _return, const TBrokerCheckPathExistRequest& request) {
    // Your implementation goes here
    printf("checkPathExist\n");
  }

  void openReader(TBrokerOpenReaderResponse& _return, const TBrokerOpenReaderRequest& request) {
    // Your implementation goes here
    printf("openReader\n");
  }

  void pread(TBrokerReadResponse& _return, const TBrokerPReadRequest& request) {
    // Your implementation goes here
    printf("pread\n");
  }

  void seek(TBrokerOperationStatus& _return, const TBrokerSeekRequest& request) {
    // Your implementation goes here
    printf("seek\n");
  }

  void closeReader(TBrokerOperationStatus& _return, const TBrokerCloseReaderRequest& request) {
    // Your implementation goes here
    printf("closeReader\n");
  }

  void openWriter(TBrokerOpenWriterResponse& _return, const TBrokerOpenWriterRequest& request) {
    // Your implementation goes here
    printf("openWriter\n");
  }

  void pwrite(TBrokerOperationStatus& _return, const TBrokerPWriteRequest& request) {
    // Your implementation goes here
    printf("pwrite\n");
  }

  void closeWriter(TBrokerOperationStatus& _return, const TBrokerCloseWriterRequest& request) {
    // Your implementation goes here
    printf("closeWriter\n");
  }

  void ping(TBrokerOperationStatus& _return, const TBrokerPingBrokerRequest& request) {
    // Your implementation goes here
    printf("ping\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TPaloBrokerServiceHandler> handler(new TPaloBrokerServiceHandler());
  shared_ptr<TProcessor> processor(new TPaloBrokerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

